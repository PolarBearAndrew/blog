{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hueman/source/scrollLoading/style.css","path":"scrollLoading/style.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/main.js","path":"scrollLoading/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/jquery.scrollLoading.js","path":"scrollLoading/jquery.scrollLoading.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/images/preloader@2x.gif","path":"scrollLoading/images/preloader@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/images/preloader.gif","path":"scrollLoading/images/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/html-patch.js","path":"js/html-patch.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.bk.png","path":"css/images/logo-header.bk.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"source/images/javascript.jpg","path":"images/javascript.jpg","modified":0,"renderable":0},{"_id":"source/images/TTtimer/ic_launcher.png","path":"images/TTtimer/ic_launcher.png","modified":0,"renderable":0},{"_id":"source/images/TTtimer/working_finish.png","path":"images/TTtimer/working_finish.png","modified":0,"renderable":0},{"_id":"source/images/TTtimer/demo.png","path":"images/TTtimer/demo.png","modified":0,"renderable":0},{"_id":"source/images/TTtimer/demo2.png","path":"images/TTtimer/demo2.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_old_posts/003_TTtimerForOIT.md","shasum":"fc9a74dee18db6b524214ca047244c2c138089d7","modified":1439974171000,"hash":"fc9a74dee18db6b524214ca047244c2c138089d7"},{"_id":"source/_posts/Node_Redis記憶體快取.md","shasum":"770a33af3ce568c805ede808dbea70f4b78bced7","modified":1485775956000,"hash":"770a33af3ce568c805ede808dbea70f4b78bced7"},{"_id":"source/_posts/001_JSDevilDay.md","shasum":"9b6967b2b116a3c968026dc4963408dc2c1f4411","modified":1438602171000,"hash":"9b6967b2b116a3c968026dc4963408dc2c1f4411"},{"_id":"source/_posts/JavaScript_01.md","shasum":"24f71a09a8d922209ba53dc5aef205cced1b51a1","modified":1441957774000,"hash":"24f71a09a8d922209ba53dc5aef205cced1b51a1"},{"_id":"source/_posts/002_AngularReactOrOther.md","shasum":"cd1eff450b2d957960e309e3dd1a17a9027e4ab1","modified":1438601372000,"hash":"cd1eff450b2d957960e309e3dd1a17a9027e4ab1"},{"_id":"source/_posts/Node從零開始_01.md","shasum":"29ed1a0506cd697b4bac07791b8bc9645e62f39c","modified":1439895579000,"hash":"29ed1a0506cd697b4bac07791b8bc9645e62f39c"},{"_id":"source/_posts/Node從零開始_02.md","shasum":"85e9c83cac67c891cdd24e3285cae1ca0f157941","modified":1439517682000,"hash":"85e9c83cac67c891cdd24e3285cae1ca0f157941"},{"_id":"source/_posts/Node從零開始_03.md","shasum":"26a902304da386b80351a437467b6922b84f6632","modified":1439654116000,"hash":"26a902304da386b80351a437467b6922b84f6632"},{"_id":"source/_posts/Node從零開始_04.md","shasum":"c2f366a55f9023ee5f56de1e963307ebde5b5c8e","modified":1443175852000,"hash":"c2f366a55f9023ee5f56de1e963307ebde5b5c8e"},{"_id":"source/_posts/Node從零開始_05.md","shasum":"039e33f230e3eaf3c6320b1f68317d60053c5ff7","modified":1440465970000,"hash":"039e33f230e3eaf3c6320b1f68317d60053c5ff7"},{"_id":"source/_posts/_hello-world.md","shasum":"170bcae0322be89b6a544676d221edad75d1d13e","modified":1438821366000,"hash":"170bcae0322be89b6a544676d221edad75d1d13e"},{"_id":"source/categories/index.md","shasum":"c6cd5091945f5e95b77ccdda674e3192c30736a2","modified":1438479249000,"hash":"c6cd5091945f5e95b77ccdda674e3192c30736a2"},{"_id":"source/_posts/Node從零開始_06.md","shasum":"1bac35282ea62222db91f01cb311410a8a8e6087","modified":1440472465000,"hash":"1bac35282ea62222db91f01cb311410a8a8e6087"},{"_id":"source/img/TTtimer/ic_launcher.png","shasum":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1439970250000,"hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f"},{"_id":"source/img/me.jpg","shasum":"511c9c8b9eac4b39228f33d17c79b71a6efca80a","modified":1430655351000,"hash":"511c9c8b9eac4b39228f33d17c79b71a6efca80a"},{"_id":"source/img/nodeFormZero_2/node_2_1.png","shasum":"7a20144a14897068c27a3774dce686e1d6723e67","modified":1439513584000,"hash":"7a20144a14897068c27a3774dce686e1d6723e67"},{"_id":"source/img/nodeFormZero_2/node_2_6.png","shasum":"d1d2dad3b9d48f2917afa31d1ca0d6e5dce3cd7e","modified":1439514447000,"hash":"d1d2dad3b9d48f2917afa31d1ca0d6e5dce3cd7e"},{"_id":"source/img/nodeFormZero_2/node_2_7.png","shasum":"0b382fb40beb65fe86c2db0268f7624a10a7d092","modified":1439486794000,"hash":"0b382fb40beb65fe86c2db0268f7624a10a7d092"},{"_id":"source/img/nodeFormZero_2/node_3_1.png","shasum":"af766881c005d057f5c4bf42ea862045419c2977","modified":1439910480000,"hash":"af766881c005d057f5c4bf42ea862045419c2977"},{"_id":"source/tags/index.md","shasum":"5e767603e5f30191472dcc91836eca84f6c9cf8a","modified":1438479223000,"hash":"5e767603e5f30191472dcc91836eca84f6c9cf8a"},{"_id":"source/img/TTtimer/working_finish.png","shasum":"c5d088b9fb11dff6d5a6a05bd40228be0e19f3b4","modified":1420330570000,"hash":"c5d088b9fb11dff6d5a6a05bd40228be0e19f3b4"},{"_id":"source/img/nodeFormZero_2/node_2_4.png","shasum":"b88e1f257e3b690dc13d6015d4a20bfe9d18532b","modified":1439515182000,"hash":"b88e1f257e3b690dc13d6015d4a20bfe9d18532b"},{"_id":"source/img/nodeFormZero_2/node_4_2.png","shasum":"9073bfc037228e5cde4b1146f57ed82415ce7c41","modified":1440463848000,"hash":"9073bfc037228e5cde4b1146f57ed82415ce7c41"},{"_id":"source/img/nodeFormZero_2/node_2_2.png","shasum":"30cd09a399d8947c2769e5d79c04514d39bb1dd6","modified":1439513573000,"hash":"30cd09a399d8947c2769e5d79c04514d39bb1dd6"},{"_id":"source/img/nodeFormZero_2/node_2_3.png","shasum":"e8160d262dbd21a057b603ba8280156052c82cbc","modified":1439513691000,"hash":"e8160d262dbd21a057b603ba8280156052c82cbc"},{"_id":"source/img/nodeFormZero_2/node_4_1.png","shasum":"2832afa7bf4ea7dec1f104f983acb5f9eb31eb32","modified":1440463250000,"hash":"2832afa7bf4ea7dec1f104f983acb5f9eb31eb32"},{"_id":"source/img/nodeFormZero_2/node_4_4.png","shasum":"d5489e1d406b4f668106c4e8cea4565104d0b0f2","modified":1440466380000,"hash":"d5489e1d406b4f668106c4e8cea4565104d0b0f2"},{"_id":"themes/hueman/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1438449084000,"hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9"},{"_id":"themes/hueman/README.md","shasum":"cb0615f198b8b322d77452aa9fd2924189995855","modified":1438449084000,"hash":"cb0615f198b8b322d77452aa9fd2924189995855"},{"_id":"themes/hueman/_config.yml.example","shasum":"c005adc3200e1ecbbb591ebf0a9a91296ecdaed2","modified":1438475572000,"hash":"c005adc3200e1ecbbb591ebf0a9a91296ecdaed2"},{"_id":"themes/hueman/LICENSE","shasum":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1438449084000,"hash":"3975b7883caeb33f61fada7c0ef4add7ab189849"},{"_id":"themes/hueman/languages/en.yml","shasum":"79e127d356bdf5a29098793d48d52eb9fc8e9b5c","modified":1438449084000,"hash":"79e127d356bdf5a29098793d48d52eb9fc8e9b5c"},{"_id":"themes/hueman/languages/zh-CN.yml","shasum":"bdc8f74115cfe9aa4fe4eb20b36aa1030338274b","modified":1438449084000,"hash":"bdc8f74115cfe9aa4fe4eb20b36aa1030338274b"},{"_id":"themes/hueman/languages/zh-TW.yml","shasum":"add71557d2dc7ae40cda856db3304a8159079631","modified":1438475709000,"hash":"add71557d2dc7ae40cda856db3304a8159079631"},{"_id":"themes/hueman/layout/_partial/after-footer.ejs","shasum":"4c1afa7c23b1c20cbd0445ee2734a78a4e5ac774","modified":1438449084000,"hash":"4c1afa7c23b1c20cbd0445ee2734a78a4e5ac774"},{"_id":"themes/hueman/layout/_partial/archive.ejs","shasum":"d503cd2de2ad6c569d6cc47208987e00536231be","modified":1438449084000,"hash":"d503cd2de2ad6c569d6cc47208987e00536231be"},{"_id":"themes/hueman/layout/_partial/article.ejs","shasum":"fd5eb9c2323bedbee9901e4632af92fdc87a2fa2","modified":1438449084000,"hash":"fd5eb9c2323bedbee9901e4632af92fdc87a2fa2"},{"_id":"themes/hueman/layout/_partial/google-analytics.ejs","shasum":"b85f018bae6da2c96a09c4c69e1e2aeef896e40c","modified":1438476131000,"hash":"b85f018bae6da2c96a09c4c69e1e2aeef896e40c"},{"_id":"themes/hueman/layout/_partial/footer.ejs","shasum":"6656f5b97a20479efeda55879b17cf8db61bb698","modified":1438478796000,"hash":"6656f5b97a20479efeda55879b17cf8db61bb698"},{"_id":"themes/hueman/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1438449084000,"hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0"},{"_id":"themes/hueman/layout/_partial/header.ejs","shasum":"5467fed4704f9c4c897c6e7284a3af8bab02bdd8","modified":1439171100000,"hash":"5467fed4704f9c4c897c6e7284a3af8bab02bdd8"},{"_id":"themes/hueman/layout/_partial/head.ejs","shasum":"d27da77c892559b7ab13e36a84db791a2cdec7bf","modified":1438449084000,"hash":"d27da77c892559b7ab13e36a84db791a2cdec7bf"},{"_id":"themes/hueman/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1438449084000,"hash":"6197802873157656e3077c5099a7dda3d3b01c29"},{"_id":"themes/hueman/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1438449084000,"hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14"},{"_id":"themes/hueman/layout/_partial/post/nav.ejs","shasum":"025a7695be81126dff4fcbeff1face60118da600","modified":1438449084000,"hash":"025a7695be81126dff4fcbeff1face60118da600"},{"_id":"themes/hueman/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1438449084000,"hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b"},{"_id":"themes/hueman/layout/_partial/post/thumbnail.ejs","shasum":"a1d68ad1eb9092aca74321aff3c9fd42029c9ba6","modified":1438449084000,"hash":"a1d68ad1eb9092aca74321aff3c9fd42029c9ba6"},{"_id":"themes/hueman/layout/_partial/sidebar.ejs","shasum":"566ec2c9f9051a9489ef1de0b0c15f5765ca14ad","modified":1438449084000,"hash":"566ec2c9f9051a9489ef1de0b0c15f5765ca14ad"},{"_id":"themes/hueman/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1438449084000,"hash":"2f275739b6f1193c123646a5a31f37d48644c667"},{"_id":"themes/hueman/layout/_widget/archive.ejs","shasum":"92fcfd830c011f1ff6e7d95443fe65067d3161f8","modified":1438449084000,"hash":"92fcfd830c011f1ff6e7d95443fe65067d3161f8"},{"_id":"themes/hueman/layout/_widget/category.ejs","shasum":"f0bb4be5c625003c0e38312f5079667be3a09ab7","modified":1438449084000,"hash":"f0bb4be5c625003c0e38312f5079667be3a09ab7"},{"_id":"themes/hueman/layout/_widget/links.ejs","shasum":"e24c5bebe3e9f0bbaaf3b44bce8ef5ce56ae348b","modified":1438449084000,"hash":"e24c5bebe3e9f0bbaaf3b44bce8ef5ce56ae348b"},{"_id":"themes/hueman/layout/_widget/recent_posts.ejs","shasum":"0c4c97131131e5d06a886f9dc6e00f5de34e2bd3","modified":1438449084000,"hash":"0c4c97131131e5d06a886f9dc6e00f5de34e2bd3"},{"_id":"themes/hueman/layout/_widget/tagcloud.ejs","shasum":"f4ac20c48e4bd6202e263efc9d320de1ad48d608","modified":1438449084000,"hash":"f4ac20c48e4bd6202e263efc9d320de1ad48d608"},{"_id":"themes/hueman/layout/_widget/tag.ejs","shasum":"7b35103049fd0480f2631327b9381b7f4c9f5bcb","modified":1438449084000,"hash":"7b35103049fd0480f2631327b9381b7f4c9f5bcb"},{"_id":"themes/hueman/layout/archive.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1438449084000,"hash":"2d86ef0f908b57af4ebf007eb8c6624def84f82a"},{"_id":"themes/hueman/layout/index.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1438449084000,"hash":"2d86ef0f908b57af4ebf007eb8c6624def84f82a"},{"_id":"themes/hueman/layout/category.ejs","shasum":"85f2f7e0fdc16c496927511206364304ec364abe","modified":1438449084000,"hash":"85f2f7e0fdc16c496927511206364304ec364abe"},{"_id":"themes/hueman/layout/layout.ejs","shasum":"fc59e1e1d6127afdc8e2556e07c5d32fed5bb036","modified":1438474993000,"hash":"fc59e1e1d6127afdc8e2556e07c5d32fed5bb036"},{"_id":"themes/hueman/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1438449084000,"hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b"},{"_id":"themes/hueman/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1438449084000,"hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b"},{"_id":"themes/hueman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1438449084000,"hash":"aa411cd072399df1ddc8e2181a3204678a5177d9"},{"_id":"themes/hueman/package.json","shasum":"47c5adba0477e92e742349bf86f28bfeb701b3c1","modified":1438449084000,"hash":"47c5adba0477e92e742349bf86f28bfeb701b3c1"},{"_id":"themes/hueman/layout/tag.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1438449084000,"hash":"2d86ef0f908b57af4ebf007eb8c6624def84f82a"},{"_id":"themes/hueman/source/css/_extend.styl","shasum":"41c5b46a19627571bd592eb4b071e2e279333252","modified":1438449084000,"hash":"41c5b46a19627571bd592eb4b071e2e279333252"},{"_id":"themes/hueman/source/css/_partial/archive.styl","shasum":"c611142866096da7c7428d2ef8fd4079a781f57c","modified":1438449084000,"hash":"c611142866096da7c7428d2ef8fd4079a781f57c"},{"_id":"themes/hueman/source/css/_partial/assets.styl","shasum":"38e578af64f98e30fba8dadd5a4699a0972eda8e","modified":1438449084000,"hash":"38e578af64f98e30fba8dadd5a4699a0972eda8e"},{"_id":"themes/hueman/source/css/_partial/article.styl","shasum":"37700f09b26c2d180ccbc80267a9e9b76b3f0a58","modified":1438449084000,"hash":"37700f09b26c2d180ccbc80267a9e9b76b3f0a58"},{"_id":"themes/hueman/source/css/_partial/footer.styl","shasum":"5758e93569a1baf63de1e65ab7746df1d3130624","modified":1438449084000,"hash":"5758e93569a1baf63de1e65ab7746df1d3130624"},{"_id":"themes/hueman/source/css/_partial/comment.styl","shasum":"2683cecb7d69e23a3fb1e80f10141454fb4cb232","modified":1438449084000,"hash":"2683cecb7d69e23a3fb1e80f10141454fb4cb232"},{"_id":"themes/hueman/source/css/_partial/header.styl","shasum":"57db2edb99734989ee147226dc952506cb8f73e2","modified":1438449084000,"hash":"57db2edb99734989ee147226dc952506cb8f73e2"},{"_id":"themes/hueman/source/css/_partial/highlight.styl","shasum":"9332816d92370cff8e252631ef65cb78c53ebb2a","modified":1438449084000,"hash":"9332816d92370cff8e252631ef65cb78c53ebb2a"},{"_id":"themes/hueman/source/css/_partial/nav.styl","shasum":"ea1d621a570dec9833dcc6519d039821c72e1d8c","modified":1438449084000,"hash":"ea1d621a570dec9833dcc6519d039821c72e1d8c"},{"_id":"themes/hueman/source/css/_variables.styl","shasum":"4707e0af2154ae372648eeaec2d6f1babc5f740f","modified":1438820514000,"hash":"4707e0af2154ae372648eeaec2d6f1babc5f740f"},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","shasum":"494e9ba779f4d9ad023135baf76a270b2a6d8c94","modified":1438449084000,"hash":"494e9ba779f4d9ad023135baf76a270b2a6d8c94"},{"_id":"themes/hueman/source/css/_responsive.styl","shasum":"7518d511dee2f0f4da85ff635ff0da20060dc9b8","modified":1438449084000,"hash":"7518d511dee2f0f4da85ff635ff0da20060dc9b8"},{"_id":"themes/hueman/source/css/_retina.styl","shasum":"e0445c7caa049250fe3811f55cc82f389009e90f","modified":1438449084000,"hash":"e0445c7caa049250fe3811f55cc82f389009e90f"},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1438449084000,"hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"themes/hueman/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1438449084000,"hash":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"themes/hueman/source/css/images/opacity-10.png","shasum":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1438449084000,"hash":"bbc979866c5b50e8adb348419154b28b1ff44d78"},{"_id":"themes/hueman/source/css/images/logo-header.bk.png","shasum":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1438449084000,"hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59"},{"_id":"themes/hueman/source/css/images/logo-header.png","shasum":"614fc0d3770b287e33928233ee0859b2954efcd6","modified":1438821140000,"hash":"614fc0d3770b287e33928233ee0859b2954efcd6"},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1438449084000,"hash":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"themes/hueman/source/css/images/s-left.png","shasum":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1438449084000,"hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98"},{"_id":"themes/hueman/source/css/images/thumb-default.png","shasum":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1438449084000,"hash":"2d0ba175d958d342494241c616a74d37f48059fb"},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","shasum":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1438449084000,"hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba"},{"_id":"themes/hueman/source/css/style.styl","shasum":"0c9a533dacb73437543256f398e31ce8189ab970","modified":1438820491000,"hash":"0c9a533dacb73437543256f398e31ce8189ab970"},{"_id":"themes/hueman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1438449084000,"hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"themes/hueman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1438449084000,"hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"themes/hueman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1438449084000,"hash":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"themes/hueman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1438449084000,"hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"themes/hueman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1438449084000,"hash":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"themes/hueman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1438449084000,"hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"themes/hueman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1438449084000,"hash":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1438449084000,"hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1438449084000,"hash":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1438449084000,"hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1438449084000,"hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1438449084000,"hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1438449084000,"hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1438449084000,"hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"themes/hueman/source/js/html-patch.js","shasum":"f58064e8afcc34e816d8e400dafb850bd064a207","modified":1438449084000,"hash":"f58064e8afcc34e816d8e400dafb850bd064a207"},{"_id":"themes/hueman/source/js/script.js","shasum":"3a882ecf9ed0a1a921090d954037f90d4e5089e8","modified":1438449084000,"hash":"3a882ecf9ed0a1a921090d954037f90d4e5089e8"},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1438449084000,"hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"themes/hueman/source/scrollLoading/images/preloader.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1438449084000,"hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"themes/hueman/source/scrollLoading/jquery.scrollLoading.js","shasum":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1438449084000,"hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751"},{"_id":"themes/hueman/source/scrollLoading/images/preloader@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1438449084000,"hash":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"themes/hueman/source/scrollLoading/main.js","shasum":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1438449084000,"hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529"},{"_id":"themes/hueman/source/scrollLoading/style.css","shasum":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1438449084000,"hash":"4ee06b1478b786aed0817b629cf58f336e5eff62"},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1438449084000,"hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"source/img/nodeFormZero_2/node_2_5.png","shasum":"db170cf06b2e83620dd7e2c8dd9908df5a3b1fab","modified":1439513629000,"hash":"db170cf06b2e83620dd7e2c8dd9908df5a3b1fab"},{"_id":"source/img/TTtimer/demo.png","shasum":"7302b852ce5cd11944d3ae345faebf1a7f181b3d","modified":1439972131000,"hash":"7302b852ce5cd11944d3ae345faebf1a7f181b3d"},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1438449084000,"hash":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"source/img/TTtimer/demo2.png","shasum":"7d6d4bed66ab00e4ece09e7f30e3c6367de40527","modified":1439972512000,"hash":"7d6d4bed66ab00e4ece09e7f30e3c6367de40527"},{"_id":"source/img/nodeFormZero_2/node_4_3.png","shasum":"ec70ba567c2892eaa13fe62110384813b1f735bd","modified":1440464287000,"hash":"ec70ba567c2892eaa13fe62110384813b1f735bd"},{"_id":"public/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1485776235080},{"_id":"public/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1485776235080},{"_id":"public/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1485776235080},{"_id":"public/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485776234456},{"_id":"public/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485776234456},{"_id":"public/js/script.js","hash":"3a882ecf9ed0a1a921090d954037f90d4e5089e8","modified":1485776235080},{"_id":"public/js/html-patch.js","hash":"f58064e8afcc34e816d8e400dafb850bd064a207","modified":1485776235080},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1485776235080},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1485776235080},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1485776235080},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1485776235080},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1485776235080},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1485776235080},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1485776235080},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1485776235080},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1485776234457},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1485776234457},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1485776234457},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1485776234457},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485776234457},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485776234457},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1485776234457},{"_id":"public/css/style.css","hash":"a5a589bdfa146ad0a7c66ba029c58561abfef163","modified":1485776235080},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1485776234458},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1485776234458},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1485776234458},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1485776234458},{"_id":"public/css/images/logo-header.png","hash":"614fc0d3770b287e33928233ee0859b2954efcd6","modified":1485776234458},{"_id":"public/css/images/logo-header.bk.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1485776234458},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1485776234458},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1485776235070},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1485776235083},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1485776234458},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1485776234458},{"_id":"public/img/nodeFormZero_2/node_4_4.png","hash":"d5489e1d406b4f668106c4e8cea4565104d0b0f2","modified":1485776235081},{"_id":"public/img/nodeFormZero_2/node_4_3.png","hash":"ec70ba567c2892eaa13fe62110384813b1f735bd","modified":1485776235093},{"_id":"public/img/nodeFormZero_2/node_4_2.png","hash":"9073bfc037228e5cde4b1146f57ed82415ce7c41","modified":1485776235074},{"_id":"public/img/nodeFormZero_2/node_4_1.png","hash":"2832afa7bf4ea7dec1f104f983acb5f9eb31eb32","modified":1485776235081},{"_id":"public/img/nodeFormZero_2/node_3_1.png","hash":"af766881c005d057f5c4bf42ea862045419c2977","modified":1485776234458},{"_id":"public/img/nodeFormZero_2/node_2_7.png","hash":"0b382fb40beb65fe86c2db0268f7624a10a7d092","modified":1485776234458},{"_id":"public/img/nodeFormZero_2/node_2_6.png","hash":"d1d2dad3b9d48f2917afa31d1ca0d6e5dce3cd7e","modified":1485776234458},{"_id":"public/img/nodeFormZero_2/node_2_5.png","hash":"db170cf06b2e83620dd7e2c8dd9908df5a3b1fab","modified":1485776235089},{"_id":"public/img/nodeFormZero_2/node_2_4.png","hash":"b88e1f257e3b690dc13d6015d4a20bfe9d18532b","modified":1485776235074},{"_id":"public/img/nodeFormZero_2/node_2_3.png","hash":"e8160d262dbd21a057b603ba8280156052c82cbc","modified":1485776235081},{"_id":"public/img/nodeFormZero_2/node_2_2.png","hash":"30cd09a399d8947c2769e5d79c04514d39bb1dd6","modified":1485776235081},{"_id":"public/img/nodeFormZero_2/node_2_1.png","hash":"7a20144a14897068c27a3774dce686e1d6723e67","modified":1485776234458},{"_id":"public/img/me.jpg","hash":"511c9c8b9eac4b39228f33d17c79b71a6efca80a","modified":1485776234458},{"_id":"public/img/TTtimer/working_finish.png","hash":"c5d088b9fb11dff6d5a6a05bd40228be0e19f3b4","modified":1485776235074},{"_id":"public/img/TTtimer/ic_launcher.png","hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1485776234458},{"_id":"public/img/TTtimer/demo2.png","hash":"7d6d4bed66ab00e4ece09e7f30e3c6367de40527","modified":1485776235092},{"_id":"public/img/TTtimer/demo.png","hash":"7302b852ce5cd11944d3ae345faebf1a7f181b3d","modified":1485776235089},{"_id":"public/tags/index.html","hash":"d78af4f6a558ec4c970b319bc4670411d5b4242f","modified":1485826066836},{"_id":"public/categories/index.html","hash":"ec997dbef095bfe97cde122e37da27282ece2c40","modified":1485826066880},{"_id":"public/2015/08/25/Node從零開始_06/index.html","hash":"a5f030691d9418bbf8167686849b4e34e917c8db","modified":1485776234424},{"_id":"public/2015/08/25/Node從零開始_05/index.html","hash":"96a81617548c42d20f7001b6b524217f7984a0c5","modified":1485776234424},{"_id":"public/2015/08/18/Node從零開始_04/index.html","hash":"c88d44f9b59503aa95f54b8de7f034f3ea8322e0","modified":1485776234424},{"_id":"public/2015/08/18/JavaScript_01/index.html","hash":"85a71237f4a23dd1c8fc2a0c83bfb3a05a01d6d1","modified":1485776234424},{"_id":"public/2015/08/16/Node_Redis記憶體快取/index.html","hash":"32fb620328bbf791fe52ee850f2e012ea2a9ba50","modified":1485826066884},{"_id":"public/2015/08/15/Node從零開始_03/index.html","hash":"7cb143467ed4dbf9631df10d8d9added8d56f8e0","modified":1485776234425},{"_id":"public/2015/08/12/Node從零開始_02/index.html","hash":"1d2d63c5460cc9c94c96b58e49fdb1af63906891","modified":1485776234425},{"_id":"public/2015/08/09/Node從零開始_01/index.html","hash":"8891b372dba22e6b83f486ed54a468c8951cdb8b","modified":1485776234425},{"_id":"public/2015/08/02/002_AngularReactOrOther/index.html","hash":"8e75e517c29455949395ccf9cff0f9208570f220","modified":1485826066884},{"_id":"public/2015/08/02/001_JSDevilDay/index.html","hash":"96860296ec7cac138086eca5eaa23e7acb608c10","modified":1485826066884},{"_id":"public/archives/index.html","hash":"a4fae5596da516c1ffafbc002e0418598eb57a92","modified":1485826066884},{"_id":"public/archives/2015/index.html","hash":"4ca05bf992f65e9137080478c92c0afc712a0815","modified":1485826066884},{"_id":"public/archives/2015/08/index.html","hash":"545a3482ee55650e7854f6ce77c49849464a2c39","modified":1485826066884},{"_id":"public/categories/Node-js-從零開始/index.html","hash":"3c918b0b0011b41593da435d4c3f4df49f442602","modified":1485776234425},{"_id":"public/categories/Node-js/index.html","hash":"c4406b66008bb348b2b39cd53d71c48d99192004","modified":1485805369215},{"_id":"public/categories/JavaScript/index.html","hash":"d3d36a2ea637cce2c0711bd6e0548016777788cd","modified":1485805369215},{"_id":"public/categories/社群活動/index.html","hash":"5a8d6a7af2df9011e3fef0d6c258eeb9f84d7d72","modified":1485805369215},{"_id":"public/index.html","hash":"faf176a8b7e98dadd895b1be7fb2db8c10cbc809","modified":1485826066887},{"_id":"public/tags/Node-js/index.html","hash":"15ca62c4c9f77c987ff721c5decb4243965c7c39","modified":1485826066882},{"_id":"public/tags/Node-js-從零開始/index.html","hash":"3a8393385deda284e3adb717dca966641d945a99","modified":1485776234425},{"_id":"public/tags/JavaScript/index.html","hash":"d00f0b94e9fa78c592a88458e5cdf7f7ad1bc648","modified":1485826066888},{"_id":"public/tags/社群活動/index.html","hash":"75ff760a3a1a83ce3ae4650560db2f7a8bee7bba","modified":1485826066888},{"_id":"public/tags/Angular-js/index.html","hash":"152f0b45e696d9640ea932512792d13de3791b62","modified":1485826066882},{"_id":"public/tags/React-js/index.html","hash":"cfd9af7cfc15b61125ae81a30598ea75a0f78a84","modified":1485826066882},{"_id":"public/tags/ES6/index.html","hash":"a6ebdab2c69fe5d252ef25877eaa86c4eca69b0f","modified":1485826066882},{"_id":"public/sitemap.xml","hash":"11bbc9281d14ae5c4091fd84e606f06565f34eca","modified":1485826065950},{"_id":"source/.DS_Store","hash":"f9aba56ac8f6585a08b7ff8fc8012c196b0e7032","modified":1485777363000},{"_id":"themes/hueman/.DS_Store","hash":"b92d5459a05a5240ffb141d49b2f0aeb234e84b6","modified":1439169626000},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1438449084000},{"_id":"source/img/.DS_Store","hash":"f59a8a68102284de1d8fd8af4385e94ea56245a6","modified":1440463920000},{"_id":"themes/hueman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1438449084000},{"_id":"themes/hueman/.git/config","hash":"e1edb40c9185c45aaf038ac93a73733bcb556c48","modified":1438449084000},{"_id":"themes/hueman/.git/.DS_Store","hash":"eb182cd0add53c1bb9175f3a4e8c050457ada79f","modified":1439169626000},{"_id":"themes/hueman/.git/index","hash":"d29f6edc098541b6b2b8a71814f41f6b7e21f1f9","modified":1439170972000},{"_id":"themes/hueman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1438449074000},{"_id":"themes/hueman/.git/packed-refs","hash":"aaac337cf13db8c03255d2b352ce45595c9ade4a","modified":1438449084000},{"_id":"themes/hueman/layout/.DS_Store","hash":"39109ee602c22c84aa62311e2030d5ecc76f5a3a","modified":1439169626000},{"_id":"themes/hueman/source/.DS_Store","hash":"8fbf9a1c2dacb92c017694a65fdf0c91ab358e35","modified":1439169626000},{"_id":"source/img/TTtimer/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1439974756000},{"_id":"themes/hueman/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1438449074000},{"_id":"themes/hueman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1438449074000},{"_id":"themes/hueman/.git/logs/HEAD","hash":"cead32cc31a9088470cc26b122d3d3e9eb55253f","modified":1438449084000},{"_id":"themes/hueman/.git/logs/.DS_Store","hash":"e3b6726975138fdca09a55109a13ec93d7e74296","modified":1439169626000},{"_id":"themes/hueman/.git/objects/.DS_Store","hash":"71875d3d315225c33e046820e1507e00049c66c5","modified":1439169620000},{"_id":"themes/hueman/.git/refs/.DS_Store","hash":"087ede0f9e8a425bf245c9b10b400abbe4e59def","modified":1439169626000},{"_id":"themes/hueman/layout/_partial/.DS_Store","hash":"791848b5040e199cb2b6f324c3218b3f4cce44cb","modified":1439169620000},{"_id":"themes/hueman/source/css/.DS_Store","hash":"8337331af7273a48719ca666a42a54b6ba8afa6f","modified":1438847405000},{"_id":"themes/hueman/source/fancybox/.DS_Store","hash":"9b9b8ea7ddcc5526a56d8876929338d9ce1a6588","modified":1439169620000},{"_id":"themes/hueman/source/scrollLoading/.DS_Store","hash":"2680c4478700a5c62583ee112ca9f42a6f28217b","modified":1439169620000},{"_id":"themes/hueman/.git/logs/refs/.DS_Store","hash":"8ac480ad1dd13d34ee58d30fd3ed4e6f39abf747","modified":1439169626000},{"_id":"themes/hueman/.git/refs/heads/master","hash":"4f22c0b12a71f0b89beee03c3b56a13fcc037313","modified":1438449084000},{"_id":"themes/hueman/.git/objects/pack/pack-c4b4368d1815221b5d932b49039fd7b11eab106f.idx","hash":"1255714c90cf525dcd5ceab14349a2b1b04022db","modified":1438449084000},{"_id":"themes/hueman/.git/refs/remotes/.DS_Store","hash":"e59c0cecef6240ea4a7a615e645d1f84e88cbf6a","modified":1439169620000},{"_id":"themes/hueman/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1438821170000},{"_id":"themes/hueman/.git/logs/refs/heads/master","hash":"cead32cc31a9088470cc26b122d3d3e9eb55253f","modified":1438449084000},{"_id":"themes/hueman/.git/logs/refs/remotes/.DS_Store","hash":"9e38b44d1b83f347b139c86e2c1326f1782daf9c","modified":1439169620000},{"_id":"themes/hueman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1438449084000},{"_id":"themes/hueman/.git/logs/refs/remotes/origin/HEAD","hash":"cead32cc31a9088470cc26b122d3d3e9eb55253f","modified":1438449084000},{"_id":"themes/hueman/.git/objects/pack/pack-c4b4368d1815221b5d932b49039fd7b11eab106f.pack","hash":"6f8710003d631d9215cdec7426b1e270a1824fb2","modified":1438449084000},{"_id":"source/img/_nodeFormZero_2/node_2_1.png","hash":"7a20144a14897068c27a3774dce686e1d6723e67","modified":1439513584000},{"_id":"source/img/_nodeFormZero_2/node_2_6.png","hash":"d1d2dad3b9d48f2917afa31d1ca0d6e5dce3cd7e","modified":1439514447000},{"_id":"source/img/_nodeFormZero_2/node_2_7.png","hash":"0b382fb40beb65fe86c2db0268f7624a10a7d092","modified":1439486794000},{"_id":"source/img/_nodeFormZero_2/node_3_1.png","hash":"af766881c005d057f5c4bf42ea862045419c2977","modified":1439910480000},{"_id":"source/img/_nodeFormZero_2/node_2_4.png","hash":"b88e1f257e3b690dc13d6015d4a20bfe9d18532b","modified":1439515182000},{"_id":"source/img/_nodeFormZero_2/node_4_2.png","hash":"9073bfc037228e5cde4b1146f57ed82415ce7c41","modified":1440463848000},{"_id":"source/img/_nodeFormZero_2/node_2_2.png","hash":"30cd09a399d8947c2769e5d79c04514d39bb1dd6","modified":1439513573000},{"_id":"source/img/_nodeFormZero_2/node_2_3.png","hash":"e8160d262dbd21a057b603ba8280156052c82cbc","modified":1439513691000},{"_id":"source/img/_nodeFormZero_2/node_4_1.png","hash":"2832afa7bf4ea7dec1f104f983acb5f9eb31eb32","modified":1440463250000},{"_id":"source/img/_nodeFormZero_2/node_4_4.png","hash":"d5489e1d406b4f668106c4e8cea4565104d0b0f2","modified":1440466380000},{"_id":"source/img/_nodeFormZero_2/node_2_5.png","hash":"db170cf06b2e83620dd7e2c8dd9908df5a3b1fab","modified":1439513629000},{"_id":"source/img/_nodeFormZero_2/node_4_3.png","hash":"ec70ba567c2892eaa13fe62110384813b1f735bd","modified":1440464287000},{"_id":"source/img/_TTtimer/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1439974756000},{"_id":"source/img/_TTtimer/ic_launcher.png","hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1439970250000},{"_id":"source/img/_TTtimer/working_finish.png","hash":"c5d088b9fb11dff6d5a6a05bd40228be0e19f3b4","modified":1420330570000},{"_id":"source/img/_TTtimer/demo.png","hash":"7302b852ce5cd11944d3ae345faebf1a7f181b3d","modified":1439972131000},{"_id":"source/img/_TTtimer/demo2.png","hash":"7d6d4bed66ab00e4ece09e7f30e3c6367de40527","modified":1439972512000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_1.png","hash":"7a20144a14897068c27a3774dce686e1d6723e67","modified":1439513584000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_6.png","hash":"d1d2dad3b9d48f2917afa31d1ca0d6e5dce3cd7e","modified":1439514447000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_7.png","hash":"0b382fb40beb65fe86c2db0268f7624a10a7d092","modified":1439486794000},{"_id":"source/_old_posts/_nodeFormZero_2/node_3_1.png","hash":"af766881c005d057f5c4bf42ea862045419c2977","modified":1439910480000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_4.png","hash":"b88e1f257e3b690dc13d6015d4a20bfe9d18532b","modified":1439515182000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_2.png","hash":"30cd09a399d8947c2769e5d79c04514d39bb1dd6","modified":1439513573000},{"_id":"source/_old_posts/_nodeFormZero_2/node_4_2.png","hash":"9073bfc037228e5cde4b1146f57ed82415ce7c41","modified":1440463848000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_3.png","hash":"e8160d262dbd21a057b603ba8280156052c82cbc","modified":1439513691000},{"_id":"source/_old_posts/_nodeFormZero_2/node_4_1.png","hash":"2832afa7bf4ea7dec1f104f983acb5f9eb31eb32","modified":1440463250000},{"_id":"source/_old_posts/_nodeFormZero_2/node_4_4.png","hash":"d5489e1d406b4f668106c4e8cea4565104d0b0f2","modified":1440466380000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_5.png","hash":"db170cf06b2e83620dd7e2c8dd9908df5a3b1fab","modified":1439513629000},{"_id":"source/_old_posts/_nodeFormZero_2/node_4_3.png","hash":"ec70ba567c2892eaa13fe62110384813b1f735bd","modified":1440464287000},{"_id":"source/_old_posts/_TTtimer/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1439974756000},{"_id":"source/_old_posts/_TTtimer/ic_launcher.png","hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1439970250000},{"_id":"source/_old_posts/_TTtimer/working_finish.png","hash":"c5d088b9fb11dff6d5a6a05bd40228be0e19f3b4","modified":1420330570000},{"_id":"source/_old_posts/_TTtimer/demo.png","hash":"7302b852ce5cd11944d3ae345faebf1a7f181b3d","modified":1439972131000},{"_id":"source/_old_posts/_TTtimer/demo2.png","hash":"7d6d4bed66ab00e4ece09e7f30e3c6367de40527","modified":1439972512000},{"_id":"source/images/javascript.png","hash":"4b4a9a1baedcdb2a1a92a6e648da82194498a90f","modified":1485777026000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1485777044000},{"_id":"source/_old_posts/Node從零開始_01.md","hash":"29ed1a0506cd697b4bac07791b8bc9645e62f39c","modified":1439895579000},{"_id":"source/_old_posts/Node從零開始_02.md","hash":"85e9c83cac67c891cdd24e3285cae1ca0f157941","modified":1439517682000},{"_id":"source/_old_posts/Node從零開始_03.md","hash":"26a902304da386b80351a437467b6922b84f6632","modified":1439654116000},{"_id":"source/_old_posts/Node從零開始_04.md","hash":"c2f366a55f9023ee5f56de1e963307ebde5b5c8e","modified":1443175852000},{"_id":"source/_old_posts/Node從零開始_05.md","hash":"039e33f230e3eaf3c6320b1f68317d60053c5ff7","modified":1440465970000},{"_id":"source/_old_posts/Node從零開始_06.md","hash":"1bac35282ea62222db91f01cb311410a8a8e6087","modified":1440472465000},{"_id":"source/_posts/JavaScript_01_build_call_apply.md","hash":"a614b5bfe6d0883a3823ab4de45b57b25430f1d4","modified":1485777434000},{"_id":"source/images/javascript.jpg","hash":"40d3dbea4443273ddc3c9feffafb6277fcb41d8b","modified":1485777428000},{"_id":"public/2015/08/18/JavaScript_01_build_call_apply/index.html","hash":"4c8475834b79e3b41cf55cac3497cf5e22ed62f1","modified":1485825692438},{"_id":"public/images/javascript.jpg","hash":"40d3dbea4443273ddc3c9feffafb6277fcb41d8b","modified":1485777506825},{"_id":"public/categoriesl/Node-js/index.html","hash":"731c852c3270623122064f3ae844eaddbddd5fe8","modified":1485826066882},{"_id":"public/categoriesl/社群活動/index.html","hash":"a12aa9d224329c1b03b974d9aaaa14108422a77c","modified":1485826066885},{"_id":"public/categoriesl/JavaScript/index.html","hash":"5e063c9b4a812d2868b544ff19b9497c53db5559","modified":1485826066882},{"_id":"source/_posts/003_TTtimerForOIT.md","hash":"a29bc96d1960b2d621611d1dbf4167fe98645872","modified":1485826043000},{"_id":"public/categoriesl/作品集/index.html","hash":"f64627ed774ac0615cba351c49365a54f862ab54","modified":1485826066882},{"_id":"public/tags/Android/index.html","hash":"eb31804e076ee59a9267c0aa6de7e771eb23b6b3","modified":1485826066883},{"_id":"public/tags/Java/index.html","hash":"2408a40e8ae8512e2beb633da6923d3170567e72","modified":1485826066883},{"_id":"public/tags/作品集/index.html","hash":"da9f824f494ba6b16e3a23fab98536bb2bee8f3a","modified":1485826066883},{"_id":"public/2015/08/19/003_TTtimerForOIT/index.html","hash":"a3a2336ebdcb243b1f57af3e78be6cc56ba7a55f","modified":1485826066883},{"_id":"source/_old_posts/TTtimer/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1439974756000},{"_id":"source/_old_posts/TTtimer/ic_launcher.png","hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1439970250000},{"_id":"source/_old_posts/TTtimer/working_finish.png","hash":"c5d088b9fb11dff6d5a6a05bd40228be0e19f3b4","modified":1420330570000},{"_id":"source/_old_posts/TTtimer/demo.png","hash":"7302b852ce5cd11944d3ae345faebf1a7f181b3d","modified":1439972131000},{"_id":"source/_old_posts/TTtimer/demo2.png","hash":"7d6d4bed66ab00e4ece09e7f30e3c6367de40527","modified":1439972512000},{"_id":"source/images/TTtimer/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1439974756000},{"_id":"source/images/TTtimer/ic_launcher.png","hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1439970250000},{"_id":"source/images/TTtimer/working_finish.png","hash":"c5d088b9fb11dff6d5a6a05bd40228be0e19f3b4","modified":1420330570000},{"_id":"source/images/TTtimer/demo.png","hash":"7302b852ce5cd11944d3ae345faebf1a7f181b3d","modified":1439972131000},{"_id":"source/images/TTtimer/demo2.png","hash":"7d6d4bed66ab00e4ece09e7f30e3c6367de40527","modified":1439972512000},{"_id":"public/images/TTtimer/ic_launcher.png","hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1485825920813},{"_id":"public/images/TTtimer/working_finish.png","hash":"c5d088b9fb11dff6d5a6a05bd40228be0e19f3b4","modified":1485825920815},{"_id":"public/images/TTtimer/demo.png","hash":"7302b852ce5cd11944d3ae345faebf1a7f181b3d","modified":1485825920820},{"_id":"public/images/TTtimer/demo2.png","hash":"7d6d4bed66ab00e4ece09e7f30e3c6367de40527","modified":1485825920821},{"_id":"source/_posts/20150818_JS_build_call_apply.md","hash":"a614b5bfe6d0883a3823ab4de45b57b25430f1d4","modified":1485777434000},{"_id":"public/2015/08/18/20150818_JS_build_call_apply/index.html","hash":"f61c82a2a9544849c532c62d8821b157d89c345c","modified":1485826066889}],"Category":[{"name":"Node.js 從零開始","_id":"ciyk0rqeh0003jcu0jmlc13bn"},{"name":"Node.js","_id":"ciyk0rqf10011jcu0leretilj"},{"name":"JavaScript","_id":"ciyk0rqf50016jcu0o4i0rxit"},{"name":"社群活動","_id":"ciyk0rqf9001ajcu0rwjb69h6"},{"name":"作品集","_id":"ciyku844n0001juu06hi8jb0q"}],"Data":[],"Page":[{"title":"Tags","date":"2015-08-02T01:33:43.000Z","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-08-02 09:33:43\n---\n","updated":"2015-08-02T01:33:43.000Z","path":"tags/index.html","_id":"ciyk0rqe20000jcu0kgux6r9b","comments":1,"layout":"page","content":"","excerpt":"","more":""},{"title":"Categories","date":"2015-08-02T01:34:09.000Z","_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-08-02 09:34:09\n---\n","updated":"2015-08-02T01:34:09.000Z","path":"categories/index.html","_id":"ciyk0rqe90001jcu0cvvgg35d","comments":1,"layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"Redis - Node.js 記憶體快取","date":"2015-08-16T03:01:07.000Z","comments":0,"_content":"\n<center>\n![Redis](https://redislabs.com/wp-content/images/redis-logo.png)\n</center>\n\n* [Redis](http://redis.io)\n* [Redis - 官方文件](http://redis.io/documentation)\n* [Redis - npm](https://www.npmjs.com/package/redis)\n* [Redis - GUI](http://redisdesktop.com)\n\n## 簡介\n\nRedis 是以 key-value 的形式在伺服器的記憶體中儲存資訊的方式，為伺服器命名做快取(cache)。有別於其他 noSQL 或是 RDB，key-value 即是使用一個 key 的值對應到一筆資料。而 Redis 的特色就是將這筆資料，寫在記憶體裡面。\n\n大概有幾種狀況會將資料寫入到快取中：\n\n* 在一定時間內會被大量請求的資料，如：新聞的 Top 10。\n* 某些伺服器會頻繁使用的資料，或全域變數。如：\n* 測試用的資料，短時間內要使用的假資料。\n* 也能當成 Session 使用。(相當不健康的觀念)\n\nRedis 本身會瓜分伺服器的記憶體來使用，Node.js 連線所使用的記憶體相對於 PHP/Apache 較少，除非能非常準確地掌握 Session 的數量，否則不建議 Redit 當成 Session 使用，同樣的意思不應該將 Redis 當成資料庫來只用。如果對 Redis 有相當大的需求，應該特地架設 Redis 的伺服器，避免兩套系統互相搶奪記憶體資源。\n\n## 安裝\n\n先從官方網站下載 Redis，解開壓縮檔之後，在資料夾下執行以下指令\n\n``` bat\n$ make\n```\n\n輸入指令後，Redis 會自行安裝，需要一段時間\n\n``` bat\n$ make test\n```\n\nRedis 會自行進行測試，測時完成後即可啟動，啟動並不需要在指定的資料夾下，屬於全域的\n\n``` bat\n$ redis-server\n```\n\n接著在 [Redis - GUI](http://redisdesktop.com) 的介面中進行連線就可以檢視現在 Redis 內的資料。\n\n\n## 使用\n\n在 Node.js 引用 Redis 的套件並且連線\n\n``` js\nvar redis = require(\"redis\").createClient('6379', '127.0.0.1'); //port, IP\n```\n\nredis.set 寫入值\n\n``` js\nredis.set( key, value, function( err, reply ){\n  console.log( reply.toString() ); // 新增成功會回傳 ok\n});\n```\n\nredis.get 取得值\n\n``` js\nredis.get( key, function( err, reply ){\n  console.log( reply.toString() ); // 新增會回傳 value\n});\n```\n\ncache 資料的存活時間\n\n``` js\nredis.expire( key, 60);\n```\n\nredis 錯誤 callback function\n\n``` js\nredis.on( \"connect\", callback );\n```\n\nredis 錯誤 callback function\n\n``` js\nredis.on( \"error\", callback );\n```\n\nredis 驗證\n如果在 redis.conf 中有設定需要驗證的話，須在在此填入驗證碼，類似密碼的意思。\n\n``` js\nredis.auth(\"AndrewChen\");\n```\n\n## 結語\n\nRedis 基本上安裝完成就成功一半了，簡易的 set/get 即可使用，Redis 的操作本身不難，但謹慎的使用，小心記憶體的使用量，避免超額使用或是佔據了伺服器的空間。另外定期簡單的透過GUI介面檢查 Redis 的狀況也是相當不錯的選擇。\n","source":"_posts/Node_Redis記憶體快取.md","raw":"title: Redis - Node.js 記憶體快取\ndate: 2015-08-16 11:01:07\ntags:\n- Node.js\n- JavaScript\ncategories: Node.js\ncomments: false\n---\n\n<center>\n![Redis](https://redislabs.com/wp-content/images/redis-logo.png)\n</center>\n\n* [Redis](http://redis.io)\n* [Redis - 官方文件](http://redis.io/documentation)\n* [Redis - npm](https://www.npmjs.com/package/redis)\n* [Redis - GUI](http://redisdesktop.com)\n\n## 簡介\n\nRedis 是以 key-value 的形式在伺服器的記憶體中儲存資訊的方式，為伺服器命名做快取(cache)。有別於其他 noSQL 或是 RDB，key-value 即是使用一個 key 的值對應到一筆資料。而 Redis 的特色就是將這筆資料，寫在記憶體裡面。\n\n大概有幾種狀況會將資料寫入到快取中：\n\n* 在一定時間內會被大量請求的資料，如：新聞的 Top 10。\n* 某些伺服器會頻繁使用的資料，或全域變數。如：\n* 測試用的資料，短時間內要使用的假資料。\n* 也能當成 Session 使用。(相當不健康的觀念)\n\nRedis 本身會瓜分伺服器的記憶體來使用，Node.js 連線所使用的記憶體相對於 PHP/Apache 較少，除非能非常準確地掌握 Session 的數量，否則不建議 Redit 當成 Session 使用，同樣的意思不應該將 Redis 當成資料庫來只用。如果對 Redis 有相當大的需求，應該特地架設 Redis 的伺服器，避免兩套系統互相搶奪記憶體資源。\n\n## 安裝\n\n先從官方網站下載 Redis，解開壓縮檔之後，在資料夾下執行以下指令\n\n``` bat\n$ make\n```\n\n輸入指令後，Redis 會自行安裝，需要一段時間\n\n``` bat\n$ make test\n```\n\nRedis 會自行進行測試，測時完成後即可啟動，啟動並不需要在指定的資料夾下，屬於全域的\n\n``` bat\n$ redis-server\n```\n\n接著在 [Redis - GUI](http://redisdesktop.com) 的介面中進行連線就可以檢視現在 Redis 內的資料。\n\n\n## 使用\n\n在 Node.js 引用 Redis 的套件並且連線\n\n``` js\nvar redis = require(\"redis\").createClient('6379', '127.0.0.1'); //port, IP\n```\n\nredis.set 寫入值\n\n``` js\nredis.set( key, value, function( err, reply ){\n  console.log( reply.toString() ); // 新增成功會回傳 ok\n});\n```\n\nredis.get 取得值\n\n``` js\nredis.get( key, function( err, reply ){\n  console.log( reply.toString() ); // 新增會回傳 value\n});\n```\n\ncache 資料的存活時間\n\n``` js\nredis.expire( key, 60);\n```\n\nredis 錯誤 callback function\n\n``` js\nredis.on( \"connect\", callback );\n```\n\nredis 錯誤 callback function\n\n``` js\nredis.on( \"error\", callback );\n```\n\nredis 驗證\n如果在 redis.conf 中有設定需要驗證的話，須在在此填入驗證碼，類似密碼的意思。\n\n``` js\nredis.auth(\"AndrewChen\");\n```\n\n## 結語\n\nRedis 基本上安裝完成就成功一半了，簡易的 set/get 即可使用，Redis 的操作本身不難，但謹慎的使用，小心記憶體的使用量，避免超額使用或是佔據了伺服器的空間。另外定期簡單的透過GUI介面檢查 Redis 的狀況也是相當不錯的選擇。\n","slug":"Node_Redis記憶體快取","published":1,"updated":"2017-01-30T11:32:36.000Z","_id":"ciyk0rqf00010jcu0ufv7mwva","layout":"post","photos":[],"link":"","content":"<center><br><img src=\"https://redislabs.com/wp-content/images/redis-logo.png\" alt=\"Redis\"><br></center>\n\n<ul>\n<li><a href=\"http://redis.io\" target=\"_blank\" rel=\"external\">Redis</a></li>\n<li><a href=\"http://redis.io/documentation\" target=\"_blank\" rel=\"external\">Redis - 官方文件</a></li>\n<li><a href=\"https://www.npmjs.com/package/redis\" target=\"_blank\" rel=\"external\">Redis - npm</a></li>\n<li><a href=\"http://redisdesktop.com\" target=\"_blank\" rel=\"external\">Redis - GUI</a></li>\n</ul>\n<h2 id=\"簡介\">簡介</h2><p>Redis 是以 key-value 的形式在伺服器的記憶體中儲存資訊的方式，為伺服器命名做快取(cache)。有別於其他 noSQL 或是 RDB，key-value 即是使用一個 key 的值對應到一筆資料。而 Redis 的特色就是將這筆資料，寫在記憶體裡面。</p>\n<p>大概有幾種狀況會將資料寫入到快取中：</p>\n<ul>\n<li>在一定時間內會被大量請求的資料，如：新聞的 Top 10。</li>\n<li>某些伺服器會頻繁使用的資料，或全域變數。如：</li>\n<li>測試用的資料，短時間內要使用的假資料。</li>\n<li>也能當成 Session 使用。(相當不健康的觀念)</li>\n</ul>\n<p>Redis 本身會瓜分伺服器的記憶體來使用，Node.js 連線所使用的記憶體相對於 PHP/Apache 較少，除非能非常準確地掌握 Session 的數量，否則不建議 Redit 當成 Session 使用，同樣的意思不應該將 Redis 當成資料庫來只用。如果對 Redis 有相當大的需求，應該特地架設 Redis 的伺服器，避免兩套系統互相搶奪記憶體資源。</p>\n<h2 id=\"安裝\">安裝</h2><p>先從官方網站下載 Redis，解開壓縮檔之後，在資料夾下執行以下指令</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make</div></pre></td></tr></table></figure>\n<p>輸入指令後，Redis 會自行安裝，需要一段時間</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make test</div></pre></td></tr></table></figure>\n<p>Redis 會自行進行測試，測時完成後即可啟動，啟動並不需要在指定的資料夾下，屬於全域的</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-server</div></pre></td></tr></table></figure>\n<p>接著在 <a href=\"http://redisdesktop.com\" target=\"_blank\" rel=\"external\">Redis - GUI</a> 的介面中進行連線就可以檢視現在 Redis 內的資料。</p>\n<h2 id=\"使用\">使用</h2><p>在 Node.js 引用 Redis 的套件並且連線</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>).createClient(<span class=\"string\">'6379'</span>, <span class=\"string\">'127.0.0.1'</span>); <span class=\"comment\">//port, IP</span></div></pre></td></tr></table></figure>\n<p>redis.set 寫入值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.set( key, value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> err, reply </span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( reply.toString() ); <span class=\"comment\">// 新增成功會回傳 ok</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>redis.get 取得值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.get( key, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> err, reply </span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( reply.toString() ); <span class=\"comment\">// 新增會回傳 value</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>cache 資料的存活時間</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.expire( key, <span class=\"number\">60</span>);</div></pre></td></tr></table></figure>\n<p>redis 錯誤 callback function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.on( <span class=\"string\">\"connect\"</span>, callback );</div></pre></td></tr></table></figure>\n<p>redis 錯誤 callback function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.on( <span class=\"string\">\"error\"</span>, callback );</div></pre></td></tr></table></figure>\n<p>redis 驗證<br>如果在 redis.conf 中有設定需要驗證的話，須在在此填入驗證碼，類似密碼的意思。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.auth(<span class=\"string\">\"AndrewChen\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"結語\">結語</h2><p>Redis 基本上安裝完成就成功一半了，簡易的 set/get 即可使用，Redis 的操作本身不難，但謹慎的使用，小心記憶體的使用量，避免超額使用或是佔據了伺服器的空間。另外定期簡單的透過GUI介面檢查 Redis 的狀況也是相當不錯的選擇。</p>\n","excerpt":"","more":"<center><br><img src=\"https://redislabs.com/wp-content/images/redis-logo.png\" alt=\"Redis\"><br></center>\n\n<ul>\n<li><a href=\"http://redis.io\">Redis</a></li>\n<li><a href=\"http://redis.io/documentation\">Redis - 官方文件</a></li>\n<li><a href=\"https://www.npmjs.com/package/redis\">Redis - npm</a></li>\n<li><a href=\"http://redisdesktop.com\">Redis - GUI</a></li>\n</ul>\n<h2 id=\"簡介\">簡介</h2><p>Redis 是以 key-value 的形式在伺服器的記憶體中儲存資訊的方式，為伺服器命名做快取(cache)。有別於其他 noSQL 或是 RDB，key-value 即是使用一個 key 的值對應到一筆資料。而 Redis 的特色就是將這筆資料，寫在記憶體裡面。</p>\n<p>大概有幾種狀況會將資料寫入到快取中：</p>\n<ul>\n<li>在一定時間內會被大量請求的資料，如：新聞的 Top 10。</li>\n<li>某些伺服器會頻繁使用的資料，或全域變數。如：</li>\n<li>測試用的資料，短時間內要使用的假資料。</li>\n<li>也能當成 Session 使用。(相當不健康的觀念)</li>\n</ul>\n<p>Redis 本身會瓜分伺服器的記憶體來使用，Node.js 連線所使用的記憶體相對於 PHP/Apache 較少，除非能非常準確地掌握 Session 的數量，否則不建議 Redit 當成 Session 使用，同樣的意思不應該將 Redis 當成資料庫來只用。如果對 Redis 有相當大的需求，應該特地架設 Redis 的伺服器，避免兩套系統互相搶奪記憶體資源。</p>\n<h2 id=\"安裝\">安裝</h2><p>先從官方網站下載 Redis，解開壓縮檔之後，在資料夾下執行以下指令</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make</div></pre></td></tr></table></figure>\n<p>輸入指令後，Redis 會自行安裝，需要一段時間</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make test</div></pre></td></tr></table></figure>\n<p>Redis 會自行進行測試，測時完成後即可啟動，啟動並不需要在指定的資料夾下，屬於全域的</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-server</div></pre></td></tr></table></figure>\n<p>接著在 <a href=\"http://redisdesktop.com\">Redis - GUI</a> 的介面中進行連線就可以檢視現在 Redis 內的資料。</p>\n<h2 id=\"使用\">使用</h2><p>在 Node.js 引用 Redis 的套件並且連線</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>).createClient(<span class=\"string\">'6379'</span>, <span class=\"string\">'127.0.0.1'</span>); <span class=\"comment\">//port, IP</span></div></pre></td></tr></table></figure>\n<p>redis.set 寫入值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.set( key, value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> err, reply </span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( reply.toString() ); <span class=\"comment\">// 新增成功會回傳 ok</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>redis.get 取得值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.get( key, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> err, reply </span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( reply.toString() ); <span class=\"comment\">// 新增會回傳 value</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>cache 資料的存活時間</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.expire( key, <span class=\"number\">60</span>);</div></pre></td></tr></table></figure>\n<p>redis 錯誤 callback function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.on( <span class=\"string\">\"connect\"</span>, callback );</div></pre></td></tr></table></figure>\n<p>redis 錯誤 callback function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.on( <span class=\"string\">\"error\"</span>, callback );</div></pre></td></tr></table></figure>\n<p>redis 驗證<br>如果在 redis.conf 中有設定需要驗證的話，須在在此填入驗證碼，類似密碼的意思。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.auth(<span class=\"string\">\"AndrewChen\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"結語\">結語</h2><p>Redis 基本上安裝完成就成功一半了，簡易的 set/get 即可使用，Redis 的操作本身不難，但謹慎的使用，小心記憶體的使用量，避免超額使用或是佔據了伺服器的空間。另外定期簡單的透過GUI介面檢查 Redis 的狀況也是相當不錯的選擇。</p>\n"},{"title":"淺談前端框架未來，Angular, React, 還是...？","date":"2015-08-02T01:13:44.000Z","comments":0,"_content":"\n> 本篇文上是本人Andrew Chen為[JSDC 2015](http://jsdc.tw)撰寫\n> 感謝[Caeser Chi](https://www.facebook.com/clonncd?fref=ts)給予指導\n\n![前端框架未來？React, Angular or ..?](http://cdn.xenyomedia.com/sites/default/files/blog/rwd.png)\n\n前端入坑深似海，一入宅門出不來。這肯定是許多前端工程師可以體認到的共同感觸，前端真可以說是一個坑，維繫大家能夠持續學習的動機，除了熱情，應該就還是熱情吧。\n\n## 淺談前端框架\n\n隨著前端應用變化越來越多，因此許多前端框架不斷的推陳出新，從早期大家所熟知的 [batman.js](http://batmanjs.org), [backbone.js](http://backbonejs.org), [emberjs](http://emberjs.com) 在中期也開始出現了許多不同框架，其中到了 Google 踏進 Angular.js 之後前端框架正式熱門起來，也掀起另外一波大戰。\n\n隨著世代的轉移，JavaScript 漸漸語法轉移到 ES6，語法不同，開始有了不同應用，也因此又出現了令人亮眼的新秀：[Aurelia](http://aurelia.io)。\n\n由於前端框架的世界更新相當迅速，不斷有新的Framwork出現，各家開發者對自己熟悉的框架各執其詞，其實相當難定義何者叫好。\n\n## 前端框架未來？React, Angular ?\n\n[React](http://facebook.github.io/react/) 和 [Angular](http://aurelia.io) 目前為前端兩大流行的框架，兩者的風格迥異。\n\nReact 主打 Single Source of True 和 Flux 的單項資料流，重新以元件的思維角度去設計 WebApp，最後又採用相同思維可以進行開發 iOS, Android native 程式框架 - React Native 讓大家眼睛為之一亮。\n\n而在Angular目前的情況較為不明朗，相當多的開發者正在使用能穩定運作的 1.x 版本，但是 Angular 2.x 的版本卻面臨了相當大的改版，而且並沒有支援 1.x 的部分。 Angular 最大亮點在雙向資料綁定，簡潔的資料綁定和監控配上快節奏的開發技巧時，產生令人驚豔的開發速度。\n\nReact 跟 Angular 整體的核心思維是相當不同的，React 特色在於簡化的開發邏輯與資料流，單純的單項資料流讓開發流程和除錯都容易了許多，React 的結構設計也讓抽取元件變得直觀與單純，React 傾向於將開發簡化，在設計好架構與資料結構後就減少犯錯的機會。\n\n但從另一個角度來說，React針對單一的操作，要撰寫的程式碼多出了許多，整個架構也變得龐大。而 Angular 則相反，Angular 在處理資料時相當快速且方便，雙向的資料綁定讓開者並不需要思考太多元件對應的關係，但也因此最終可能會讓整個專案陷入混亂，Angular 在抽取元件時比 React 需要更多的開發技巧，對整體團隊的開發素質要求也相對的更高。\n\n## 新的選擇 - Aurelia\n\nAurelia 或許可以說介於 React 和 Angular 兩者之間，Aurelia 目前為相當新秀的開發框架，他本身與 Angular 的資料綁定方式相當類似，不僅僅對 Angular 的開發者相當容易上手，安插在 HTML5 中的屬性也更加語意化。\n\nAurelia 的核心圍繞在模板上，因此他似乎同時擁有了 React 類似元件的觀念，又同時有 Angular 綁定資料的手法，算是相當多元，除此之外 Aurelia 對 ES6, ES7 擁有更高的支援度。\n\n當然目前 Aurelia 還在持續開發中，雖然版本尚未穩定，但是已經是個值得注目的前端框架，可以開始試著去執行，了解 Aurelia ，或許在現今 Single Page App 爆炸性成長的階段，Aurelia 能在未來佔有一席之地。\n\n也許未來 JavaScript 真的能夠做到前後端統一程式碼進行開發，也有可能踏入 hardware 開發領域，這都需要時間來證明，當然也需要各位的投入，就讓我們持續關注這個世代的變化吧。","source":"_posts/002_AngularReactOrOther.md","raw":"title: 淺談前端框架未來，Angular, React, 還是...？\ndate: 2015-08-02 09:13:44\ntags:\n- 社群活動\n- JavaScript\n- Angular.js\n- React.js\ncategories: 社群活動\ncomments: false\n---\n\n> 本篇文上是本人Andrew Chen為[JSDC 2015](http://jsdc.tw)撰寫\n> 感謝[Caeser Chi](https://www.facebook.com/clonncd?fref=ts)給予指導\n\n![前端框架未來？React, Angular or ..?](http://cdn.xenyomedia.com/sites/default/files/blog/rwd.png)\n\n前端入坑深似海，一入宅門出不來。這肯定是許多前端工程師可以體認到的共同感觸，前端真可以說是一個坑，維繫大家能夠持續學習的動機，除了熱情，應該就還是熱情吧。\n\n## 淺談前端框架\n\n隨著前端應用變化越來越多，因此許多前端框架不斷的推陳出新，從早期大家所熟知的 [batman.js](http://batmanjs.org), [backbone.js](http://backbonejs.org), [emberjs](http://emberjs.com) 在中期也開始出現了許多不同框架，其中到了 Google 踏進 Angular.js 之後前端框架正式熱門起來，也掀起另外一波大戰。\n\n隨著世代的轉移，JavaScript 漸漸語法轉移到 ES6，語法不同，開始有了不同應用，也因此又出現了令人亮眼的新秀：[Aurelia](http://aurelia.io)。\n\n由於前端框架的世界更新相當迅速，不斷有新的Framwork出現，各家開發者對自己熟悉的框架各執其詞，其實相當難定義何者叫好。\n\n## 前端框架未來？React, Angular ?\n\n[React](http://facebook.github.io/react/) 和 [Angular](http://aurelia.io) 目前為前端兩大流行的框架，兩者的風格迥異。\n\nReact 主打 Single Source of True 和 Flux 的單項資料流，重新以元件的思維角度去設計 WebApp，最後又採用相同思維可以進行開發 iOS, Android native 程式框架 - React Native 讓大家眼睛為之一亮。\n\n而在Angular目前的情況較為不明朗，相當多的開發者正在使用能穩定運作的 1.x 版本，但是 Angular 2.x 的版本卻面臨了相當大的改版，而且並沒有支援 1.x 的部分。 Angular 最大亮點在雙向資料綁定，簡潔的資料綁定和監控配上快節奏的開發技巧時，產生令人驚豔的開發速度。\n\nReact 跟 Angular 整體的核心思維是相當不同的，React 特色在於簡化的開發邏輯與資料流，單純的單項資料流讓開發流程和除錯都容易了許多，React 的結構設計也讓抽取元件變得直觀與單純，React 傾向於將開發簡化，在設計好架構與資料結構後就減少犯錯的機會。\n\n但從另一個角度來說，React針對單一的操作，要撰寫的程式碼多出了許多，整個架構也變得龐大。而 Angular 則相反，Angular 在處理資料時相當快速且方便，雙向的資料綁定讓開者並不需要思考太多元件對應的關係，但也因此最終可能會讓整個專案陷入混亂，Angular 在抽取元件時比 React 需要更多的開發技巧，對整體團隊的開發素質要求也相對的更高。\n\n## 新的選擇 - Aurelia\n\nAurelia 或許可以說介於 React 和 Angular 兩者之間，Aurelia 目前為相當新秀的開發框架，他本身與 Angular 的資料綁定方式相當類似，不僅僅對 Angular 的開發者相當容易上手，安插在 HTML5 中的屬性也更加語意化。\n\nAurelia 的核心圍繞在模板上，因此他似乎同時擁有了 React 類似元件的觀念，又同時有 Angular 綁定資料的手法，算是相當多元，除此之外 Aurelia 對 ES6, ES7 擁有更高的支援度。\n\n當然目前 Aurelia 還在持續開發中，雖然版本尚未穩定，但是已經是個值得注目的前端框架，可以開始試著去執行，了解 Aurelia ，或許在現今 Single Page App 爆炸性成長的階段，Aurelia 能在未來佔有一席之地。\n\n也許未來 JavaScript 真的能夠做到前後端統一程式碼進行開發，也有可能踏入 hardware 開發領域，這都需要時間來證明，當然也需要各位的投入，就讓我們持續關注這個世代的變化吧。","slug":"002_AngularReactOrOther","published":1,"updated":"2015-08-03T11:29:32.000Z","_id":"ciyk0rqf80019jcu0ei3oe5rl","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本篇文上是本人Andrew Chen為<a href=\"http://jsdc.tw\" target=\"_blank\" rel=\"external\">JSDC 2015</a>撰寫<br>感謝<a href=\"https://www.facebook.com/clonncd?fref=ts\" target=\"_blank\" rel=\"external\">Caeser Chi</a>給予指導</p>\n</blockquote>\n<p><img src=\"http://cdn.xenyomedia.com/sites/default/files/blog/rwd.png\" alt=\"前端框架未來？React, Angular or ..?\"></p>\n<p>前端入坑深似海，一入宅門出不來。這肯定是許多前端工程師可以體認到的共同感觸，前端真可以說是一個坑，維繫大家能夠持續學習的動機，除了熱情，應該就還是熱情吧。</p>\n<h2 id=\"淺談前端框架\">淺談前端框架</h2><p>隨著前端應用變化越來越多，因此許多前端框架不斷的推陳出新，從早期大家所熟知的 <a href=\"http://batmanjs.org\" target=\"_blank\" rel=\"external\">batman.js</a>, <a href=\"http://backbonejs.org\" target=\"_blank\" rel=\"external\">backbone.js</a>, <a href=\"http://emberjs.com\" target=\"_blank\" rel=\"external\">emberjs</a> 在中期也開始出現了許多不同框架，其中到了 Google 踏進 Angular.js 之後前端框架正式熱門起來，也掀起另外一波大戰。</p>\n<p>隨著世代的轉移，JavaScript 漸漸語法轉移到 ES6，語法不同，開始有了不同應用，也因此又出現了令人亮眼的新秀：<a href=\"http://aurelia.io\" target=\"_blank\" rel=\"external\">Aurelia</a>。</p>\n<p>由於前端框架的世界更新相當迅速，不斷有新的Framwork出現，各家開發者對自己熟悉的框架各執其詞，其實相當難定義何者叫好。</p>\n<h2 id=\"前端框架未來？React,_Angular_?\">前端框架未來？React, Angular ?</h2><p><a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a> 和 <a href=\"http://aurelia.io\" target=\"_blank\" rel=\"external\">Angular</a> 目前為前端兩大流行的框架，兩者的風格迥異。</p>\n<p>React 主打 Single Source of True 和 Flux 的單項資料流，重新以元件的思維角度去設計 WebApp，最後又採用相同思維可以進行開發 iOS, Android native 程式框架 - React Native 讓大家眼睛為之一亮。</p>\n<p>而在Angular目前的情況較為不明朗，相當多的開發者正在使用能穩定運作的 1.x 版本，但是 Angular 2.x 的版本卻面臨了相當大的改版，而且並沒有支援 1.x 的部分。 Angular 最大亮點在雙向資料綁定，簡潔的資料綁定和監控配上快節奏的開發技巧時，產生令人驚豔的開發速度。</p>\n<p>React 跟 Angular 整體的核心思維是相當不同的，React 特色在於簡化的開發邏輯與資料流，單純的單項資料流讓開發流程和除錯都容易了許多，React 的結構設計也讓抽取元件變得直觀與單純，React 傾向於將開發簡化，在設計好架構與資料結構後就減少犯錯的機會。</p>\n<p>但從另一個角度來說，React針對單一的操作，要撰寫的程式碼多出了許多，整個架構也變得龐大。而 Angular 則相反，Angular 在處理資料時相當快速且方便，雙向的資料綁定讓開者並不需要思考太多元件對應的關係，但也因此最終可能會讓整個專案陷入混亂，Angular 在抽取元件時比 React 需要更多的開發技巧，對整體團隊的開發素質要求也相對的更高。</p>\n<h2 id=\"新的選擇_-_Aurelia\">新的選擇 - Aurelia</h2><p>Aurelia 或許可以說介於 React 和 Angular 兩者之間，Aurelia 目前為相當新秀的開發框架，他本身與 Angular 的資料綁定方式相當類似，不僅僅對 Angular 的開發者相當容易上手，安插在 HTML5 中的屬性也更加語意化。</p>\n<p>Aurelia 的核心圍繞在模板上，因此他似乎同時擁有了 React 類似元件的觀念，又同時有 Angular 綁定資料的手法，算是相當多元，除此之外 Aurelia 對 ES6, ES7 擁有更高的支援度。</p>\n<p>當然目前 Aurelia 還在持續開發中，雖然版本尚未穩定，但是已經是個值得注目的前端框架，可以開始試著去執行，了解 Aurelia ，或許在現今 Single Page App 爆炸性成長的階段，Aurelia 能在未來佔有一席之地。</p>\n<p>也許未來 JavaScript 真的能夠做到前後端統一程式碼進行開發，也有可能踏入 hardware 開發領域，這都需要時間來證明，當然也需要各位的投入，就讓我們持續關注這個世代的變化吧。</p>\n","excerpt":"","more":"<blockquote>\n<p>本篇文上是本人Andrew Chen為<a href=\"http://jsdc.tw\">JSDC 2015</a>撰寫<br>感謝<a href=\"https://www.facebook.com/clonncd?fref=ts\">Caeser Chi</a>給予指導</p>\n</blockquote>\n<p><img src=\"http://cdn.xenyomedia.com/sites/default/files/blog/rwd.png\" alt=\"前端框架未來？React, Angular or ..?\"></p>\n<p>前端入坑深似海，一入宅門出不來。這肯定是許多前端工程師可以體認到的共同感觸，前端真可以說是一個坑，維繫大家能夠持續學習的動機，除了熱情，應該就還是熱情吧。</p>\n<h2 id=\"淺談前端框架\">淺談前端框架</h2><p>隨著前端應用變化越來越多，因此許多前端框架不斷的推陳出新，從早期大家所熟知的 <a href=\"http://batmanjs.org\">batman.js</a>, <a href=\"http://backbonejs.org\">backbone.js</a>, <a href=\"http://emberjs.com\">emberjs</a> 在中期也開始出現了許多不同框架，其中到了 Google 踏進 Angular.js 之後前端框架正式熱門起來，也掀起另外一波大戰。</p>\n<p>隨著世代的轉移，JavaScript 漸漸語法轉移到 ES6，語法不同，開始有了不同應用，也因此又出現了令人亮眼的新秀：<a href=\"http://aurelia.io\">Aurelia</a>。</p>\n<p>由於前端框架的世界更新相當迅速，不斷有新的Framwork出現，各家開發者對自己熟悉的框架各執其詞，其實相當難定義何者叫好。</p>\n<h2 id=\"前端框架未來？React,_Angular_?\">前端框架未來？React, Angular ?</h2><p><a href=\"http://facebook.github.io/react/\">React</a> 和 <a href=\"http://aurelia.io\">Angular</a> 目前為前端兩大流行的框架，兩者的風格迥異。</p>\n<p>React 主打 Single Source of True 和 Flux 的單項資料流，重新以元件的思維角度去設計 WebApp，最後又採用相同思維可以進行開發 iOS, Android native 程式框架 - React Native 讓大家眼睛為之一亮。</p>\n<p>而在Angular目前的情況較為不明朗，相當多的開發者正在使用能穩定運作的 1.x 版本，但是 Angular 2.x 的版本卻面臨了相當大的改版，而且並沒有支援 1.x 的部分。 Angular 最大亮點在雙向資料綁定，簡潔的資料綁定和監控配上快節奏的開發技巧時，產生令人驚豔的開發速度。</p>\n<p>React 跟 Angular 整體的核心思維是相當不同的，React 特色在於簡化的開發邏輯與資料流，單純的單項資料流讓開發流程和除錯都容易了許多，React 的結構設計也讓抽取元件變得直觀與單純，React 傾向於將開發簡化，在設計好架構與資料結構後就減少犯錯的機會。</p>\n<p>但從另一個角度來說，React針對單一的操作，要撰寫的程式碼多出了許多，整個架構也變得龐大。而 Angular 則相反，Angular 在處理資料時相當快速且方便，雙向的資料綁定讓開者並不需要思考太多元件對應的關係，但也因此最終可能會讓整個專案陷入混亂，Angular 在抽取元件時比 React 需要更多的開發技巧，對整體團隊的開發素質要求也相對的更高。</p>\n<h2 id=\"新的選擇_-_Aurelia\">新的選擇 - Aurelia</h2><p>Aurelia 或許可以說介於 React 和 Angular 兩者之間，Aurelia 目前為相當新秀的開發框架，他本身與 Angular 的資料綁定方式相當類似，不僅僅對 Angular 的開發者相當容易上手，安插在 HTML5 中的屬性也更加語意化。</p>\n<p>Aurelia 的核心圍繞在模板上，因此他似乎同時擁有了 React 類似元件的觀念，又同時有 Angular 綁定資料的手法，算是相當多元，除此之外 Aurelia 對 ES6, ES7 擁有更高的支援度。</p>\n<p>當然目前 Aurelia 還在持續開發中，雖然版本尚未穩定，但是已經是個值得注目的前端框架，可以開始試著去執行，了解 Aurelia ，或許在現今 Single Page App 爆炸性成長的階段，Aurelia 能在未來佔有一席之地。</p>\n<p>也許未來 JavaScript 真的能夠做到前後端統一程式碼進行開發，也有可能踏入 hardware 開發領域，這都需要時間來證明，當然也需要各位的投入，就讓我們持續關注這個世代的變化吧。</p>\n"},{"title":"JS Devil Day 參與心得","date":"2015-08-02T01:05:42.000Z","comments":0,"_content":"\n> 本篇文上是本人Andrew Chen為[JSDC 2015](http://jsdc.tw)撰寫\n> 感謝[Caeser Chi](https://www.facebook.com/clonncd?fref=ts)給予指導\n\n![JS Devil Day](https://lh3.googleusercontent.com/-mm7RHTIWOAw/VXT1RxK7xrI/AAAAAAAAQK0/LQGMSNo2aNE/s0/post-0-0-83751300-1350904929_large.jpg)\n\nJS Devil Day 是本次 JSDC 2015 所舉辦第一場對外 Meetup，也是首次透過北中南三方連線方式進行，本次以參與者角色，記錄此次活動。\n\nJS Devil Day 當天主要有三個主題：Angular.js、ECMAScript6、講者對談與交流。\n\n## 專家分享\n\n儘管對 Angular.js相當不熟悉，透過講者阿梨的分享讓我對Angular.js的概念有些許的了解，事後座談時講者也推薦初學者直接以Angular.js 2.0作為起手版本。\n\n接著是 Jeremy 對 ES6、webpack 提出了幾個重點，在 ES6 中可以明顯地感受到 JavaScript 已經開始嘗試解決 ES5 一些為人詬病的問題，包括區域變數、類別、模組化等等，同時 ES6 內建了 promise 和 generator ，同時在 ES6 解決了過複雜的 callback function和流程控制，另外 ES6 採用許多 coffeeScript 語法讓結構更為簡潔。\n\n個人認為 ES6 讓 Javascript 成為了更完整的開發語言，也讓 Javascript 減少了許多舊有的小問題，也不必仰賴開發者用奇技淫巧去嘗試解決問題。\n\n現今主流瀏覽器諸如：Chrome、Safari、Firefox 等等，已經逐漸開始支援 ES6，但尚未完全支援。在瀏覽器完全支援 ES6 之前，我們可以透過 babel 在程式執行之前將 ES6 的程式碼轉譯成 ES5，讓瀏覽器完全整的支援 ES6 程式碼。\n\n另外 Jeremy 提到 webpack 和 JSCS ，協助團隊開發更為順暢，開發工具和技巧相當的重要。順暢的開發過程除了提高效率之外，也保護了開發者健康的肝。","source":"_posts/001_JSDevilDay.md","raw":"title: JS Devil day 參與心得\ndate: 2015-08-02 09:05:42\ntags:\n- 社群活動\n- JavaScript\n- ES6\ncategories: 社群活動\ncomments: false\n---\n\n> 本篇文上是本人Andrew Chen為[JSDC 2015](http://jsdc.tw)撰寫\n> 感謝[Caeser Chi](https://www.facebook.com/clonncd?fref=ts)給予指導\n\n![JS Devil Day](https://lh3.googleusercontent.com/-mm7RHTIWOAw/VXT1RxK7xrI/AAAAAAAAQK0/LQGMSNo2aNE/s0/post-0-0-83751300-1350904929_large.jpg)\n\nJS Devil Day 是本次 JSDC 2015 所舉辦第一場對外 Meetup，也是首次透過北中南三方連線方式進行，本次以參與者角色，記錄此次活動。\n\nJS Devil Day 當天主要有三個主題：Angular.js、ECMAScript6、講者對談與交流。\n\n## 專家分享\n\n儘管對 Angular.js相當不熟悉，透過講者阿梨的分享讓我對Angular.js的概念有些許的了解，事後座談時講者也推薦初學者直接以Angular.js 2.0作為起手版本。\n\n接著是 Jeremy 對 ES6、webpack 提出了幾個重點，在 ES6 中可以明顯地感受到 JavaScript 已經開始嘗試解決 ES5 一些為人詬病的問題，包括區域變數、類別、模組化等等，同時 ES6 內建了 promise 和 generator ，同時在 ES6 解決了過複雜的 callback function和流程控制，另外 ES6 採用許多 coffeeScript 語法讓結構更為簡潔。\n\n個人認為 ES6 讓 Javascript 成為了更完整的開發語言，也讓 Javascript 減少了許多舊有的小問題，也不必仰賴開發者用奇技淫巧去嘗試解決問題。\n\n現今主流瀏覽器諸如：Chrome、Safari、Firefox 等等，已經逐漸開始支援 ES6，但尚未完全支援。在瀏覽器完全支援 ES6 之前，我們可以透過 babel 在程式執行之前將 ES6 的程式碼轉譯成 ES5，讓瀏覽器完全整的支援 ES6 程式碼。\n\n另外 Jeremy 提到 webpack 和 JSCS ，協助團隊開發更為順暢，開發工具和技巧相當的重要。順暢的開發過程除了提高效率之外，也保護了開發者健康的肝。","slug":"001_JSDevilDay","published":1,"updated":"2015-08-03T11:42:51.000Z","_id":"ciyk0rqfe001jjcu0v62fbosc","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本篇文上是本人Andrew Chen為<a href=\"http://jsdc.tw\" target=\"_blank\" rel=\"external\">JSDC 2015</a>撰寫<br>感謝<a href=\"https://www.facebook.com/clonncd?fref=ts\" target=\"_blank\" rel=\"external\">Caeser Chi</a>給予指導</p>\n</blockquote>\n<p><img src=\"https://lh3.googleusercontent.com/-mm7RHTIWOAw/VXT1RxK7xrI/AAAAAAAAQK0/LQGMSNo2aNE/s0/post-0-0-83751300-1350904929_large.jpg\" alt=\"JS Devil Day\"></p>\n<p>JS Devil Day 是本次 JSDC 2015 所舉辦第一場對外 Meetup，也是首次透過北中南三方連線方式進行，本次以參與者角色，記錄此次活動。</p>\n<p>JS Devil Day 當天主要有三個主題：Angular.js、ECMAScript6、講者對談與交流。</p>\n<h2 id=\"專家分享\">專家分享</h2><p>儘管對 Angular.js相當不熟悉，透過講者阿梨的分享讓我對Angular.js的概念有些許的了解，事後座談時講者也推薦初學者直接以Angular.js 2.0作為起手版本。</p>\n<p>接著是 Jeremy 對 ES6、webpack 提出了幾個重點，在 ES6 中可以明顯地感受到 JavaScript 已經開始嘗試解決 ES5 一些為人詬病的問題，包括區域變數、類別、模組化等等，同時 ES6 內建了 promise 和 generator ，同時在 ES6 解決了過複雜的 callback function和流程控制，另外 ES6 採用許多 coffeeScript 語法讓結構更為簡潔。</p>\n<p>個人認為 ES6 讓 Javascript 成為了更完整的開發語言，也讓 Javascript 減少了許多舊有的小問題，也不必仰賴開發者用奇技淫巧去嘗試解決問題。</p>\n<p>現今主流瀏覽器諸如：Chrome、Safari、Firefox 等等，已經逐漸開始支援 ES6，但尚未完全支援。在瀏覽器完全支援 ES6 之前，我們可以透過 babel 在程式執行之前將 ES6 的程式碼轉譯成 ES5，讓瀏覽器完全整的支援 ES6 程式碼。</p>\n<p>另外 Jeremy 提到 webpack 和 JSCS ，協助團隊開發更為順暢，開發工具和技巧相當的重要。順暢的開發過程除了提高效率之外，也保護了開發者健康的肝。</p>\n","excerpt":"","more":"<blockquote>\n<p>本篇文上是本人Andrew Chen為<a href=\"http://jsdc.tw\">JSDC 2015</a>撰寫<br>感謝<a href=\"https://www.facebook.com/clonncd?fref=ts\">Caeser Chi</a>給予指導</p>\n</blockquote>\n<p><img src=\"https://lh3.googleusercontent.com/-mm7RHTIWOAw/VXT1RxK7xrI/AAAAAAAAQK0/LQGMSNo2aNE/s0/post-0-0-83751300-1350904929_large.jpg\" alt=\"JS Devil Day\"></p>\n<p>JS Devil Day 是本次 JSDC 2015 所舉辦第一場對外 Meetup，也是首次透過北中南三方連線方式進行，本次以參與者角色，記錄此次活動。</p>\n<p>JS Devil Day 當天主要有三個主題：Angular.js、ECMAScript6、講者對談與交流。</p>\n<h2 id=\"專家分享\">專家分享</h2><p>儘管對 Angular.js相當不熟悉，透過講者阿梨的分享讓我對Angular.js的概念有些許的了解，事後座談時講者也推薦初學者直接以Angular.js 2.0作為起手版本。</p>\n<p>接著是 Jeremy 對 ES6、webpack 提出了幾個重點，在 ES6 中可以明顯地感受到 JavaScript 已經開始嘗試解決 ES5 一些為人詬病的問題，包括區域變數、類別、模組化等等，同時 ES6 內建了 promise 和 generator ，同時在 ES6 解決了過複雜的 callback function和流程控制，另外 ES6 採用許多 coffeeScript 語法讓結構更為簡潔。</p>\n<p>個人認為 ES6 讓 Javascript 成為了更完整的開發語言，也讓 Javascript 減少了許多舊有的小問題，也不必仰賴開發者用奇技淫巧去嘗試解決問題。</p>\n<p>現今主流瀏覽器諸如：Chrome、Safari、Firefox 等等，已經逐漸開始支援 ES6，但尚未完全支援。在瀏覽器完全支援 ES6 之前，我們可以透過 babel 在程式執行之前將 ES6 的程式碼轉譯成 ES5，讓瀏覽器完全整的支援 ES6 程式碼。</p>\n<p>另外 Jeremy 提到 webpack 和 JSCS ，協助團隊開發更為順暢，開發工具和技巧相當的重要。順暢的開發過程除了提高效率之外，也保護了開發者健康的肝。</p>\n"},{"title":"Android App - TTtimer","date":"2015-08-19T07:46:12.000Z","comments":0,"_content":"\n<center>\n![TTtimer](/images/TTtimer/ic_launcher.png)\n</center>\n\n名稱：TTtimer\n類型：Andriod App / Java, 未上架\n時間：2015/1 (大三上學期)\n用途：期末作業\nLicense：MIT\n\n## 簡介\n\nAndroid APP - TTtime 是我在大三上學期修 Amy 老師 Java 課程的期末作品。這隻 APP 大概是我個人最喜歡期末作品之一，包括結構和設計是我個人最喜歡的，當時我有不少的時間與不曉得發揮空間。TTtimer 的設計概念出自於 10,000 小時，意指在某一個專業區域中努力 10,000 小時才能成為該專業領域中的佼佼者。而 TTtimer 即是此類型的計時器，選擇目標的專業項目後，持續累計時間來達成最初設定的目標，並透過累計時間的百分比、累計總數來給予獎勵或是頭銜的稱號。\n\n<center>\n<img src=\"/images/TTtimer/working_finish.png\" alt=\"TTtimer Working\" style=\"width: 200px;\"/>\n</center>\n\n以下為 APP 使用到的技術重點，有需要的同學可以在裡面尋找相關自訓。有機會的話相我想把這個 APP 上架，最為一次學習經驗。\n\n## Source Code 分享\n\nSource Code 放置在 Google Drive 上面，分享給需要範例的同學們。\n\n適用於 Andriod Studio 版本：\n[[Android APP]  TTtimer-for-AS-v1.0](https://drive.google.com/open?id=0B1p_o3Z5VQBeXzlXUlRNWExCUVE)\n\n適用於 Eclipse 版本：\n[[Android APP]  TTtimer-for-eclipse-v1.0](https://drive.google.com/open?id=0B1p_o3Z5VQBeYjM5ZEVQWVpWOWs)\n\n## 技術簡介\n\n#### 物件導向設計\n\nAPP 中，每個 `任務` 都是以一個物件包裝，包括包裝這個 `任務` 本身的資訊、進度、累計時間等等。而累計時間輸出時，可是轉換成百分比的函數，也是包裝在 PlaneToTime 的類別裡面。物件導向設計可參考的是以下主要幾個類別：\n\n* MyTimer\n* MicroTimer\n* Plan\n* PlanToTime\n\nMyTimer 和 MicroTimer 類別主要功能就是計時器，在每個計畫中都會使用到一個計時計，並且有簡化一些時間I/O的機制，主要是根據我當時自己的需求所包裝的。而 Plan 和 PlanToTime 包裝了 `計畫` 和 `有時目標間的計畫`，事實上在最後 APP 實作的時候，並沒有 `無目標時間的計畫`，也就是說類別 Plan 只是單純被 PlanToTime 繼承，作用類似於一個基底類別，其實並沒有實作的功能，這屬於我個人設計錯誤，因為一開始有構想 `無目標時間的計畫`。因此在後面會發現，底層設計的取得獎勵的方式，略有不同，僅僅因為當初規劃時我的想法岔開了。\n\n包裝這四個類別，在我專案開發中後期其為吃香，傳送資料時不太需要考慮資料格式。簡單思考：傳遞一個物件比起傳遞四個不同型別的參數，何者容易？當然是包裝好的一個物件，一次傳遞來得輕鬆方便。另外，包裝物件可以在多人開發時，資料格式的缺漏檢查，或是避免掉不必要的資料傳遞誤會與錯誤。\n\n#### 計時器\n\n計時器只有兩個原則，每秒(或是其他時間)的觸發事件，然後再撰寫自己紀錄的方式。計時器 Andriod 有預設事件，少量的計時器每秒的 tick 相當精準，不要一次開一大堆就好。也別用計時器去處理監聽事件，基本上 Andriod 大部份的物件都有自己的監聽事件，不需要自行去撰寫計時器去檢查。在 TTtimer 中牽涉到的類別如下：\n\n* MainActivity\n* TiemRiver\n* SysSet\n\n之前被問過幾次 Android App 的計時計怎麼處理，計時器的影子可以在 `Mainctivity` 中找到，當初設計是在 APP 一啟動時，背後就有一個碼表在計時，而計時計的參數被我抽取到 `TimeRiver` 和 `SysSet` 的類別中，其實 `TimeRiver` 的類別中的設定參數直接抽取到 `SysSet`，目前的方式是多個任務會共用同一個碼錶，避免每開一起一個新的任務就啟用新的碼表消耗效能。\n\n#### SQLite\n\n如果 SQLite 無法正常啟用，記得注意 Android 本身的版本是否要更新，之前個人在測試時就發生過無法啟動的狀況。情急之下用 txt 自己刻了一套類似功能的 documentation SQL。現在想想挺好笑的，結果期中考過後我發現手機系統要更新，更新好就能使用 SQLite 了，只好默默的砍掉整個手刻的 SQL。\n\n關於 SQLite 我使用在兩個部分：儲存計畫、系統參數。\n\n* PlanSQL\n* SystemSettingSQL\n\n兩者都相當直接的包裝了基本的 Sqlite 的 CRUD (新增/修改/刪除/查詢)，基本上 SQLite 在類別設計完成後，撰寫一次，確認每次 APP 開啟後跟 SQLite 的 IO 正常後，我就再也沒有修改過內部的程式碼。所以理想的話只要努力一次就好，並不需要開發途中不斷地維護那段程式碼。 SQLite 需要注意的重點是測試資料的問題。在開發時頻繁的測試過程中，程式碼除錯時會頻繁地影響到資料庫資料的變動，導致錯誤解決了卻仍然出現問題。主因是資料錯誤，產生 Garbage in garbage out 的結果。建議在開發期間每次 APP 啟動時就初始化一次資料，清空資料庫並且寫入測試用的資料，最終在 APP 發佈時只要將初始化資料的程式碼註解掉即可。\n\n另外需要注意的事情是，程式碼要有解析空資料的能力。意思是多半在測試時，資料庫內已經有測試資料，往往忽略了有可能無資料的情況，反而在拿掉測試資料後才發現 APP 啟動的一瞬間就會因為資料讀取失敗而崩潰。\n\n#### 動態新增控制項\n\n這大概是我被詢問最頻繁的項目了。處理這部分的是以下兩個類別：\n\n* AddBtn\n* ViewList\n\n動態新增控制項的步驟就是：宣告 > 設定 > 掛載。除非是要做 APP 遊戲，不然 Andriod 內建的 ListView 應該能解決大部份的問題，當初我在這塊也是修改了好幾個版本，一開始因為好玩也是手刻 ListView，再建立 Scroll view。不過內建的 ListView 和手刻的邏輯基本上是相同的，先將想要動態新增的物件製作成一份 ListItem 再由 ListView 去重複就對了。\n\n#### Android Lifecycle 生命週期\n\n![Andriod 生命週期 ](http://ext.pimg.tw/style77125tech/1369341764-3430810860.png)\n\n撰寫 Andriod APP 最重要的就是生命週期。簡而言之，生命週期就是我們在手機各種操作時，切換到 APP 畫面時對程式運行的影響，例如執行中的 APP 在按下 Home 鍵後會進入到 `onPause()` 的狀態，不同的狀態不可能讓 APP 一直處於運轉中，因此 APP 作業流程設計會圍繞著 Android Lifecycle 在運轉，也是設計的核心。但記得在 Lifecycle 中，我個人認為最不能仰賴 `onDestroy()`，仰賴關閉 APP 時才去執行，無法預測 APP 是在什麼情況下被關閉的，可能執行緒被中斷、手機沒電等等狀況。重要的資料同步，盡可能不要放在 `onDestroy` 的部分。\n\n#### 雙語系\n\nTTtiemr 支援雙語系，支援 `zh-Tw` 和 `en` 語系，根據手機設定的國籍去做辨識。在手機中抓取字串的方式都需要使用 `android:text=\"@string/show\"` 抓取，之前有聽過反映這樣相當不友善(且不容易辨識)，不過在後期翻譯時相當有趣，單純翻譯 `string` 的設定檔就可完成。如果從一開始就有遵守紀律，將對應的字串寫在設定檔內，在專案末期好好享受輕鬆翻譯 APP 語言的成果吧!\n\n#### 多解析度圖片\n\n在多解析度圖片這部分，我個人處理得相當糟糕，當初在 PC 上測試時雨手機上測試時發現差距極大，因此我大量的改用百分比去做設計。解決問題後我就沒有再去對多種解析度的螢幕下去做設計。\n\n#### Animation 動畫效果\n\n在 `WorkingActivity` 可以大量使用到動畫，Android 的動畫使用大致上是：宣告 > 設定參數 > 啟動。需要注意的是 Animation 的狀態，需要將正確的資料流操作掛載載正確的 Animation 事件上面，避免掉發生動畫時件不同步或是執行順序有問題的情況。Animation 玩起來相當有趣且有成就看，相當推薦大家玩玩。\n\n![screen shot](/images/TTtimer/demo.png)\n\n## 檔案簡介\n\npath: src/main/java/tw/com/oit/andrew/\n\n##### myclass/MyTimer\n\n計時計類別，主要是依照需求包裝了計時器去配合之後的 Andriod time tick。\n\n##### myclass/MicroTimer\n\n繼承了 MyTimer，加入了秒數的欄位，最後這兩個計時器使用的類別會被包在 Plan 和 PlanToTime 中使用。\n\n#### myclass/Plan\n\n包裝了每個計畫項目資訊，屬於 PlanToTime 的父類別，絕大多數重要的功能也是在這裡。\n\n#### myclass/PlanToTime\n\n在計畫項目資訊增加了目標時間，之後的 Activity 中使用的都是這個 class。兩個 Plan 相關的 class 是整個 APP 中 CP 最高的，但也是被反覆修改最多次的，良好的物件設計讓我在整個 APP 開發的後期有了相當不錯的資料控管，我能清楚的掌握資料的傳輸。\n\n#### system/Notify\n\n包裝了所有使用的通知視窗(Dialog)，從外部可以輕鬆的呼叫視窗，僅需要傳入必要的字串需求即可。\n\n#### system/SysSet\n\n系統設定檔。應該與 TimeRiver 合併。\n\n#### system/TimeRiver\n\n系統設定檔。主要是針對計時器的部分，這部分的設定會被記錄在 SQLite 中，確保每次重新啟動時都會是使用者設定的值。\n\n#### tenthousandtimer/MainActivity\n\n主要介面的操作，拿讀取進來的資料動態新增控制項，並且宣告、啟動計時器。\n\n#### tenthousandtimer/MetalsActivity\n\n單純檢視獎牌與頭銜等訊息，可以視為單純的 ListView Demo。\n\n#### tenthousandtimer/MyMenu\n\n針對 Menu 包裝操作，命名並沒有使用 Activity 是用來區別這個是一包裝操作的 class 並非直接掛載在頁面上的。\n\n#### tenthousandtimer/SettingActivity\n\n設定頁面，設邊使用了固定的控制項，然後將設定的資訊寫在上面的 system 類別中，並儲存在 SQLite。\n\n#### tenthousandtimer/WelcomActivity\n\n歡迎界面，在裡面載入 SQLite 的資料，其實這沒有必要，在 MainActivity 中載入即可，單純為了好看。\n\n#### tenthousandtimer/WorkingActivity\n\n在 WorkingActivity 中大量的使用了 Animation，如果在事後才掛上 Animation 容易導致先前設計的資料流多少出現錯誤。仔細研究 Animation 與主程式非同步的關係，就能解決這個問題，並不至於需要 APP 大改寫。\n\n#### tttsql/PlanSQL & tttsql/SystemSettingSQL\n\n包裝了 SQLite 的操作，包含了整批資料的 CRUD，這邊對於 SQLite 的操作相當基本，依據我的印象，資料更新的操作是直接用覆蓋的。基本上也不會出錯，在小量的資料下，效能也沒有問題。PlanSQL 和 SystemSettingSQL 分別包裝了不同的資料而已，基本上觀念完全相同。皆是在載入畫面時會讀取資料。記得注意 Andriod 的版本問題，另外 SQLite 自己也有版本問題，請確保測試資料正確，紀律性的測試可以省去很多麻煩。\n\n#### viewlist/AddBtn & viewlist/ViewList\n\n這兩個類別都包裝了動態新增物件的功能，新增動態物件其實相當麻煩，要考慮物件本身、事件、資料，因此我會盡可能將資訊都封裝在類別內，屆時只需要傳入必要參數即可，如任務有用物件包裝好，那理所當然直接傳遞物件即可。\n\n![screen shot](/images/TTtimer/demo2.png)\n\n## 結語\n\nTTtiemr 亦有存在問題，目前我個人也不知道該如何解決。TTtimer 似乎在重複開啟太多任務後，會導致手機效能降低，吃掉太多CPU或記憶體。但此部分已經超過我對 Andriod APP 的認知，需要更專業的技術。但 TTtimer 所使用的技術，除了連線的需求之外，能滿足絕大部份的 APP 開發。這次的 Andriod APP - TTtimer 分享希望能幫助到大家，如果有任何問題也可以 [Facebook](https://www.facebook.com/profile.php?id=100001317746154) 敲我或是寄信給我詢問細節，但請標明是誰詢問與相關的問題資訊。\n","source":"_posts/003_TTtimerForOIT.md","raw":"title: Android App - TTtimer\ndate: 2015-08-19 15:46:12\ntags:\n- Android\n- Java\n- 作品集\ncategories: 作品集\ncomments: false\n---\n\n<center>\n![TTtimer](/images/TTtimer/ic_launcher.png)\n</center>\n\n名稱：TTtimer\n類型：Andriod App / Java, 未上架\n時間：2015/1 (大三上學期)\n用途：期末作業\nLicense：MIT\n\n## 簡介\n\nAndroid APP - TTtime 是我在大三上學期修 Amy 老師 Java 課程的期末作品。這隻 APP 大概是我個人最喜歡期末作品之一，包括結構和設計是我個人最喜歡的，當時我有不少的時間與不曉得發揮空間。TTtimer 的設計概念出自於 10,000 小時，意指在某一個專業區域中努力 10,000 小時才能成為該專業領域中的佼佼者。而 TTtimer 即是此類型的計時器，選擇目標的專業項目後，持續累計時間來達成最初設定的目標，並透過累計時間的百分比、累計總數來給予獎勵或是頭銜的稱號。\n\n<center>\n<img src=\"/images/TTtimer/working_finish.png\" alt=\"TTtimer Working\" style=\"width: 200px;\"/>\n</center>\n\n以下為 APP 使用到的技術重點，有需要的同學可以在裡面尋找相關自訓。有機會的話相我想把這個 APP 上架，最為一次學習經驗。\n\n## Source Code 分享\n\nSource Code 放置在 Google Drive 上面，分享給需要範例的同學們。\n\n適用於 Andriod Studio 版本：\n[[Android APP]  TTtimer-for-AS-v1.0](https://drive.google.com/open?id=0B1p_o3Z5VQBeXzlXUlRNWExCUVE)\n\n適用於 Eclipse 版本：\n[[Android APP]  TTtimer-for-eclipse-v1.0](https://drive.google.com/open?id=0B1p_o3Z5VQBeYjM5ZEVQWVpWOWs)\n\n## 技術簡介\n\n#### 物件導向設計\n\nAPP 中，每個 `任務` 都是以一個物件包裝，包括包裝這個 `任務` 本身的資訊、進度、累計時間等等。而累計時間輸出時，可是轉換成百分比的函數，也是包裝在 PlaneToTime 的類別裡面。物件導向設計可參考的是以下主要幾個類別：\n\n* MyTimer\n* MicroTimer\n* Plan\n* PlanToTime\n\nMyTimer 和 MicroTimer 類別主要功能就是計時器，在每個計畫中都會使用到一個計時計，並且有簡化一些時間I/O的機制，主要是根據我當時自己的需求所包裝的。而 Plan 和 PlanToTime 包裝了 `計畫` 和 `有時目標間的計畫`，事實上在最後 APP 實作的時候，並沒有 `無目標時間的計畫`，也就是說類別 Plan 只是單純被 PlanToTime 繼承，作用類似於一個基底類別，其實並沒有實作的功能，這屬於我個人設計錯誤，因為一開始有構想 `無目標時間的計畫`。因此在後面會發現，底層設計的取得獎勵的方式，略有不同，僅僅因為當初規劃時我的想法岔開了。\n\n包裝這四個類別，在我專案開發中後期其為吃香，傳送資料時不太需要考慮資料格式。簡單思考：傳遞一個物件比起傳遞四個不同型別的參數，何者容易？當然是包裝好的一個物件，一次傳遞來得輕鬆方便。另外，包裝物件可以在多人開發時，資料格式的缺漏檢查，或是避免掉不必要的資料傳遞誤會與錯誤。\n\n#### 計時器\n\n計時器只有兩個原則，每秒(或是其他時間)的觸發事件，然後再撰寫自己紀錄的方式。計時器 Andriod 有預設事件，少量的計時器每秒的 tick 相當精準，不要一次開一大堆就好。也別用計時器去處理監聽事件，基本上 Andriod 大部份的物件都有自己的監聽事件，不需要自行去撰寫計時器去檢查。在 TTtimer 中牽涉到的類別如下：\n\n* MainActivity\n* TiemRiver\n* SysSet\n\n之前被問過幾次 Android App 的計時計怎麼處理，計時器的影子可以在 `Mainctivity` 中找到，當初設計是在 APP 一啟動時，背後就有一個碼表在計時，而計時計的參數被我抽取到 `TimeRiver` 和 `SysSet` 的類別中，其實 `TimeRiver` 的類別中的設定參數直接抽取到 `SysSet`，目前的方式是多個任務會共用同一個碼錶，避免每開一起一個新的任務就啟用新的碼表消耗效能。\n\n#### SQLite\n\n如果 SQLite 無法正常啟用，記得注意 Android 本身的版本是否要更新，之前個人在測試時就發生過無法啟動的狀況。情急之下用 txt 自己刻了一套類似功能的 documentation SQL。現在想想挺好笑的，結果期中考過後我發現手機系統要更新，更新好就能使用 SQLite 了，只好默默的砍掉整個手刻的 SQL。\n\n關於 SQLite 我使用在兩個部分：儲存計畫、系統參數。\n\n* PlanSQL\n* SystemSettingSQL\n\n兩者都相當直接的包裝了基本的 Sqlite 的 CRUD (新增/修改/刪除/查詢)，基本上 SQLite 在類別設計完成後，撰寫一次，確認每次 APP 開啟後跟 SQLite 的 IO 正常後，我就再也沒有修改過內部的程式碼。所以理想的話只要努力一次就好，並不需要開發途中不斷地維護那段程式碼。 SQLite 需要注意的重點是測試資料的問題。在開發時頻繁的測試過程中，程式碼除錯時會頻繁地影響到資料庫資料的變動，導致錯誤解決了卻仍然出現問題。主因是資料錯誤，產生 Garbage in garbage out 的結果。建議在開發期間每次 APP 啟動時就初始化一次資料，清空資料庫並且寫入測試用的資料，最終在 APP 發佈時只要將初始化資料的程式碼註解掉即可。\n\n另外需要注意的事情是，程式碼要有解析空資料的能力。意思是多半在測試時，資料庫內已經有測試資料，往往忽略了有可能無資料的情況，反而在拿掉測試資料後才發現 APP 啟動的一瞬間就會因為資料讀取失敗而崩潰。\n\n#### 動態新增控制項\n\n這大概是我被詢問最頻繁的項目了。處理這部分的是以下兩個類別：\n\n* AddBtn\n* ViewList\n\n動態新增控制項的步驟就是：宣告 > 設定 > 掛載。除非是要做 APP 遊戲，不然 Andriod 內建的 ListView 應該能解決大部份的問題，當初我在這塊也是修改了好幾個版本，一開始因為好玩也是手刻 ListView，再建立 Scroll view。不過內建的 ListView 和手刻的邏輯基本上是相同的，先將想要動態新增的物件製作成一份 ListItem 再由 ListView 去重複就對了。\n\n#### Android Lifecycle 生命週期\n\n![Andriod 生命週期 ](http://ext.pimg.tw/style77125tech/1369341764-3430810860.png)\n\n撰寫 Andriod APP 最重要的就是生命週期。簡而言之，生命週期就是我們在手機各種操作時，切換到 APP 畫面時對程式運行的影響，例如執行中的 APP 在按下 Home 鍵後會進入到 `onPause()` 的狀態，不同的狀態不可能讓 APP 一直處於運轉中，因此 APP 作業流程設計會圍繞著 Android Lifecycle 在運轉，也是設計的核心。但記得在 Lifecycle 中，我個人認為最不能仰賴 `onDestroy()`，仰賴關閉 APP 時才去執行，無法預測 APP 是在什麼情況下被關閉的，可能執行緒被中斷、手機沒電等等狀況。重要的資料同步，盡可能不要放在 `onDestroy` 的部分。\n\n#### 雙語系\n\nTTtiemr 支援雙語系，支援 `zh-Tw` 和 `en` 語系，根據手機設定的國籍去做辨識。在手機中抓取字串的方式都需要使用 `android:text=\"@string/show\"` 抓取，之前有聽過反映這樣相當不友善(且不容易辨識)，不過在後期翻譯時相當有趣，單純翻譯 `string` 的設定檔就可完成。如果從一開始就有遵守紀律，將對應的字串寫在設定檔內，在專案末期好好享受輕鬆翻譯 APP 語言的成果吧!\n\n#### 多解析度圖片\n\n在多解析度圖片這部分，我個人處理得相當糟糕，當初在 PC 上測試時雨手機上測試時發現差距極大，因此我大量的改用百分比去做設計。解決問題後我就沒有再去對多種解析度的螢幕下去做設計。\n\n#### Animation 動畫效果\n\n在 `WorkingActivity` 可以大量使用到動畫，Android 的動畫使用大致上是：宣告 > 設定參數 > 啟動。需要注意的是 Animation 的狀態，需要將正確的資料流操作掛載載正確的 Animation 事件上面，避免掉發生動畫時件不同步或是執行順序有問題的情況。Animation 玩起來相當有趣且有成就看，相當推薦大家玩玩。\n\n![screen shot](/images/TTtimer/demo.png)\n\n## 檔案簡介\n\npath: src/main/java/tw/com/oit/andrew/\n\n##### myclass/MyTimer\n\n計時計類別，主要是依照需求包裝了計時器去配合之後的 Andriod time tick。\n\n##### myclass/MicroTimer\n\n繼承了 MyTimer，加入了秒數的欄位，最後這兩個計時器使用的類別會被包在 Plan 和 PlanToTime 中使用。\n\n#### myclass/Plan\n\n包裝了每個計畫項目資訊，屬於 PlanToTime 的父類別，絕大多數重要的功能也是在這裡。\n\n#### myclass/PlanToTime\n\n在計畫項目資訊增加了目標時間，之後的 Activity 中使用的都是這個 class。兩個 Plan 相關的 class 是整個 APP 中 CP 最高的，但也是被反覆修改最多次的，良好的物件設計讓我在整個 APP 開發的後期有了相當不錯的資料控管，我能清楚的掌握資料的傳輸。\n\n#### system/Notify\n\n包裝了所有使用的通知視窗(Dialog)，從外部可以輕鬆的呼叫視窗，僅需要傳入必要的字串需求即可。\n\n#### system/SysSet\n\n系統設定檔。應該與 TimeRiver 合併。\n\n#### system/TimeRiver\n\n系統設定檔。主要是針對計時器的部分，這部分的設定會被記錄在 SQLite 中，確保每次重新啟動時都會是使用者設定的值。\n\n#### tenthousandtimer/MainActivity\n\n主要介面的操作，拿讀取進來的資料動態新增控制項，並且宣告、啟動計時器。\n\n#### tenthousandtimer/MetalsActivity\n\n單純檢視獎牌與頭銜等訊息，可以視為單純的 ListView Demo。\n\n#### tenthousandtimer/MyMenu\n\n針對 Menu 包裝操作，命名並沒有使用 Activity 是用來區別這個是一包裝操作的 class 並非直接掛載在頁面上的。\n\n#### tenthousandtimer/SettingActivity\n\n設定頁面，設邊使用了固定的控制項，然後將設定的資訊寫在上面的 system 類別中，並儲存在 SQLite。\n\n#### tenthousandtimer/WelcomActivity\n\n歡迎界面，在裡面載入 SQLite 的資料，其實這沒有必要，在 MainActivity 中載入即可，單純為了好看。\n\n#### tenthousandtimer/WorkingActivity\n\n在 WorkingActivity 中大量的使用了 Animation，如果在事後才掛上 Animation 容易導致先前設計的資料流多少出現錯誤。仔細研究 Animation 與主程式非同步的關係，就能解決這個問題，並不至於需要 APP 大改寫。\n\n#### tttsql/PlanSQL & tttsql/SystemSettingSQL\n\n包裝了 SQLite 的操作，包含了整批資料的 CRUD，這邊對於 SQLite 的操作相當基本，依據我的印象，資料更新的操作是直接用覆蓋的。基本上也不會出錯，在小量的資料下，效能也沒有問題。PlanSQL 和 SystemSettingSQL 分別包裝了不同的資料而已，基本上觀念完全相同。皆是在載入畫面時會讀取資料。記得注意 Andriod 的版本問題，另外 SQLite 自己也有版本問題，請確保測試資料正確，紀律性的測試可以省去很多麻煩。\n\n#### viewlist/AddBtn & viewlist/ViewList\n\n這兩個類別都包裝了動態新增物件的功能，新增動態物件其實相當麻煩，要考慮物件本身、事件、資料，因此我會盡可能將資訊都封裝在類別內，屆時只需要傳入必要參數即可，如任務有用物件包裝好，那理所當然直接傳遞物件即可。\n\n![screen shot](/images/TTtimer/demo2.png)\n\n## 結語\n\nTTtiemr 亦有存在問題，目前我個人也不知道該如何解決。TTtimer 似乎在重複開啟太多任務後，會導致手機效能降低，吃掉太多CPU或記憶體。但此部分已經超過我對 Andriod APP 的認知，需要更專業的技術。但 TTtimer 所使用的技術，除了連線的需求之外，能滿足絕大部份的 APP 開發。這次的 Andriod APP - TTtimer 分享希望能幫助到大家，如果有任何問題也可以 [Facebook](https://www.facebook.com/profile.php?id=100001317746154) 敲我或是寄信給我詢問細節，但請標明是誰詢問與相關的問題資訊。\n","slug":"003_TTtimerForOIT","published":1,"updated":"2017-01-31T01:27:23.000Z","_id":"ciyku844f0000juu0z5idvo8c","layout":"post","photos":[],"link":"","content":"<center><br><img src=\"/images/TTtimer/ic_launcher.png\" alt=\"TTtimer\"><br></center>\n\n<p>名稱：TTtimer<br>類型：Andriod App / Java, 未上架<br>時間：2015/1 (大三上學期)<br>用途：期末作業<br>License：MIT</p>\n<h2 id=\"簡介\">簡介</h2><p>Android APP - TTtime 是我在大三上學期修 Amy 老師 Java 課程的期末作品。這隻 APP 大概是我個人最喜歡期末作品之一，包括結構和設計是我個人最喜歡的，當時我有不少的時間與不曉得發揮空間。TTtimer 的設計概念出自於 10,000 小時，意指在某一個專業區域中努力 10,000 小時才能成為該專業領域中的佼佼者。而 TTtimer 即是此類型的計時器，選擇目標的專業項目後，持續累計時間來達成最初設定的目標，並透過累計時間的百分比、累計總數來給予獎勵或是頭銜的稱號。</p>\n<center><br><img src=\"/images/TTtimer/working_finish.png\" alt=\"TTtimer Working\" style=\"width: 200px;\"><br></center>\n\n<p>以下為 APP 使用到的技術重點，有需要的同學可以在裡面尋找相關自訓。有機會的話相我想把這個 APP 上架，最為一次學習經驗。</p>\n<h2 id=\"Source_Code_分享\">Source Code 分享</h2><p>Source Code 放置在 Google Drive 上面，分享給需要範例的同學們。</p>\n<p>適用於 Andriod Studio 版本：<br><a href=\"https://drive.google.com/open?id=0B1p_o3Z5VQBeXzlXUlRNWExCUVE\" target=\"_blank\" rel=\"external\">[Android APP]  TTtimer-for-AS-v1.0</a></p>\n<p>適用於 Eclipse 版本：<br><a href=\"https://drive.google.com/open?id=0B1p_o3Z5VQBeYjM5ZEVQWVpWOWs\" target=\"_blank\" rel=\"external\">[Android APP]  TTtimer-for-eclipse-v1.0</a></p>\n<h2 id=\"技術簡介\">技術簡介</h2><h4 id=\"物件導向設計\">物件導向設計</h4><p>APP 中，每個 <code>任務</code> 都是以一個物件包裝，包括包裝這個 <code>任務</code> 本身的資訊、進度、累計時間等等。而累計時間輸出時，可是轉換成百分比的函數，也是包裝在 PlaneToTime 的類別裡面。物件導向設計可參考的是以下主要幾個類別：</p>\n<ul>\n<li>MyTimer</li>\n<li>MicroTimer</li>\n<li>Plan</li>\n<li>PlanToTime</li>\n</ul>\n<p>MyTimer 和 MicroTimer 類別主要功能就是計時器，在每個計畫中都會使用到一個計時計，並且有簡化一些時間I/O的機制，主要是根據我當時自己的需求所包裝的。而 Plan 和 PlanToTime 包裝了 <code>計畫</code> 和 <code>有時目標間的計畫</code>，事實上在最後 APP 實作的時候，並沒有 <code>無目標時間的計畫</code>，也就是說類別 Plan 只是單純被 PlanToTime 繼承，作用類似於一個基底類別，其實並沒有實作的功能，這屬於我個人設計錯誤，因為一開始有構想 <code>無目標時間的計畫</code>。因此在後面會發現，底層設計的取得獎勵的方式，略有不同，僅僅因為當初規劃時我的想法岔開了。</p>\n<p>包裝這四個類別，在我專案開發中後期其為吃香，傳送資料時不太需要考慮資料格式。簡單思考：傳遞一個物件比起傳遞四個不同型別的參數，何者容易？當然是包裝好的一個物件，一次傳遞來得輕鬆方便。另外，包裝物件可以在多人開發時，資料格式的缺漏檢查，或是避免掉不必要的資料傳遞誤會與錯誤。</p>\n<h4 id=\"計時器\">計時器</h4><p>計時器只有兩個原則，每秒(或是其他時間)的觸發事件，然後再撰寫自己紀錄的方式。計時器 Andriod 有預設事件，少量的計時器每秒的 tick 相當精準，不要一次開一大堆就好。也別用計時器去處理監聽事件，基本上 Andriod 大部份的物件都有自己的監聽事件，不需要自行去撰寫計時器去檢查。在 TTtimer 中牽涉到的類別如下：</p>\n<ul>\n<li>MainActivity</li>\n<li>TiemRiver</li>\n<li>SysSet</li>\n</ul>\n<p>之前被問過幾次 Android App 的計時計怎麼處理，計時器的影子可以在 <code>Mainctivity</code> 中找到，當初設計是在 APP 一啟動時，背後就有一個碼表在計時，而計時計的參數被我抽取到 <code>TimeRiver</code> 和 <code>SysSet</code> 的類別中，其實 <code>TimeRiver</code> 的類別中的設定參數直接抽取到 <code>SysSet</code>，目前的方式是多個任務會共用同一個碼錶，避免每開一起一個新的任務就啟用新的碼表消耗效能。</p>\n<h4 id=\"SQLite\">SQLite</h4><p>如果 SQLite 無法正常啟用，記得注意 Android 本身的版本是否要更新，之前個人在測試時就發生過無法啟動的狀況。情急之下用 txt 自己刻了一套類似功能的 documentation SQL。現在想想挺好笑的，結果期中考過後我發現手機系統要更新，更新好就能使用 SQLite 了，只好默默的砍掉整個手刻的 SQL。</p>\n<p>關於 SQLite 我使用在兩個部分：儲存計畫、系統參數。</p>\n<ul>\n<li>PlanSQL</li>\n<li>SystemSettingSQL</li>\n</ul>\n<p>兩者都相當直接的包裝了基本的 Sqlite 的 CRUD (新增/修改/刪除/查詢)，基本上 SQLite 在類別設計完成後，撰寫一次，確認每次 APP 開啟後跟 SQLite 的 IO 正常後，我就再也沒有修改過內部的程式碼。所以理想的話只要努力一次就好，並不需要開發途中不斷地維護那段程式碼。 SQLite 需要注意的重點是測試資料的問題。在開發時頻繁的測試過程中，程式碼除錯時會頻繁地影響到資料庫資料的變動，導致錯誤解決了卻仍然出現問題。主因是資料錯誤，產生 Garbage in garbage out 的結果。建議在開發期間每次 APP 啟動時就初始化一次資料，清空資料庫並且寫入測試用的資料，最終在 APP 發佈時只要將初始化資料的程式碼註解掉即可。</p>\n<p>另外需要注意的事情是，程式碼要有解析空資料的能力。意思是多半在測試時，資料庫內已經有測試資料，往往忽略了有可能無資料的情況，反而在拿掉測試資料後才發現 APP 啟動的一瞬間就會因為資料讀取失敗而崩潰。</p>\n<h4 id=\"動態新增控制項\">動態新增控制項</h4><p>這大概是我被詢問最頻繁的項目了。處理這部分的是以下兩個類別：</p>\n<ul>\n<li>AddBtn</li>\n<li>ViewList</li>\n</ul>\n<p>動態新增控制項的步驟就是：宣告 &gt; 設定 &gt; 掛載。除非是要做 APP 遊戲，不然 Andriod 內建的 ListView 應該能解決大部份的問題，當初我在這塊也是修改了好幾個版本，一開始因為好玩也是手刻 ListView，再建立 Scroll view。不過內建的 ListView 和手刻的邏輯基本上是相同的，先將想要動態新增的物件製作成一份 ListItem 再由 ListView 去重複就對了。</p>\n<h4 id=\"Android_Lifecycle_生命週期\">Android Lifecycle 生命週期</h4><p><img src=\"http://ext.pimg.tw/style77125tech/1369341764-3430810860.png\" alt=\"Andriod 生命週期 \"></p>\n<p>撰寫 Andriod APP 最重要的就是生命週期。簡而言之，生命週期就是我們在手機各種操作時，切換到 APP 畫面時對程式運行的影響，例如執行中的 APP 在按下 Home 鍵後會進入到 <code>onPause()</code> 的狀態，不同的狀態不可能讓 APP 一直處於運轉中，因此 APP 作業流程設計會圍繞著 Android Lifecycle 在運轉，也是設計的核心。但記得在 Lifecycle 中，我個人認為最不能仰賴 <code>onDestroy()</code>，仰賴關閉 APP 時才去執行，無法預測 APP 是在什麼情況下被關閉的，可能執行緒被中斷、手機沒電等等狀況。重要的資料同步，盡可能不要放在 <code>onDestroy</code> 的部分。</p>\n<h4 id=\"雙語系\">雙語系</h4><p>TTtiemr 支援雙語系，支援 <code>zh-Tw</code> 和 <code>en</code> 語系，根據手機設定的國籍去做辨識。在手機中抓取字串的方式都需要使用 <code>android:text=&quot;@string/show&quot;</code> 抓取，之前有聽過反映這樣相當不友善(且不容易辨識)，不過在後期翻譯時相當有趣，單純翻譯 <code>string</code> 的設定檔就可完成。如果從一開始就有遵守紀律，將對應的字串寫在設定檔內，在專案末期好好享受輕鬆翻譯 APP 語言的成果吧!</p>\n<h4 id=\"多解析度圖片\">多解析度圖片</h4><p>在多解析度圖片這部分，我個人處理得相當糟糕，當初在 PC 上測試時雨手機上測試時發現差距極大，因此我大量的改用百分比去做設計。解決問題後我就沒有再去對多種解析度的螢幕下去做設計。</p>\n<h4 id=\"Animation_動畫效果\">Animation 動畫效果</h4><p>在 <code>WorkingActivity</code> 可以大量使用到動畫，Android 的動畫使用大致上是：宣告 &gt; 設定參數 &gt; 啟動。需要注意的是 Animation 的狀態，需要將正確的資料流操作掛載載正確的 Animation 事件上面，避免掉發生動畫時件不同步或是執行順序有問題的情況。Animation 玩起來相當有趣且有成就看，相當推薦大家玩玩。</p>\n<p><img src=\"/images/TTtimer/demo.png\" alt=\"screen shot\"></p>\n<h2 id=\"檔案簡介\">檔案簡介</h2><p>path: src/main/java/tw/com/oit/andrew/</p>\n<h5 id=\"myclass/MyTimer\">myclass/MyTimer</h5><p>計時計類別，主要是依照需求包裝了計時器去配合之後的 Andriod time tick。</p>\n<h5 id=\"myclass/MicroTimer\">myclass/MicroTimer</h5><p>繼承了 MyTimer，加入了秒數的欄位，最後這兩個計時器使用的類別會被包在 Plan 和 PlanToTime 中使用。</p>\n<h4 id=\"myclass/Plan\">myclass/Plan</h4><p>包裝了每個計畫項目資訊，屬於 PlanToTime 的父類別，絕大多數重要的功能也是在這裡。</p>\n<h4 id=\"myclass/PlanToTime\">myclass/PlanToTime</h4><p>在計畫項目資訊增加了目標時間，之後的 Activity 中使用的都是這個 class。兩個 Plan 相關的 class 是整個 APP 中 CP 最高的，但也是被反覆修改最多次的，良好的物件設計讓我在整個 APP 開發的後期有了相當不錯的資料控管，我能清楚的掌握資料的傳輸。</p>\n<h4 id=\"system/Notify\">system/Notify</h4><p>包裝了所有使用的通知視窗(Dialog)，從外部可以輕鬆的呼叫視窗，僅需要傳入必要的字串需求即可。</p>\n<h4 id=\"system/SysSet\">system/SysSet</h4><p>系統設定檔。應該與 TimeRiver 合併。</p>\n<h4 id=\"system/TimeRiver\">system/TimeRiver</h4><p>系統設定檔。主要是針對計時器的部分，這部分的設定會被記錄在 SQLite 中，確保每次重新啟動時都會是使用者設定的值。</p>\n<h4 id=\"tenthousandtimer/MainActivity\">tenthousandtimer/MainActivity</h4><p>主要介面的操作，拿讀取進來的資料動態新增控制項，並且宣告、啟動計時器。</p>\n<h4 id=\"tenthousandtimer/MetalsActivity\">tenthousandtimer/MetalsActivity</h4><p>單純檢視獎牌與頭銜等訊息，可以視為單純的 ListView Demo。</p>\n<h4 id=\"tenthousandtimer/MyMenu\">tenthousandtimer/MyMenu</h4><p>針對 Menu 包裝操作，命名並沒有使用 Activity 是用來區別這個是一包裝操作的 class 並非直接掛載在頁面上的。</p>\n<h4 id=\"tenthousandtimer/SettingActivity\">tenthousandtimer/SettingActivity</h4><p>設定頁面，設邊使用了固定的控制項，然後將設定的資訊寫在上面的 system 類別中，並儲存在 SQLite。</p>\n<h4 id=\"tenthousandtimer/WelcomActivity\">tenthousandtimer/WelcomActivity</h4><p>歡迎界面，在裡面載入 SQLite 的資料，其實這沒有必要，在 MainActivity 中載入即可，單純為了好看。</p>\n<h4 id=\"tenthousandtimer/WorkingActivity\">tenthousandtimer/WorkingActivity</h4><p>在 WorkingActivity 中大量的使用了 Animation，如果在事後才掛上 Animation 容易導致先前設計的資料流多少出現錯誤。仔細研究 Animation 與主程式非同步的關係，就能解決這個問題，並不至於需要 APP 大改寫。</p>\n<h4 id=\"tttsql/PlanSQL_&amp;_tttsql/SystemSettingSQL\">tttsql/PlanSQL &amp; tttsql/SystemSettingSQL</h4><p>包裝了 SQLite 的操作，包含了整批資料的 CRUD，這邊對於 SQLite 的操作相當基本，依據我的印象，資料更新的操作是直接用覆蓋的。基本上也不會出錯，在小量的資料下，效能也沒有問題。PlanSQL 和 SystemSettingSQL 分別包裝了不同的資料而已，基本上觀念完全相同。皆是在載入畫面時會讀取資料。記得注意 Andriod 的版本問題，另外 SQLite 自己也有版本問題，請確保測試資料正確，紀律性的測試可以省去很多麻煩。</p>\n<h4 id=\"viewlist/AddBtn_&amp;_viewlist/ViewList\">viewlist/AddBtn &amp; viewlist/ViewList</h4><p>這兩個類別都包裝了動態新增物件的功能，新增動態物件其實相當麻煩，要考慮物件本身、事件、資料，因此我會盡可能將資訊都封裝在類別內，屆時只需要傳入必要參數即可，如任務有用物件包裝好，那理所當然直接傳遞物件即可。</p>\n<p><img src=\"/images/TTtimer/demo2.png\" alt=\"screen shot\"></p>\n<h2 id=\"結語\">結語</h2><p>TTtiemr 亦有存在問題，目前我個人也不知道該如何解決。TTtimer 似乎在重複開啟太多任務後，會導致手機效能降低，吃掉太多CPU或記憶體。但此部分已經超過我對 Andriod APP 的認知，需要更專業的技術。但 TTtimer 所使用的技術，除了連線的需求之外，能滿足絕大部份的 APP 開發。這次的 Andriod APP - TTtimer 分享希望能幫助到大家，如果有任何問題也可以 <a href=\"https://www.facebook.com/profile.php?id=100001317746154\" target=\"_blank\" rel=\"external\">Facebook</a> 敲我或是寄信給我詢問細節，但請標明是誰詢問與相關的問題資訊。</p>\n","excerpt":"","more":"<center><br><img src=\"/images/TTtimer/ic_launcher.png\" alt=\"TTtimer\"><br></center>\n\n<p>名稱：TTtimer<br>類型：Andriod App / Java, 未上架<br>時間：2015/1 (大三上學期)<br>用途：期末作業<br>License：MIT</p>\n<h2 id=\"簡介\">簡介</h2><p>Android APP - TTtime 是我在大三上學期修 Amy 老師 Java 課程的期末作品。這隻 APP 大概是我個人最喜歡期末作品之一，包括結構和設計是我個人最喜歡的，當時我有不少的時間與不曉得發揮空間。TTtimer 的設計概念出自於 10,000 小時，意指在某一個專業區域中努力 10,000 小時才能成為該專業領域中的佼佼者。而 TTtimer 即是此類型的計時器，選擇目標的專業項目後，持續累計時間來達成最初設定的目標，並透過累計時間的百分比、累計總數來給予獎勵或是頭銜的稱號。</p>\n<center><br><img src=\"/images/TTtimer/working_finish.png\" alt=\"TTtimer Working\" style=\"width: 200px;\"/><br></center>\n\n<p>以下為 APP 使用到的技術重點，有需要的同學可以在裡面尋找相關自訓。有機會的話相我想把這個 APP 上架，最為一次學習經驗。</p>\n<h2 id=\"Source_Code_分享\">Source Code 分享</h2><p>Source Code 放置在 Google Drive 上面，分享給需要範例的同學們。</p>\n<p>適用於 Andriod Studio 版本：<br><a href=\"https://drive.google.com/open?id=0B1p_o3Z5VQBeXzlXUlRNWExCUVE\">[Android APP]  TTtimer-for-AS-v1.0</a></p>\n<p>適用於 Eclipse 版本：<br><a href=\"https://drive.google.com/open?id=0B1p_o3Z5VQBeYjM5ZEVQWVpWOWs\">[Android APP]  TTtimer-for-eclipse-v1.0</a></p>\n<h2 id=\"技術簡介\">技術簡介</h2><h4 id=\"物件導向設計\">物件導向設計</h4><p>APP 中，每個 <code>任務</code> 都是以一個物件包裝，包括包裝這個 <code>任務</code> 本身的資訊、進度、累計時間等等。而累計時間輸出時，可是轉換成百分比的函數，也是包裝在 PlaneToTime 的類別裡面。物件導向設計可參考的是以下主要幾個類別：</p>\n<ul>\n<li>MyTimer</li>\n<li>MicroTimer</li>\n<li>Plan</li>\n<li>PlanToTime</li>\n</ul>\n<p>MyTimer 和 MicroTimer 類別主要功能就是計時器，在每個計畫中都會使用到一個計時計，並且有簡化一些時間I/O的機制，主要是根據我當時自己的需求所包裝的。而 Plan 和 PlanToTime 包裝了 <code>計畫</code> 和 <code>有時目標間的計畫</code>，事實上在最後 APP 實作的時候，並沒有 <code>無目標時間的計畫</code>，也就是說類別 Plan 只是單純被 PlanToTime 繼承，作用類似於一個基底類別，其實並沒有實作的功能，這屬於我個人設計錯誤，因為一開始有構想 <code>無目標時間的計畫</code>。因此在後面會發現，底層設計的取得獎勵的方式，略有不同，僅僅因為當初規劃時我的想法岔開了。</p>\n<p>包裝這四個類別，在我專案開發中後期其為吃香，傳送資料時不太需要考慮資料格式。簡單思考：傳遞一個物件比起傳遞四個不同型別的參數，何者容易？當然是包裝好的一個物件，一次傳遞來得輕鬆方便。另外，包裝物件可以在多人開發時，資料格式的缺漏檢查，或是避免掉不必要的資料傳遞誤會與錯誤。</p>\n<h4 id=\"計時器\">計時器</h4><p>計時器只有兩個原則，每秒(或是其他時間)的觸發事件，然後再撰寫自己紀錄的方式。計時器 Andriod 有預設事件，少量的計時器每秒的 tick 相當精準，不要一次開一大堆就好。也別用計時器去處理監聽事件，基本上 Andriod 大部份的物件都有自己的監聽事件，不需要自行去撰寫計時器去檢查。在 TTtimer 中牽涉到的類別如下：</p>\n<ul>\n<li>MainActivity</li>\n<li>TiemRiver</li>\n<li>SysSet</li>\n</ul>\n<p>之前被問過幾次 Android App 的計時計怎麼處理，計時器的影子可以在 <code>Mainctivity</code> 中找到，當初設計是在 APP 一啟動時，背後就有一個碼表在計時，而計時計的參數被我抽取到 <code>TimeRiver</code> 和 <code>SysSet</code> 的類別中，其實 <code>TimeRiver</code> 的類別中的設定參數直接抽取到 <code>SysSet</code>，目前的方式是多個任務會共用同一個碼錶，避免每開一起一個新的任務就啟用新的碼表消耗效能。</p>\n<h4 id=\"SQLite\">SQLite</h4><p>如果 SQLite 無法正常啟用，記得注意 Android 本身的版本是否要更新，之前個人在測試時就發生過無法啟動的狀況。情急之下用 txt 自己刻了一套類似功能的 documentation SQL。現在想想挺好笑的，結果期中考過後我發現手機系統要更新，更新好就能使用 SQLite 了，只好默默的砍掉整個手刻的 SQL。</p>\n<p>關於 SQLite 我使用在兩個部分：儲存計畫、系統參數。</p>\n<ul>\n<li>PlanSQL</li>\n<li>SystemSettingSQL</li>\n</ul>\n<p>兩者都相當直接的包裝了基本的 Sqlite 的 CRUD (新增/修改/刪除/查詢)，基本上 SQLite 在類別設計完成後，撰寫一次，確認每次 APP 開啟後跟 SQLite 的 IO 正常後，我就再也沒有修改過內部的程式碼。所以理想的話只要努力一次就好，並不需要開發途中不斷地維護那段程式碼。 SQLite 需要注意的重點是測試資料的問題。在開發時頻繁的測試過程中，程式碼除錯時會頻繁地影響到資料庫資料的變動，導致錯誤解決了卻仍然出現問題。主因是資料錯誤，產生 Garbage in garbage out 的結果。建議在開發期間每次 APP 啟動時就初始化一次資料，清空資料庫並且寫入測試用的資料，最終在 APP 發佈時只要將初始化資料的程式碼註解掉即可。</p>\n<p>另外需要注意的事情是，程式碼要有解析空資料的能力。意思是多半在測試時，資料庫內已經有測試資料，往往忽略了有可能無資料的情況，反而在拿掉測試資料後才發現 APP 啟動的一瞬間就會因為資料讀取失敗而崩潰。</p>\n<h4 id=\"動態新增控制項\">動態新增控制項</h4><p>這大概是我被詢問最頻繁的項目了。處理這部分的是以下兩個類別：</p>\n<ul>\n<li>AddBtn</li>\n<li>ViewList</li>\n</ul>\n<p>動態新增控制項的步驟就是：宣告 &gt; 設定 &gt; 掛載。除非是要做 APP 遊戲，不然 Andriod 內建的 ListView 應該能解決大部份的問題，當初我在這塊也是修改了好幾個版本，一開始因為好玩也是手刻 ListView，再建立 Scroll view。不過內建的 ListView 和手刻的邏輯基本上是相同的，先將想要動態新增的物件製作成一份 ListItem 再由 ListView 去重複就對了。</p>\n<h4 id=\"Android_Lifecycle_生命週期\">Android Lifecycle 生命週期</h4><p><img src=\"http://ext.pimg.tw/style77125tech/1369341764-3430810860.png\" alt=\"Andriod 生命週期 \"></p>\n<p>撰寫 Andriod APP 最重要的就是生命週期。簡而言之，生命週期就是我們在手機各種操作時，切換到 APP 畫面時對程式運行的影響，例如執行中的 APP 在按下 Home 鍵後會進入到 <code>onPause()</code> 的狀態，不同的狀態不可能讓 APP 一直處於運轉中，因此 APP 作業流程設計會圍繞著 Android Lifecycle 在運轉，也是設計的核心。但記得在 Lifecycle 中，我個人認為最不能仰賴 <code>onDestroy()</code>，仰賴關閉 APP 時才去執行，無法預測 APP 是在什麼情況下被關閉的，可能執行緒被中斷、手機沒電等等狀況。重要的資料同步，盡可能不要放在 <code>onDestroy</code> 的部分。</p>\n<h4 id=\"雙語系\">雙語系</h4><p>TTtiemr 支援雙語系，支援 <code>zh-Tw</code> 和 <code>en</code> 語系，根據手機設定的國籍去做辨識。在手機中抓取字串的方式都需要使用 <code>android:text=&quot;@string/show&quot;</code> 抓取，之前有聽過反映這樣相當不友善(且不容易辨識)，不過在後期翻譯時相當有趣，單純翻譯 <code>string</code> 的設定檔就可完成。如果從一開始就有遵守紀律，將對應的字串寫在設定檔內，在專案末期好好享受輕鬆翻譯 APP 語言的成果吧!</p>\n<h4 id=\"多解析度圖片\">多解析度圖片</h4><p>在多解析度圖片這部分，我個人處理得相當糟糕，當初在 PC 上測試時雨手機上測試時發現差距極大，因此我大量的改用百分比去做設計。解決問題後我就沒有再去對多種解析度的螢幕下去做設計。</p>\n<h4 id=\"Animation_動畫效果\">Animation 動畫效果</h4><p>在 <code>WorkingActivity</code> 可以大量使用到動畫，Android 的動畫使用大致上是：宣告 &gt; 設定參數 &gt; 啟動。需要注意的是 Animation 的狀態，需要將正確的資料流操作掛載載正確的 Animation 事件上面，避免掉發生動畫時件不同步或是執行順序有問題的情況。Animation 玩起來相當有趣且有成就看，相當推薦大家玩玩。</p>\n<p><img src=\"/images/TTtimer/demo.png\" alt=\"screen shot\"></p>\n<h2 id=\"檔案簡介\">檔案簡介</h2><p>path: src/main/java/tw/com/oit/andrew/</p>\n<h5 id=\"myclass/MyTimer\">myclass/MyTimer</h5><p>計時計類別，主要是依照需求包裝了計時器去配合之後的 Andriod time tick。</p>\n<h5 id=\"myclass/MicroTimer\">myclass/MicroTimer</h5><p>繼承了 MyTimer，加入了秒數的欄位，最後這兩個計時器使用的類別會被包在 Plan 和 PlanToTime 中使用。</p>\n<h4 id=\"myclass/Plan\">myclass/Plan</h4><p>包裝了每個計畫項目資訊，屬於 PlanToTime 的父類別，絕大多數重要的功能也是在這裡。</p>\n<h4 id=\"myclass/PlanToTime\">myclass/PlanToTime</h4><p>在計畫項目資訊增加了目標時間，之後的 Activity 中使用的都是這個 class。兩個 Plan 相關的 class 是整個 APP 中 CP 最高的，但也是被反覆修改最多次的，良好的物件設計讓我在整個 APP 開發的後期有了相當不錯的資料控管，我能清楚的掌握資料的傳輸。</p>\n<h4 id=\"system/Notify\">system/Notify</h4><p>包裝了所有使用的通知視窗(Dialog)，從外部可以輕鬆的呼叫視窗，僅需要傳入必要的字串需求即可。</p>\n<h4 id=\"system/SysSet\">system/SysSet</h4><p>系統設定檔。應該與 TimeRiver 合併。</p>\n<h4 id=\"system/TimeRiver\">system/TimeRiver</h4><p>系統設定檔。主要是針對計時器的部分，這部分的設定會被記錄在 SQLite 中，確保每次重新啟動時都會是使用者設定的值。</p>\n<h4 id=\"tenthousandtimer/MainActivity\">tenthousandtimer/MainActivity</h4><p>主要介面的操作，拿讀取進來的資料動態新增控制項，並且宣告、啟動計時器。</p>\n<h4 id=\"tenthousandtimer/MetalsActivity\">tenthousandtimer/MetalsActivity</h4><p>單純檢視獎牌與頭銜等訊息，可以視為單純的 ListView Demo。</p>\n<h4 id=\"tenthousandtimer/MyMenu\">tenthousandtimer/MyMenu</h4><p>針對 Menu 包裝操作，命名並沒有使用 Activity 是用來區別這個是一包裝操作的 class 並非直接掛載在頁面上的。</p>\n<h4 id=\"tenthousandtimer/SettingActivity\">tenthousandtimer/SettingActivity</h4><p>設定頁面，設邊使用了固定的控制項，然後將設定的資訊寫在上面的 system 類別中，並儲存在 SQLite。</p>\n<h4 id=\"tenthousandtimer/WelcomActivity\">tenthousandtimer/WelcomActivity</h4><p>歡迎界面，在裡面載入 SQLite 的資料，其實這沒有必要，在 MainActivity 中載入即可，單純為了好看。</p>\n<h4 id=\"tenthousandtimer/WorkingActivity\">tenthousandtimer/WorkingActivity</h4><p>在 WorkingActivity 中大量的使用了 Animation，如果在事後才掛上 Animation 容易導致先前設計的資料流多少出現錯誤。仔細研究 Animation 與主程式非同步的關係，就能解決這個問題，並不至於需要 APP 大改寫。</p>\n<h4 id=\"tttsql/PlanSQL_&amp;_tttsql/SystemSettingSQL\">tttsql/PlanSQL &amp; tttsql/SystemSettingSQL</h4><p>包裝了 SQLite 的操作，包含了整批資料的 CRUD，這邊對於 SQLite 的操作相當基本，依據我的印象，資料更新的操作是直接用覆蓋的。基本上也不會出錯，在小量的資料下，效能也沒有問題。PlanSQL 和 SystemSettingSQL 分別包裝了不同的資料而已，基本上觀念完全相同。皆是在載入畫面時會讀取資料。記得注意 Andriod 的版本問題，另外 SQLite 自己也有版本問題，請確保測試資料正確，紀律性的測試可以省去很多麻煩。</p>\n<h4 id=\"viewlist/AddBtn_&amp;_viewlist/ViewList\">viewlist/AddBtn &amp; viewlist/ViewList</h4><p>這兩個類別都包裝了動態新增物件的功能，新增動態物件其實相當麻煩，要考慮物件本身、事件、資料，因此我會盡可能將資訊都封裝在類別內，屆時只需要傳入必要參數即可，如任務有用物件包裝好，那理所當然直接傳遞物件即可。</p>\n<p><img src=\"/images/TTtimer/demo2.png\" alt=\"screen shot\"></p>\n<h2 id=\"結語\">結語</h2><p>TTtiemr 亦有存在問題，目前我個人也不知道該如何解決。TTtimer 似乎在重複開啟太多任務後，會導致手機效能降低，吃掉太多CPU或記憶體。但此部分已經超過我對 Andriod APP 的認知，需要更專業的技術。但 TTtimer 所使用的技術，除了連線的需求之外，能滿足絕大部份的 APP 開發。這次的 Andriod APP - TTtimer 分享希望能幫助到大家，如果有任何問題也可以 <a href=\"https://www.facebook.com/profile.php?id=100001317746154\">Facebook</a> 敲我或是寄信給我詢問細節，但請標明是誰詢問與相關的問題資訊。</p>\n"},{"title":"JavaScript - .Bind() .Apply() .Call()","date":"2015-08-18T14:30:15.000Z","comments":0,"_content":"\n![javascript](/images/javascript.jpg)\n\n#### function .bind()\n\n.bind() 不會立即執行 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。\n\n``` js\nfunc.bind( null, 1 ,2 ,3 ) ;   // 不會立即執行\n```\n\n#### function .call()\n\n.call() 呼叫 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。\n\n``` js\nfunc.call( null, 1 ,2 ,3 ) ;   // 逐一傳入參數 (立即執行)\n```\n\n#### function .apply()\n\n.apply() 呼叫 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。而參數是統一用一個陣列包起來，apply 會自行拆開傳入。\n\n\n``` js\nfunc.apply( null, [ 1, 2, 3 ] );  // 參數統一用 array 傳入 (立即執行)\n```\n","source":"_posts/20150818_JS_build_call_apply.md","raw":"title: JavaScript - .bind() .apply() .call()\ndate: 2015-08-18 22:30:15\ntags:\n- JavaScript\ncategories: JavaScript\ncomments: false\n---\n\n![javascript](/images/javascript.jpg)\n\n#### function .bind()\n\n.bind() 不會立即執行 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。\n\n``` js\nfunc.bind( null, 1 ,2 ,3 ) ;   // 不會立即執行\n```\n\n#### function .call()\n\n.call() 呼叫 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。\n\n``` js\nfunc.call( null, 1 ,2 ,3 ) ;   // 逐一傳入參數 (立即執行)\n```\n\n#### function .apply()\n\n.apply() 呼叫 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。而參數是統一用一個陣列包起來，apply 會自行拆開傳入。\n\n\n``` js\nfunc.apply( null, [ 1, 2, 3 ] );  // 參數統一用 array 傳入 (立即執行)\n```\n","slug":"20150818_JS_build_call_apply","published":1,"updated":"2017-01-30T11:57:14.000Z","_id":"ciykugby00000sfu00j7saamj","layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/javascript.jpg\" alt=\"javascript\"></p>\n<h4 id=\"function_-bind()\">function .bind()</h4><p>.bind() 不會立即執行 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.bind( <span class=\"literal\">null</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> ,<span class=\"number\">3</span> ) ;   <span class=\"comment\">// 不會立即執行</span></div></pre></td></tr></table></figure>\n<h4 id=\"function_-call()\">function .call()</h4><p>.call() 呼叫 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.call( <span class=\"literal\">null</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> ,<span class=\"number\">3</span> ) ;   <span class=\"comment\">// 逐一傳入參數 (立即執行)</span></div></pre></td></tr></table></figure>\n<h4 id=\"function_-apply()\">function .apply()</h4><p>.apply() 呼叫 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。而參數是統一用一個陣列包起來，apply 會自行拆開傳入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.apply( <span class=\"literal\">null</span>, [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] );  <span class=\"comment\">// 參數統一用 array 傳入 (立即執行)</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><img src=\"/images/javascript.jpg\" alt=\"javascript\"></p>\n<h4 id=\"function_-bind()\">function .bind()</h4><p>.bind() 不會立即執行 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.bind( <span class=\"literal\">null</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> ,<span class=\"number\">3</span> ) ;   <span class=\"comment\">// 不會立即執行</span></div></pre></td></tr></table></figure>\n<h4 id=\"function_-call()\">function .call()</h4><p>.call() 呼叫 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.call( <span class=\"literal\">null</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> ,<span class=\"number\">3</span> ) ;   <span class=\"comment\">// 逐一傳入參數 (立即執行)</span></div></pre></td></tr></table></figure>\n<h4 id=\"function_-apply()\">function .apply()</h4><p>.apply() 呼叫 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。而參數是統一用一個陣列包起來，apply 會自行拆開傳入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.apply( <span class=\"literal\">null</span>, [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] );  <span class=\"comment\">// 參數統一用 array 傳入 (立即執行)</span></div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciyk0rqf00010jcu0ufv7mwva","category_id":"ciyk0rqf10011jcu0leretilj","_id":"ciyk0rqf10014jcu04me2yz8d"},{"post_id":"ciyk0rqf80019jcu0ei3oe5rl","category_id":"ciyk0rqf9001ajcu0rwjb69h6","_id":"ciyk0rqfb001djcu0cjfh973e"},{"post_id":"ciyk0rqfe001jjcu0v62fbosc","category_id":"ciyk0rqf9001ajcu0rwjb69h6","_id":"ciyk0rqff001kjcu05lu8x82f"},{"post_id":"ciyku844f0000juu0z5idvo8c","category_id":"ciyku844n0001juu06hi8jb0q","_id":"ciyku844p0004juu07n2qyjzq"},{"post_id":"ciykugby00000sfu00j7saamj","category_id":"ciyk0rqf50016jcu0o4i0rxit","_id":"ciykugby30002sfu09xkln7j8"}],"PostTag":[{"post_id":"ciyk0rqf00010jcu0ufv7mwva","tag_id":"ciyk0rqei0004jcu02wdq2j9w","_id":"ciyk0rqf10012jcu0ywxwlgyd"},{"post_id":"ciyk0rqf00010jcu0ufv7mwva","tag_id":"ciyk0rqel0007jcu0qfjmrypw","_id":"ciyk0rqf10013jcu0g6jrj36e"},{"post_id":"ciyk0rqf80019jcu0ei3oe5rl","tag_id":"ciyk0rqf9001bjcu0t6916jj6","_id":"ciyk0rqfb001fjcu0ev8xinml"},{"post_id":"ciyk0rqf80019jcu0ei3oe5rl","tag_id":"ciyk0rqel0007jcu0qfjmrypw","_id":"ciyk0rqfb001gjcu0loato28o"},{"post_id":"ciyk0rqf80019jcu0ei3oe5rl","tag_id":"ciyk0rqf9001cjcu0uqxjnzg7","_id":"ciyk0rqfb001hjcu02j5k6ym5"},{"post_id":"ciyk0rqf80019jcu0ei3oe5rl","tag_id":"ciyk0rqfb001ejcu0357fu0yp","_id":"ciyk0rqfc001ijcu0kaybw0vf"},{"post_id":"ciyk0rqfe001jjcu0v62fbosc","tag_id":"ciyk0rqf9001bjcu0t6916jj6","_id":"ciyk0rqfg001mjcu0abbs1iwm"},{"post_id":"ciyk0rqfe001jjcu0v62fbosc","tag_id":"ciyk0rqel0007jcu0qfjmrypw","_id":"ciyk0rqfg001njcu0sts9jpdc"},{"post_id":"ciyk0rqfe001jjcu0v62fbosc","tag_id":"ciyk0rqfg001ljcu0luc4ouck","_id":"ciyk0rqfg001ojcu0wl2ar5zn"},{"post_id":"ciyku844f0000juu0z5idvo8c","tag_id":"ciyku844n0002juu000alzyx3","_id":"ciyku844r0006juu0yyirh1t2"},{"post_id":"ciyku844f0000juu0z5idvo8c","tag_id":"ciyku844o0003juu0v9t6cnv4","_id":"ciyku844r0007juu0be8a4w5f"},{"post_id":"ciyku844f0000juu0z5idvo8c","tag_id":"ciyku844q0005juu0i4ecc8er","_id":"ciyku844r0008juu0jmbkcr9r"},{"post_id":"ciykugby00000sfu00j7saamj","tag_id":"ciyk0rqel0007jcu0qfjmrypw","_id":"ciykugby30001sfu0yabjzpl8"}],"Tag":[{"name":"Node.js","_id":"ciyk0rqei0004jcu02wdq2j9w"},{"name":"Node.js 從零開始","_id":"ciyk0rqek0005jcu0okbonl45"},{"name":"JavaScript","_id":"ciyk0rqel0007jcu0qfjmrypw"},{"name":"社群活動","_id":"ciyk0rqf9001bjcu0t6916jj6"},{"name":"Angular.js","_id":"ciyk0rqf9001cjcu0uqxjnzg7"},{"name":"React.js","_id":"ciyk0rqfb001ejcu0357fu0yp"},{"name":"ES6","_id":"ciyk0rqfg001ljcu0luc4ouck"},{"name":"Android","_id":"ciyku844n0002juu000alzyx3"},{"name":"Java","_id":"ciyku844o0003juu0v9t6cnv4"},{"name":"作品集","_id":"ciyku844q0005juu0i4ecc8er"}]}}