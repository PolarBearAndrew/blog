{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/javascript.jpg","path":"images/javascript.jpg","modified":0,"renderable":0},{"_id":"source/images/TTtimer/ic_launcher.png","path":"images/TTtimer/ic_launcher.png","modified":0,"renderable":0},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/html-patch.js","path":"js/html-patch.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/jquery.scrollLoading.js","path":"scrollLoading/jquery.scrollLoading.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/main.js","path":"scrollLoading/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/style.css","path":"scrollLoading/style.css","modified":0,"renderable":1},{"_id":"source/images/books/被討厭的勇氣.jpg","path":"images/books/被討厭的勇氣.jpg","modified":0,"renderable":0},{"_id":"source/images/TTtimer/working_finish.jpg","path":"images/TTtimer/working_finish.jpg","modified":0,"renderable":0},{"_id":"source/images/TTtimer/demo.jpg","path":"images/TTtimer/demo.jpg","modified":0,"renderable":0},{"_id":"source/images/TTtimer/demo2.jpg","path":"images/TTtimer/demo2.jpg","modified":0,"renderable":0},{"_id":"themes/hueman/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.bk.png","path":"css/images/logo-header.bk.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/images/preloader.gif","path":"scrollLoading/images/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/scrollLoading/images/preloader@2x.gif","path":"scrollLoading/images/preloader@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"50e4b5c512e87e4691f8cffbf554c56251e96e22","modified":1485827099000},{"_id":"themes/hueman/.DS_Store","hash":"b92d5459a05a5240ffb141d49b2f0aeb234e84b6","modified":1439169626000},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1438449084000},{"_id":"themes/hueman/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1438449084000},{"_id":"themes/hueman/README.md","hash":"cb0615f198b8b322d77452aa9fd2924189995855","modified":1438449084000},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1438449084000},{"_id":"themes/hueman/_config.yml.example","hash":"c005adc3200e1ecbbb591ebf0a9a91296ecdaed2","modified":1438475572000},{"_id":"themes/hueman/package.json","hash":"47c5adba0477e92e742349bf86f28bfeb701b3c1","modified":1438449084000},{"_id":"source/_old_posts/Node從零開始_03.md","hash":"26a902304da386b80351a437467b6922b84f6632","modified":1439654116000},{"_id":"source/_old_posts/Node從零開始_01.md","hash":"29ed1a0506cd697b4bac07791b8bc9645e62f39c","modified":1439895579000},{"_id":"source/_old_posts/Node從零開始_02.md","hash":"85e9c83cac67c891cdd24e3285cae1ca0f157941","modified":1439517682000},{"_id":"source/_old_posts/Node從零開始_04.md","hash":"c2f366a55f9023ee5f56de1e963307ebde5b5c8e","modified":1443175852000},{"_id":"source/_old_posts/Node從零開始_05.md","hash":"039e33f230e3eaf3c6320b1f68317d60053c5ff7","modified":1440465970000},{"_id":"source/_old_posts/Node從零開始_06.md","hash":"1bac35282ea62222db91f01cb311410a8a8e6087","modified":1440472465000},{"_id":"source/_posts/20150819_APP_TTtimerForOIT.md","hash":"0ae122c2ba0d48a4517a687f411c10b2bce91337","modified":1485827175000},{"_id":"source/_posts/20170131_BOOKS_被討厭的勇氣.md","hash":"89153a1e1fb8fc1989ddb8a85444a3e945235e2d","modified":1485833986000},{"_id":"source/_posts/20150802_JS_JSDevilDay.md","hash":"9b6967b2b116a3c968026dc4963408dc2c1f4411","modified":1438602171000},{"_id":"source/_posts/20150802_JS_AngularReactOrOther.md","hash":"cd1eff450b2d957960e309e3dd1a17a9027e4ab1","modified":1438601372000},{"_id":"source/_posts/Node_Redis記憶體快取.md","hash":"770a33af3ce568c805ede808dbea70f4b78bced7","modified":1485775956000},{"_id":"source/_posts/20150818_JS_buildCallApply.md","hash":"a614b5bfe6d0883a3823ab4de45b57b25430f1d4","modified":1485777434000},{"_id":"source/_posts/_hello-world.md","hash":"170bcae0322be89b6a544676d221edad75d1d13e","modified":1438821366000},{"_id":"source/categories/index.md","hash":"c6cd5091945f5e95b77ccdda674e3192c30736a2","modified":1438479249000},{"_id":"source/about/index.md","hash":"e0a6432dab93b15da46b3127c834ad1b13126de3","modified":1485826849000},{"_id":"source/images/javascript.jpg","hash":"40d3dbea4443273ddc3c9feffafb6277fcb41d8b","modified":1485777428000},{"_id":"source/images/.DS_Store","hash":"9d8cfaed176ed19ed603a92a28ceb28cb1d0ea77","modified":1485827123000},{"_id":"source/tags/index.md","hash":"5e767603e5f30191472dcc91836eca84f6c9cf8a","modified":1438479223000},{"_id":"themes/hueman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1438449084000},{"_id":"themes/hueman/.git/config","hash":"e1edb40c9185c45aaf038ac93a73733bcb556c48","modified":1438449084000},{"_id":"themes/hueman/.git/.DS_Store","hash":"eb182cd0add53c1bb9175f3a4e8c050457ada79f","modified":1439169626000},{"_id":"themes/hueman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1438449074000},{"_id":"themes/hueman/.git/index","hash":"d29f6edc098541b6b2b8a71814f41f6b7e21f1f9","modified":1439170972000},{"_id":"themes/hueman/.git/packed-refs","hash":"aaac337cf13db8c03255d2b352ce45595c9ade4a","modified":1438449084000},{"_id":"themes/hueman/languages/en.yml","hash":"79e127d356bdf5a29098793d48d52eb9fc8e9b5c","modified":1438449084000},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"bdc8f74115cfe9aa4fe4eb20b36aa1030338274b","modified":1438449084000},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"add71557d2dc7ae40cda856db3304a8159079631","modified":1438475709000},{"_id":"themes/hueman/layout/.DS_Store","hash":"39109ee602c22c84aa62311e2030d5ecc76f5a3a","modified":1439169626000},{"_id":"themes/hueman/layout/category.ejs","hash":"85f2f7e0fdc16c496927511206364304ec364abe","modified":1438449084000},{"_id":"themes/hueman/layout/layout.ejs","hash":"fc59e1e1d6127afdc8e2556e07c5d32fed5bb036","modified":1438474993000},{"_id":"themes/hueman/layout/archive.ejs","hash":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1438449084000},{"_id":"themes/hueman/layout/index.ejs","hash":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1438449084000},{"_id":"themes/hueman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1438449084000},{"_id":"themes/hueman/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1438449084000},{"_id":"themes/hueman/layout/tag.ejs","hash":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1438449084000},{"_id":"themes/hueman/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1438449084000},{"_id":"themes/hueman/source/.DS_Store","hash":"8fbf9a1c2dacb92c017694a65fdf0c91ab358e35","modified":1439169626000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_1.png","hash":"7a20144a14897068c27a3774dce686e1d6723e67","modified":1439513584000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_6.png","hash":"d1d2dad3b9d48f2917afa31d1ca0d6e5dce3cd7e","modified":1439514447000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_7.png","hash":"0b382fb40beb65fe86c2db0268f7624a10a7d092","modified":1439486794000},{"_id":"source/_old_posts/_nodeFormZero_2/node_3_1.png","hash":"af766881c005d057f5c4bf42ea862045419c2977","modified":1439910480000},{"_id":"source/images/TTtimer/ic_launcher.png","hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1439970250000},{"_id":"source/images/TTtimer/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1485827585000},{"_id":"themes/hueman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1438449074000},{"_id":"themes/hueman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1438449074000},{"_id":"themes/hueman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1438449074000},{"_id":"themes/hueman/.git/logs/.DS_Store","hash":"e3b6726975138fdca09a55109a13ec93d7e74296","modified":1439169626000},{"_id":"themes/hueman/.git/logs/HEAD","hash":"cead32cc31a9088470cc26b122d3d3e9eb55253f","modified":1438449084000},{"_id":"themes/hueman/.git/objects/.DS_Store","hash":"71875d3d315225c33e046820e1507e00049c66c5","modified":1439169620000},{"_id":"themes/hueman/.git/refs/.DS_Store","hash":"087ede0f9e8a425bf245c9b10b400abbe4e59def","modified":1439169626000},{"_id":"themes/hueman/layout/_partial/.DS_Store","hash":"791848b5040e199cb2b6f324c3218b3f4cce44cb","modified":1439169620000},{"_id":"themes/hueman/layout/_partial/after-footer.ejs","hash":"4c1afa7c23b1c20cbd0445ee2734a78a4e5ac774","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/archive.ejs","hash":"d503cd2de2ad6c569d6cc47208987e00536231be","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/article.ejs","hash":"fd5eb9c2323bedbee9901e4632af92fdc87a2fa2","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/footer.ejs","hash":"6656f5b97a20479efeda55879b17cf8db61bb698","modified":1438478796000},{"_id":"themes/hueman/layout/_partial/google-analytics.ejs","hash":"b85f018bae6da2c96a09c4c69e1e2aeef896e40c","modified":1438476131000},{"_id":"themes/hueman/layout/_partial/head.ejs","hash":"d27da77c892559b7ab13e36a84db791a2cdec7bf","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/header.ejs","hash":"5467fed4704f9c4c897c6e7284a3af8bab02bdd8","modified":1439171100000},{"_id":"themes/hueman/layout/_widget/archive.ejs","hash":"92fcfd830c011f1ff6e7d95443fe65067d3161f8","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/sidebar.ejs","hash":"566ec2c9f9051a9489ef1de0b0c15f5765ca14ad","modified":1438449084000},{"_id":"themes/hueman/layout/_widget/category.ejs","hash":"f0bb4be5c625003c0e38312f5079667be3a09ab7","modified":1438449084000},{"_id":"themes/hueman/layout/_widget/links.ejs","hash":"e24c5bebe3e9f0bbaaf3b44bce8ef5ce56ae348b","modified":1438449084000},{"_id":"themes/hueman/layout/_widget/recent_posts.ejs","hash":"0c4c97131131e5d06a886f9dc6e00f5de34e2bd3","modified":1438449084000},{"_id":"themes/hueman/layout/_widget/tag.ejs","hash":"7b35103049fd0480f2631327b9381b7f4c9f5bcb","modified":1438449084000},{"_id":"themes/hueman/layout/_widget/tagcloud.ejs","hash":"f4ac20c48e4bd6202e263efc9d320de1ad48d608","modified":1438449084000},{"_id":"themes/hueman/source/css/_extend.styl","hash":"41c5b46a19627571bd592eb4b071e2e279333252","modified":1438449084000},{"_id":"themes/hueman/source/css/.DS_Store","hash":"8337331af7273a48719ca666a42a54b6ba8afa6f","modified":1438847405000},{"_id":"themes/hueman/source/css/_variables.styl","hash":"4707e0af2154ae372648eeaec2d6f1babc5f740f","modified":1438820514000},{"_id":"themes/hueman/source/css/_retina.styl","hash":"e0445c7caa049250fe3811f55cc82f389009e90f","modified":1438449084000},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"7518d511dee2f0f4da85ff635ff0da20060dc9b8","modified":1438449084000},{"_id":"themes/hueman/source/css/style.styl","hash":"0c9a533dacb73437543256f398e31ce8189ab970","modified":1438820491000},{"_id":"themes/hueman/source/fancybox/.DS_Store","hash":"9b9b8ea7ddcc5526a56d8876929338d9ce1a6588","modified":1439169620000},{"_id":"themes/hueman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1438449084000},{"_id":"themes/hueman/source/js/html-patch.js","hash":"f58064e8afcc34e816d8e400dafb850bd064a207","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1438449084000},{"_id":"themes/hueman/source/js/script.js","hash":"3a882ecf9ed0a1a921090d954037f90d4e5089e8","modified":1438449084000},{"_id":"themes/hueman/source/scrollLoading/.DS_Store","hash":"2680c4478700a5c62583ee112ca9f42a6f28217b","modified":1439169620000},{"_id":"themes/hueman/source/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1438449084000},{"_id":"themes/hueman/source/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1438449084000},{"_id":"themes/hueman/source/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1438449084000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_4.png","hash":"b88e1f257e3b690dc13d6015d4a20bfe9d18532b","modified":1439515182000},{"_id":"source/images/books/被討厭的勇氣.jpg","hash":"882ed50f38dec07e7e53e984628427af9099b51a","modified":1485827711000},{"_id":"source/images/TTtimer/working_finish.jpg","hash":"31efdfa759f107c21ca160ab4b25a3a6f84ed064","modified":1485826272000},{"_id":"source/_old_posts/_nodeFormZero_2/node_4_2.png","hash":"9073bfc037228e5cde4b1146f57ed82415ce7c41","modified":1440463848000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_2.png","hash":"30cd09a399d8947c2769e5d79c04514d39bb1dd6","modified":1439513573000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_3.png","hash":"e8160d262dbd21a057b603ba8280156052c82cbc","modified":1439513691000},{"_id":"source/images/TTtimer/demo.jpg","hash":"2886b170772d9e8a21df2451a64f2a32682ad721","modified":1485826252000},{"_id":"source/images/TTtimer/demo2.jpg","hash":"1caf5b4d931d83f2394cd034b6cd805eeb4309c4","modified":1485826324000},{"_id":"source/_old_posts/_nodeFormZero_2/node_4_1.png","hash":"2832afa7bf4ea7dec1f104f983acb5f9eb31eb32","modified":1440463250000},{"_id":"source/_old_posts/_nodeFormZero_2/node_4_4.png","hash":"d5489e1d406b4f668106c4e8cea4565104d0b0f2","modified":1440466380000},{"_id":"themes/hueman/.git/logs/refs/.DS_Store","hash":"8ac480ad1dd13d34ee58d30fd3ed4e6f39abf747","modified":1439169626000},{"_id":"themes/hueman/.git/objects/pack/pack-c4b4368d1815221b5d932b49039fd7b11eab106f.idx","hash":"1255714c90cf525dcd5ceab14349a2b1b04022db","modified":1438449084000},{"_id":"themes/hueman/.git/refs/heads/master","hash":"4f22c0b12a71f0b89beee03c3b56a13fcc037313","modified":1438449084000},{"_id":"themes/hueman/.git/refs/remotes/.DS_Store","hash":"e59c0cecef6240ea4a7a615e645d1f84e88cbf6a","modified":1439169620000},{"_id":"themes/hueman/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/post/nav.ejs","hash":"025a7695be81126dff4fcbeff1face60118da600","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/post/thumbnail.ejs","hash":"a1d68ad1eb9092aca74321aff3c9fd42029c9ba6","modified":1438449084000},{"_id":"themes/hueman/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1438449084000},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"c611142866096da7c7428d2ef8fd4079a781f57c","modified":1438449084000},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"63f7ee35d4c3aa7d5d8b57afbe613d3b884a40bc","modified":1485828477000},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"38e578af64f98e30fba8dadd5a4699a0972eda8e","modified":1438449084000},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"2683cecb7d69e23a3fb1e80f10141454fb4cb232","modified":1438449084000},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"5758e93569a1baf63de1e65ab7746df1d3130624","modified":1438449084000},{"_id":"themes/hueman/source/css/_partial/highlight.styl","hash":"9332816d92370cff8e252631ef65cb78c53ebb2a","modified":1438449084000},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"57db2edb99734989ee147226dc952506cb8f73e2","modified":1438449084000},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"ea1d621a570dec9833dcc6519d039821c72e1d8c","modified":1438449084000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"494e9ba779f4d9ad023135baf76a270b2a6d8c94","modified":1438449084000},{"_id":"themes/hueman/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1438449084000},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1438449084000},{"_id":"themes/hueman/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1438821170000},{"_id":"themes/hueman/source/css/images/logo-header.bk.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1438449084000},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"614fc0d3770b287e33928233ee0859b2954efcd6","modified":1438821140000},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1438449084000},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1438449084000},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1438449084000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1438449084000},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1438449084000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1438449084000},{"_id":"themes/hueman/source/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1438449084000},{"_id":"themes/hueman/source/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1438449084000},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1438449084000},{"_id":"themes/hueman/.git/logs/refs/remotes/.DS_Store","hash":"9e38b44d1b83f347b139c86e2c1326f1782daf9c","modified":1439169620000},{"_id":"themes/hueman/.git/logs/refs/heads/master","hash":"cead32cc31a9088470cc26b122d3d3e9eb55253f","modified":1438449084000},{"_id":"themes/hueman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1438449084000},{"_id":"themes/hueman/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1438449084000},{"_id":"source/_old_posts/_nodeFormZero_2/node_2_5.png","hash":"db170cf06b2e83620dd7e2c8dd9908df5a3b1fab","modified":1439513629000},{"_id":"themes/hueman/.git/logs/refs/remotes/origin/HEAD","hash":"cead32cc31a9088470cc26b122d3d3e9eb55253f","modified":1438449084000},{"_id":"source/_old_posts/_nodeFormZero_2/node_4_3.png","hash":"ec70ba567c2892eaa13fe62110384813b1f735bd","modified":1440464287000},{"_id":"themes/hueman/.git/objects/pack/pack-c4b4368d1815221b5d932b49039fd7b11eab106f.pack","hash":"6f8710003d631d9215cdec7426b1e270a1824fb2","modified":1438449084000},{"_id":"public/sitemap.xml","hash":"2ea57b9673fd54f67011ef8a4c6fc2f585d9b738","modified":1485875593594},{"_id":"public/categories/index.html","hash":"088434891bd92688dec0675ad5e1fb139996b6ac","modified":1485875595431},{"_id":"public/tags/index.html","hash":"8b10832b663769972361ccc4c8f9bca6fc5e5370","modified":1485875595626},{"_id":"public/categoriesl/作品集/index.html","hash":"59bc12a827ed3fd78c9fa5daadbc8629bf4d2844","modified":1485875595627},{"_id":"public/categoriesl/Node-js/index.html","hash":"e705e8b904ce60468dc208710b945ba9a39501d5","modified":1485875595628},{"_id":"public/categoriesl/JavaScript/index.html","hash":"5406a1670ce6984270fc45c2cd724e87086711e6","modified":1485875595628},{"_id":"public/tags/Android/index.html","hash":"a43508dfaf4d1193c8bfe268bf9fea212c05429b","modified":1485875595628},{"_id":"public/tags/Java/index.html","hash":"b3ce9f20a1e1087fba8ab475eb7beceb6893c416","modified":1485875595628},{"_id":"public/tags/作品集/index.html","hash":"fdaeb5e40c12cc71955902a779454990008eedec","modified":1485875595628},{"_id":"public/2015/08/16/Node_Redis記憶體快取/index.html","hash":"65cc920b4e2ebfbc324c7ed87d249e519558d4ee","modified":1485832950666},{"_id":"public/archives/index.html","hash":"6009580bd1ceefc6f6d7cef5fbf4b2118c2fbc0f","modified":1485875595630},{"_id":"public/archives/2015/index.html","hash":"3e80a40b982f44f9d58888b6013870708d05f3d8","modified":1485875595630},{"_id":"public/archives/2015/08/index.html","hash":"dfd68ce82ddee2846d05530db4c8f4f1d85d81fb","modified":1485875595630},{"_id":"public/categoriesl/社群活動/index.html","hash":"35eb0093bb41225f735f21a5d41a5e3e0d71b24b","modified":1485875595629},{"_id":"public/index.html","hash":"ee0912fca04c3df60d1547d65449694416e5608f","modified":1485875595629},{"_id":"public/tags/社群活動/index.html","hash":"6d47d535e5538b3603fd6a1cb3f8d8e7d747128f","modified":1485875595630},{"_id":"public/about/index.html","hash":"5f5dc2a99c13f04aafb80b4101947e65335dafa1","modified":1485875595625},{"_id":"public/archives/2017/index.html","hash":"576c0dfcce33102e46bb5f7d1200f3b6038c6b16","modified":1485875595630},{"_id":"public/archives/2017/01/index.html","hash":"987264b4d84d232544f00b99ab242cd1222ef1b4","modified":1485875595630},{"_id":"public/categoriesl/讀書心得/index.html","hash":"aa66fa047d223d0711185cff52fb47ff7603c883","modified":1485875595629},{"_id":"public/tags/讀書心得/index.html","hash":"a926f367e4c956528baeceee065dc1370c23d249","modified":1485875595630},{"_id":"public/tags/ES6/index.html","hash":"d4b39e753b223cc89ffa9d45ed9efa340af7ff72","modified":1485875595628},{"_id":"public/tags/Node-js/index.html","hash":"93160ccf443bf80fcf9ba770a8e697f3643ea409","modified":1485875595628},{"_id":"public/tags/Angular-js/index.html","hash":"e7e0bcaacc2a7cb5b60a7fb5b24ed668edb68883","modified":1485875595628},{"_id":"public/tags/React-js/index.html","hash":"58205a132dd37aa969ed49194e7ffa313e100c10","modified":1485875595628},{"_id":"public/2017/01/31/20170131_BOOKS_被討厭的勇氣/index.html","hash":"8dddaf17fb00d4f9ccffa5b0bc4da70877dc7853","modified":1485834029426},{"_id":"public/2015/08/19/20150819_APP_TTtimerForOIT/index.html","hash":"fb6ad15398ed1d7371e730292d0725669e250284","modified":1485875595629},{"_id":"public/2015/08/18/20150818_JS_buildCallApply/index.html","hash":"6d42f5f041b235baaf85624ce2c8a704c4f8c36e","modified":1485875595629},{"_id":"public/2015/08/02/20150802_JS_AngularReactOrOther/index.html","hash":"be270bab62e5c7cd84f1d76d3a93a7afc8382efe","modified":1485875595629},{"_id":"public/2015/08/02/20150802_JS_JSDevilDay/index.html","hash":"54855432764ad64b2daa6f4facec37c4f61f97a2","modified":1485875595629},{"_id":"public/tags/JavaScript/index.html","hash":"91ff2cb225fe6de195de6a17f619b1bd35fc77b8","modified":1485875595630},{"_id":"public/images/javascript.jpg","hash":"40d3dbea4443273ddc3c9feffafb6277fcb41d8b","modified":1485832950692},{"_id":"public/images/TTtimer/ic_launcher.png","hash":"80deb1892604a3ec7154a9d4bc36477ba8fd2c2f","modified":1485832950692},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1485832950692},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485832950692},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485832950692},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1485832950692},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1485832950692},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1485832950692},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1485832950692},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1485832950692},{"_id":"public/css/images/logo-header.bk.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1485832950692},{"_id":"public/css/images/logo-header.png","hash":"614fc0d3770b287e33928233ee0859b2954efcd6","modified":1485832950692},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1485832950692},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1485832950692},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1485832950692},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1485832950692},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1485832950692},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1485832950693},{"_id":"public/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485832950693},{"_id":"public/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485832950693},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1485832951563},{"_id":"public/images/books/被討厭的勇氣.jpg","hash":"882ed50f38dec07e7e53e984628427af9099b51a","modified":1485832951565},{"_id":"public/images/TTtimer/working_finish.jpg","hash":"31efdfa759f107c21ca160ab4b25a3a6f84ed064","modified":1485832951565},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1485832951569},{"_id":"public/js/html-patch.js","hash":"f58064e8afcc34e816d8e400dafb850bd064a207","modified":1485832951569},{"_id":"public/js/script.js","hash":"3a882ecf9ed0a1a921090d954037f90d4e5089e8","modified":1485832951569},{"_id":"public/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1485832951569},{"_id":"public/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1485832951570},{"_id":"public/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1485832951570},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1485832951570},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1485832951570},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1485832951570},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1485832951570},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1485832951570},{"_id":"public/css/style.css","hash":"68633b18a1ae6033cc7dfd0872f5e413eb0d25f1","modified":1485832951570},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1485832951570},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1485832951570},{"_id":"public/images/TTtimer/demo.jpg","hash":"2886b170772d9e8a21df2451a64f2a32682ad721","modified":1485832951570},{"_id":"public/images/TTtimer/demo2.jpg","hash":"1caf5b4d931d83f2394cd034b6cd805eeb4309c4","modified":1485832951570},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1485832951573},{"_id":"source/_posts/20150816_JS_redis.md","hash":"770a33af3ce568c805ede808dbea70f4b78bced7","modified":1485775956000},{"_id":"public/2015/08/16/20150816_JS_redis/index.html","hash":"bee5e730298f482a9734360d27f796956f3ecf1c","modified":1485875595629},{"_id":"source/_posts/20170131_BOOKS_被討厭的勇氣1-2.md","hash":"ef018534e7dafa4985f668f7aeac661d326493c3","modified":1485875577000},{"_id":"source/_posts/20170131_BOOKS_被討厭的勇氣1-1.md","hash":"80d03eca57444ac5e314052a274bf52bd4323602","modified":1485873993000},{"_id":"public/2017/01/31/20170131_BOOKS_被討厭的勇氣1-2/index.html","hash":"e3aa03c5605152a806fa1c42484466f606ca59e6","modified":1485875595632},{"_id":"public/2017/01/31/20170131_BOOKS_被討厭的勇氣1-1/index.html","hash":"1e723b9ebb48100b2ab7021557fa4c98f907427e","modified":1485875595632}],"Category":[{"name":"作品集","_id":"ciykykomo0004iwu0cb9qy4wu"},{"name":"讀書心得","_id":"ciykykon7000aiwu05vw62naf"},{"name":"社群活動","_id":"ciykykona000eiwu0g8mnh54m"},{"name":"Node.js","_id":"ciykykond000hiwu059ygm8d5"},{"name":"JavaScript","_id":"ciykykong000riwu0bw2m64xi"}],"Data":[],"Page":[{"title":"Categories","date":"2015-08-02T01:34:09.000Z","_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-08-02 09:34:09\n---\n","updated":"2015-08-02T01:34:09.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciykykomg0001iwu0u5ea3uq8","content":"","excerpt":"","more":""},{"title":"About","date":"2017-01-31T01:40:49.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2017-01-31 09:40:49\n---\n","updated":"2017-01-31T01:40:49.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciykykoml0003iwu0krjgtafk","content":"","excerpt":"","more":""},{"title":"Tags","date":"2015-08-02T01:33:43.000Z","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-08-02 09:33:43\n---\n","updated":"2015-08-02T01:33:43.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciykykomx0007iwu08komgoi0","content":"","excerpt":"","more":""}],"Post":[{"title":"Android App - TTtimer","date":"2015-08-19T07:46:12.000Z","comments":0,"_content":"\n<center>\n![TTtimer](/images/TTtimer/ic_launcher.png)\n</center>\n\n名稱：TTtimer\n類型：Andriod App / Java, 未上架\n時間：2015/1 (大三上學期)\n用途：期末作業\n\n## 簡介\n\nAndroid APP - TTtime 是我在大三上學期修 Amy 老師 Java 課程的期末作品。這隻 APP 大概是我個人最喜歡期末作品之一，包括結構和設計是我個人最喜歡的，當時我有不少的時間與不曉得發揮空間。TTtimer 的設計概念出自於 10,000 小時，意指在某一個專業區域中努力 10,000 小時才能成為該專業領域中的佼佼者(這個理念最後被我個人推翻了)。而 TTtimer 即是此類型的計時器，選擇目標的專業項目後，持續累計時間來達成最初設定的目標，並透過累計時間的百分比、累計總數來給予獎勵或是頭銜的稱號。\n\n<center>\n\t<img src=\"/images/TTtimer/working_finish.jpg\" alt=\"TTtimer Working\" style=\"width: 200px;\"/>\n</center>\n\n以下為 APP 使用到的技術重點，有需要的同學可以在裡面尋找相關自訓。有機會的話相我想把這個 APP 上架，最為一次學習經驗。\n\n## Source Code 分享\n\nSource Code 放置在 Google Drive 上面，分享給需要範例的同學們。\n\n適用於 Andriod Studio 版本：\n[[Android APP]  TTtimer-for-AS-v1.0](https://drive.google.com/open?id=0B1p_o3Z5VQBeXzlXUlRNWExCUVE)\n\n適用於 Eclipse 版本：\n[[Android APP]  TTtimer-for-eclipse-v1.0](https://drive.google.com/open?id=0B1p_o3Z5VQBeYjM5ZEVQWVpWOWs)\n\n## 技術簡介\n\n#### 物件導向設計\n\nAPP 中，每個 `任務` 都是以一個物件包裝，包括包裝這個 `任務` 本身的資訊、進度、累計時間等等。而累計時間輸出時，可是轉換成百分比的函數，也是包裝在 PlaneToTime 的類別裡面。物件導向設計可參考的是以下主要幾個類別：\n\n* MyTimer\n* MicroTimer\n* Plan\n* PlanToTime\n\nMyTimer 和 MicroTimer 類別主要功能就是計時器，在每個計畫中都會使用到一個計時計，並且有簡化一些時間I/O的機制，主要是根據我當時自己的需求所包裝的。而 Plan 和 PlanToTime 包裝了 `計畫` 和 `有時目標間的計畫`，事實上在最後 APP 實作的時候，並沒有 `無目標時間的計畫`，也就是說類別 Plan 只是單純被 PlanToTime 繼承，作用類似於一個基底類別，其實並沒有實作的功能，這屬於我個人設計錯誤，因為一開始有構想 `無目標時間的計畫`。因此在後面會發現，底層設計的取得獎勵的方式，略有不同，僅僅因為當初規劃時我的想法岔開了。\n\n包裝這四個類別，在我專案開發中後期其為吃香，傳送資料時不太需要考慮資料格式。簡單思考：傳遞一個物件比起傳遞四個不同型別的參數，何者容易？當然是包裝好的一個物件，一次傳遞來得輕鬆方便。另外，包裝物件可以在多人開發時，資料格式的缺漏檢查，或是避免掉不必要的資料傳遞誤會與錯誤。\n\n#### 計時器\n\n計時器只有兩個原則，每秒(或是其他時間)的觸發事件，然後再撰寫自己紀錄的方式。計時器 Andriod 有預設事件，少量的計時器每秒的 tick 相當精準，不要一次開一大堆就好。也別用計時器去處理監聽事件，基本上 Andriod 大部份的物件都有自己的監聽事件，不需要自行去撰寫計時器去檢查。在 TTtimer 中牽涉到的類別如下：\n\n* MainActivity\n* TiemRiver\n* SysSet\n\n之前被問過幾次 Android App 的計時計怎麼處理，計時器的影子可以在 `Mainctivity` 中找到，當初設計是在 APP 一啟動時，背後就有一個碼表在計時，而計時計的參數被我抽取到 `TimeRiver` 和 `SysSet` 的類別中，其實 `TimeRiver` 的類別中的設定參數直接抽取到 `SysSet`，目前的方式是多個任務會共用同一個碼錶，避免每開一起一個新的任務就啟用新的碼表消耗效能。\n\n#### SQLite\n\n如果 SQLite 無法正常啟用，記得注意 Android 本身的版本是否要更新，之前個人在測試時就發生過無法啟動的狀況。情急之下用 txt 自己刻了一套類似功能的 documentation SQL。現在想想挺好笑的，結果期中考過後我發現手機系統要更新，更新好就能使用 SQLite 了，只好默默的砍掉整個手刻的 SQL。\n\n關於 SQLite 我使用在兩個部分：儲存計畫、系統參數。\n\n* PlanSQL\n* SystemSettingSQL\n\n兩者都相當直接的包裝了基本的 Sqlite 的 CRUD (新增/修改/刪除/查詢)，基本上 SQLite 在類別設計完成後，撰寫一次，確認每次 APP 開啟後跟 SQLite 的 IO 正常後，我就再也沒有修改過內部的程式碼。所以理想的話只要努力一次就好，並不需要開發途中不斷地維護那段程式碼。 SQLite 需要注意的重點是測試資料的問題。在開發時頻繁的測試過程中，程式碼除錯時會頻繁地影響到資料庫資料的變動，導致錯誤解決了卻仍然出現問題。主因是資料錯誤，產生 Garbage in garbage out 的結果。建議在開發期間每次 APP 啟動時就初始化一次資料，清空資料庫並且寫入測試用的資料，最終在 APP 發佈時只要將初始化資料的程式碼註解掉即可。\n\n另外需要注意的事情是，程式碼要有解析空資料的能力。意思是多半在測試時，資料庫內已經有測試資料，往往忽略了有可能無資料的情況，反而在拿掉測試資料後才發現 APP 啟動的一瞬間就會因為資料讀取失敗而崩潰。\n\n#### 動態新增控制項\n\n這大概是我被詢問最頻繁的項目了。處理這部分的是以下兩個類別：\n\n* AddBtn\n* ViewList\n\n動態新增控制項的步驟就是：宣告 > 設定 > 掛載。除非是要做 APP 遊戲，不然 Andriod 內建的 ListView 應該能解決大部份的問題，當初我在這塊也是修改了好幾個版本，一開始因為好玩也是手刻 ListView，再建立 Scroll view。不過內建的 ListView 和手刻的邏輯基本上是相同的，先將想要動態新增的物件製作成一份 ListItem 再由 ListView 去重複就對了。\n\n#### Android Lifecycle 生命週期\n\n![Andriod 生命週期 ](http://pic.pimg.tw/style77125tech/1369341764-3430810860.png)\n\n撰寫 Andriod APP 最重要的就是生命週期。簡而言之，生命週期就是我們在手機各種操作時，切換到 APP 畫面時對程式運行的影響，例如執行中的 APP 在按下 Home 鍵後會進入到 `onPause()` 的狀態，不同的狀態不可能讓 APP 一直處於運轉中，因此 APP 作業流程設計會圍繞著 Android Lifecycle 在運轉，也是設計的核心。但記得在 Lifecycle 中，我個人認為最不能仰賴 `onDestroy()`，仰賴關閉 APP 時才去執行，無法預測 APP 是在什麼情況下被關閉的，可能執行緒被中斷、手機沒電等等狀況。重要的資料同步，盡可能不要放在 `onDestroy` 的部分。\n\n#### 雙語系\n\nTTtiemr 支援雙語系，支援 `zh-Tw` 和 `en` 語系，根據手機設定的國籍去做辨識。在手機中抓取字串的方式都需要使用 `android:text=\"@string/show\"` 抓取，之前有聽過反映這樣相當不友善(且不容易辨識)，不過在後期翻譯時相當有趣，單純翻譯 `string` 的設定檔就可完成。如果從一開始就有遵守紀律，將對應的字串寫在設定檔內，在專案末期好好享受輕鬆翻譯 APP 語言的成果吧!\n\n#### 多解析度圖片\n\n在多解析度圖片這部分，我個人處理得相當糟糕，當初在 PC 上測試時雨手機上測試時發現差距極大，因此我大量的改用百分比去做設計。解決問題後我就沒有再去對多種解析度的螢幕下去做設計。\n\n#### Animation 動畫效果\n\n在 `WorkingActivity` 可以大量使用到動畫，Android 的動畫使用大致上是：宣告 > 設定參數 > 啟動。需要注意的是 Animation 的狀態，需要將正確的資料流操作掛載載正確的 Animation 事件上面，避免掉發生動畫時件不同步或是執行順序有問題的情況。Animation 玩起來相當有趣且有成就看，相當推薦大家玩玩。\n\n![screen shot](/images/TTtimer/demo.jpg)\n\n## 檔案簡介\n\npath: src/main/java/tw/com/oit/andrew/\n\n##### myclass/MyTimer\n\n計時計類別，主要是依照需求包裝了計時器去配合之後的 Andriod time tick。\n\n##### myclass/MicroTimer\n\n繼承了 MyTimer，加入了秒數的欄位，最後這兩個計時器使用的類別會被包在 Plan 和 PlanToTime 中使用。\n\n#### myclass/Plan\n\n包裝了每個計畫項目資訊，屬於 PlanToTime 的父類別，絕大多數重要的功能也是在這裡。\n\n#### myclass/PlanToTime\n\n在計畫項目資訊增加了目標時間，之後的 Activity 中使用的都是這個 class。兩個 Plan 相關的 class 是整個 APP 中 CP 最高的，但也是被反覆修改最多次的，良好的物件設計讓我在整個 APP 開發的後期有了相當不錯的資料控管，我能清楚的掌握資料的傳輸。\n\n#### system/Notify\n\n包裝了所有使用的通知視窗(Dialog)，從外部可以輕鬆的呼叫視窗，僅需要傳入必要的字串需求即可。\n\n#### system/SysSet\n\n系統設定檔。應該與 TimeRiver 合併。\n\n#### system/TimeRiver\n\n系統設定檔。主要是針對計時器的部分，這部分的設定會被記錄在 SQLite 中，確保每次重新啟動時都會是使用者設定的值。\n\n#### tenthousandtimer/MainActivity\n\n主要介面的操作，拿讀取進來的資料動態新增控制項，並且宣告、啟動計時器。\n\n#### tenthousandtimer/MetalsActivity\n\n單純檢視獎牌與頭銜等訊息，可以視為單純的 ListView Demo。\n\n#### tenthousandtimer/MyMenu\n\n針對 Menu 包裝操作，命名並沒有使用 Activity 是用來區別這個是一包裝操作的 class 並非直接掛載在頁面上的。\n\n#### tenthousandtimer/SettingActivity\n\n設定頁面，設邊使用了固定的控制項，然後將設定的資訊寫在上面的 system 類別中，並儲存在 SQLite。\n\n#### tenthousandtimer/WelcomActivity\n\n歡迎界面，在裡面載入 SQLite 的資料，其實這沒有必要，在 MainActivity 中載入即可，單純為了好看。\n\n#### tenthousandtimer/WorkingActivity\n\n在 WorkingActivity 中大量的使用了 Animation，如果在事後才掛上 Animation 容易導致先前設計的資料流多少出現錯誤。仔細研究 Animation 與主程式非同步的關係，就能解決這個問題，並不至於需要 APP 大改寫。\n\n#### tttsql/PlanSQL & tttsql/SystemSettingSQL\n\n包裝了 SQLite 的操作，包含了整批資料的 CRUD，這邊對於 SQLite 的操作相當基本，依據我的印象，資料更新的操作是直接用覆蓋的。基本上也不會出錯，在小量的資料下，效能也沒有問題。PlanSQL 和 SystemSettingSQL 分別包裝了不同的資料而已，基本上觀念完全相同。皆是在載入畫面時會讀取資料。記得注意 Andriod 的版本問題，另外 SQLite 自己也有版本問題，請確保測試資料正確，紀律性的測試可以省去很多麻煩。\n\n#### viewlist/AddBtn & viewlist/ViewList\n\n這兩個類別都包裝了動態新增物件的功能，新增動態物件其實相當麻煩，要考慮物件本身、事件、資料，因此我會盡可能將資訊都封裝在類別內，屆時只需要傳入必要參數即可，如任務有用物件包裝好，那理所當然直接傳遞物件即可。\n\n![screen shot](/images/TTtimer/demo2.jpg)\n\n## 結語\n\nTTtiemr 亦有存在問題，目前我個人也不知道該如何解決。TTtimer 似乎在重複開啟太多任務後，會導致手機效能降低，吃掉太多CPU或記憶體。但此部分已經超過我對 Andriod APP 的認知，需要更專業的技術。但 TTtimer 所使用的技術，除了連線的需求之外，能滿足絕大部份的 APP 開發。這次的 Andriod APP - TTtimer 分享希望能幫助到大家，如果有任何問題也可以 [Facebook](https://www.facebook.com/profile.php?id=100001317746154) 敲我或是寄信給我詢問細節，但請標明是誰詢問與相關的問題資訊。\n","source":"_posts/20150819_APP_TTtimerForOIT.md","raw":"title: Android App - TTtimer\ndate: 2015-08-19 15:46:12\ntags:\n- Android\n- Java\n- 作品集\ncategories: 作品集\ncomments: false\n---\n\n<center>\n![TTtimer](/images/TTtimer/ic_launcher.png)\n</center>\n\n名稱：TTtimer\n類型：Andriod App / Java, 未上架\n時間：2015/1 (大三上學期)\n用途：期末作業\n\n## 簡介\n\nAndroid APP - TTtime 是我在大三上學期修 Amy 老師 Java 課程的期末作品。這隻 APP 大概是我個人最喜歡期末作品之一，包括結構和設計是我個人最喜歡的，當時我有不少的時間與不曉得發揮空間。TTtimer 的設計概念出自於 10,000 小時，意指在某一個專業區域中努力 10,000 小時才能成為該專業領域中的佼佼者(這個理念最後被我個人推翻了)。而 TTtimer 即是此類型的計時器，選擇目標的專業項目後，持續累計時間來達成最初設定的目標，並透過累計時間的百分比、累計總數來給予獎勵或是頭銜的稱號。\n\n<center>\n\t<img src=\"/images/TTtimer/working_finish.jpg\" alt=\"TTtimer Working\" style=\"width: 200px;\"/>\n</center>\n\n以下為 APP 使用到的技術重點，有需要的同學可以在裡面尋找相關自訓。有機會的話相我想把這個 APP 上架，最為一次學習經驗。\n\n## Source Code 分享\n\nSource Code 放置在 Google Drive 上面，分享給需要範例的同學們。\n\n適用於 Andriod Studio 版本：\n[[Android APP]  TTtimer-for-AS-v1.0](https://drive.google.com/open?id=0B1p_o3Z5VQBeXzlXUlRNWExCUVE)\n\n適用於 Eclipse 版本：\n[[Android APP]  TTtimer-for-eclipse-v1.0](https://drive.google.com/open?id=0B1p_o3Z5VQBeYjM5ZEVQWVpWOWs)\n\n## 技術簡介\n\n#### 物件導向設計\n\nAPP 中，每個 `任務` 都是以一個物件包裝，包括包裝這個 `任務` 本身的資訊、進度、累計時間等等。而累計時間輸出時，可是轉換成百分比的函數，也是包裝在 PlaneToTime 的類別裡面。物件導向設計可參考的是以下主要幾個類別：\n\n* MyTimer\n* MicroTimer\n* Plan\n* PlanToTime\n\nMyTimer 和 MicroTimer 類別主要功能就是計時器，在每個計畫中都會使用到一個計時計，並且有簡化一些時間I/O的機制，主要是根據我當時自己的需求所包裝的。而 Plan 和 PlanToTime 包裝了 `計畫` 和 `有時目標間的計畫`，事實上在最後 APP 實作的時候，並沒有 `無目標時間的計畫`，也就是說類別 Plan 只是單純被 PlanToTime 繼承，作用類似於一個基底類別，其實並沒有實作的功能，這屬於我個人設計錯誤，因為一開始有構想 `無目標時間的計畫`。因此在後面會發現，底層設計的取得獎勵的方式，略有不同，僅僅因為當初規劃時我的想法岔開了。\n\n包裝這四個類別，在我專案開發中後期其為吃香，傳送資料時不太需要考慮資料格式。簡單思考：傳遞一個物件比起傳遞四個不同型別的參數，何者容易？當然是包裝好的一個物件，一次傳遞來得輕鬆方便。另外，包裝物件可以在多人開發時，資料格式的缺漏檢查，或是避免掉不必要的資料傳遞誤會與錯誤。\n\n#### 計時器\n\n計時器只有兩個原則，每秒(或是其他時間)的觸發事件，然後再撰寫自己紀錄的方式。計時器 Andriod 有預設事件，少量的計時器每秒的 tick 相當精準，不要一次開一大堆就好。也別用計時器去處理監聽事件，基本上 Andriod 大部份的物件都有自己的監聽事件，不需要自行去撰寫計時器去檢查。在 TTtimer 中牽涉到的類別如下：\n\n* MainActivity\n* TiemRiver\n* SysSet\n\n之前被問過幾次 Android App 的計時計怎麼處理，計時器的影子可以在 `Mainctivity` 中找到，當初設計是在 APP 一啟動時，背後就有一個碼表在計時，而計時計的參數被我抽取到 `TimeRiver` 和 `SysSet` 的類別中，其實 `TimeRiver` 的類別中的設定參數直接抽取到 `SysSet`，目前的方式是多個任務會共用同一個碼錶，避免每開一起一個新的任務就啟用新的碼表消耗效能。\n\n#### SQLite\n\n如果 SQLite 無法正常啟用，記得注意 Android 本身的版本是否要更新，之前個人在測試時就發生過無法啟動的狀況。情急之下用 txt 自己刻了一套類似功能的 documentation SQL。現在想想挺好笑的，結果期中考過後我發現手機系統要更新，更新好就能使用 SQLite 了，只好默默的砍掉整個手刻的 SQL。\n\n關於 SQLite 我使用在兩個部分：儲存計畫、系統參數。\n\n* PlanSQL\n* SystemSettingSQL\n\n兩者都相當直接的包裝了基本的 Sqlite 的 CRUD (新增/修改/刪除/查詢)，基本上 SQLite 在類別設計完成後，撰寫一次，確認每次 APP 開啟後跟 SQLite 的 IO 正常後，我就再也沒有修改過內部的程式碼。所以理想的話只要努力一次就好，並不需要開發途中不斷地維護那段程式碼。 SQLite 需要注意的重點是測試資料的問題。在開發時頻繁的測試過程中，程式碼除錯時會頻繁地影響到資料庫資料的變動，導致錯誤解決了卻仍然出現問題。主因是資料錯誤，產生 Garbage in garbage out 的結果。建議在開發期間每次 APP 啟動時就初始化一次資料，清空資料庫並且寫入測試用的資料，最終在 APP 發佈時只要將初始化資料的程式碼註解掉即可。\n\n另外需要注意的事情是，程式碼要有解析空資料的能力。意思是多半在測試時，資料庫內已經有測試資料，往往忽略了有可能無資料的情況，反而在拿掉測試資料後才發現 APP 啟動的一瞬間就會因為資料讀取失敗而崩潰。\n\n#### 動態新增控制項\n\n這大概是我被詢問最頻繁的項目了。處理這部分的是以下兩個類別：\n\n* AddBtn\n* ViewList\n\n動態新增控制項的步驟就是：宣告 > 設定 > 掛載。除非是要做 APP 遊戲，不然 Andriod 內建的 ListView 應該能解決大部份的問題，當初我在這塊也是修改了好幾個版本，一開始因為好玩也是手刻 ListView，再建立 Scroll view。不過內建的 ListView 和手刻的邏輯基本上是相同的，先將想要動態新增的物件製作成一份 ListItem 再由 ListView 去重複就對了。\n\n#### Android Lifecycle 生命週期\n\n![Andriod 生命週期 ](http://pic.pimg.tw/style77125tech/1369341764-3430810860.png)\n\n撰寫 Andriod APP 最重要的就是生命週期。簡而言之，生命週期就是我們在手機各種操作時，切換到 APP 畫面時對程式運行的影響，例如執行中的 APP 在按下 Home 鍵後會進入到 `onPause()` 的狀態，不同的狀態不可能讓 APP 一直處於運轉中，因此 APP 作業流程設計會圍繞著 Android Lifecycle 在運轉，也是設計的核心。但記得在 Lifecycle 中，我個人認為最不能仰賴 `onDestroy()`，仰賴關閉 APP 時才去執行，無法預測 APP 是在什麼情況下被關閉的，可能執行緒被中斷、手機沒電等等狀況。重要的資料同步，盡可能不要放在 `onDestroy` 的部分。\n\n#### 雙語系\n\nTTtiemr 支援雙語系，支援 `zh-Tw` 和 `en` 語系，根據手機設定的國籍去做辨識。在手機中抓取字串的方式都需要使用 `android:text=\"@string/show\"` 抓取，之前有聽過反映這樣相當不友善(且不容易辨識)，不過在後期翻譯時相當有趣，單純翻譯 `string` 的設定檔就可完成。如果從一開始就有遵守紀律，將對應的字串寫在設定檔內，在專案末期好好享受輕鬆翻譯 APP 語言的成果吧!\n\n#### 多解析度圖片\n\n在多解析度圖片這部分，我個人處理得相當糟糕，當初在 PC 上測試時雨手機上測試時發現差距極大，因此我大量的改用百分比去做設計。解決問題後我就沒有再去對多種解析度的螢幕下去做設計。\n\n#### Animation 動畫效果\n\n在 `WorkingActivity` 可以大量使用到動畫，Android 的動畫使用大致上是：宣告 > 設定參數 > 啟動。需要注意的是 Animation 的狀態，需要將正確的資料流操作掛載載正確的 Animation 事件上面，避免掉發生動畫時件不同步或是執行順序有問題的情況。Animation 玩起來相當有趣且有成就看，相當推薦大家玩玩。\n\n![screen shot](/images/TTtimer/demo.jpg)\n\n## 檔案簡介\n\npath: src/main/java/tw/com/oit/andrew/\n\n##### myclass/MyTimer\n\n計時計類別，主要是依照需求包裝了計時器去配合之後的 Andriod time tick。\n\n##### myclass/MicroTimer\n\n繼承了 MyTimer，加入了秒數的欄位，最後這兩個計時器使用的類別會被包在 Plan 和 PlanToTime 中使用。\n\n#### myclass/Plan\n\n包裝了每個計畫項目資訊，屬於 PlanToTime 的父類別，絕大多數重要的功能也是在這裡。\n\n#### myclass/PlanToTime\n\n在計畫項目資訊增加了目標時間，之後的 Activity 中使用的都是這個 class。兩個 Plan 相關的 class 是整個 APP 中 CP 最高的，但也是被反覆修改最多次的，良好的物件設計讓我在整個 APP 開發的後期有了相當不錯的資料控管，我能清楚的掌握資料的傳輸。\n\n#### system/Notify\n\n包裝了所有使用的通知視窗(Dialog)，從外部可以輕鬆的呼叫視窗，僅需要傳入必要的字串需求即可。\n\n#### system/SysSet\n\n系統設定檔。應該與 TimeRiver 合併。\n\n#### system/TimeRiver\n\n系統設定檔。主要是針對計時器的部分，這部分的設定會被記錄在 SQLite 中，確保每次重新啟動時都會是使用者設定的值。\n\n#### tenthousandtimer/MainActivity\n\n主要介面的操作，拿讀取進來的資料動態新增控制項，並且宣告、啟動計時器。\n\n#### tenthousandtimer/MetalsActivity\n\n單純檢視獎牌與頭銜等訊息，可以視為單純的 ListView Demo。\n\n#### tenthousandtimer/MyMenu\n\n針對 Menu 包裝操作，命名並沒有使用 Activity 是用來區別這個是一包裝操作的 class 並非直接掛載在頁面上的。\n\n#### tenthousandtimer/SettingActivity\n\n設定頁面，設邊使用了固定的控制項，然後將設定的資訊寫在上面的 system 類別中，並儲存在 SQLite。\n\n#### tenthousandtimer/WelcomActivity\n\n歡迎界面，在裡面載入 SQLite 的資料，其實這沒有必要，在 MainActivity 中載入即可，單純為了好看。\n\n#### tenthousandtimer/WorkingActivity\n\n在 WorkingActivity 中大量的使用了 Animation，如果在事後才掛上 Animation 容易導致先前設計的資料流多少出現錯誤。仔細研究 Animation 與主程式非同步的關係，就能解決這個問題，並不至於需要 APP 大改寫。\n\n#### tttsql/PlanSQL & tttsql/SystemSettingSQL\n\n包裝了 SQLite 的操作，包含了整批資料的 CRUD，這邊對於 SQLite 的操作相當基本，依據我的印象，資料更新的操作是直接用覆蓋的。基本上也不會出錯，在小量的資料下，效能也沒有問題。PlanSQL 和 SystemSettingSQL 分別包裝了不同的資料而已，基本上觀念完全相同。皆是在載入畫面時會讀取資料。記得注意 Andriod 的版本問題，另外 SQLite 自己也有版本問題，請確保測試資料正確，紀律性的測試可以省去很多麻煩。\n\n#### viewlist/AddBtn & viewlist/ViewList\n\n這兩個類別都包裝了動態新增物件的功能，新增動態物件其實相當麻煩，要考慮物件本身、事件、資料，因此我會盡可能將資訊都封裝在類別內，屆時只需要傳入必要參數即可，如任務有用物件包裝好，那理所當然直接傳遞物件即可。\n\n![screen shot](/images/TTtimer/demo2.jpg)\n\n## 結語\n\nTTtiemr 亦有存在問題，目前我個人也不知道該如何解決。TTtimer 似乎在重複開啟太多任務後，會導致手機效能降低，吃掉太多CPU或記憶體。但此部分已經超過我對 Andriod APP 的認知，需要更專業的技術。但 TTtimer 所使用的技術，除了連線的需求之外，能滿足絕大部份的 APP 開發。這次的 Andriod APP - TTtimer 分享希望能幫助到大家，如果有任何問題也可以 [Facebook](https://www.facebook.com/profile.php?id=100001317746154) 敲我或是寄信給我詢問細節，但請標明是誰詢問與相關的問題資訊。\n","slug":"20150819_APP_TTtimerForOIT","published":1,"updated":"2017-01-31T01:46:15.000Z","layout":"post","photos":[],"link":"","_id":"ciykykomb0000iwu08xr8c1vb","content":"<center><br><img src=\"/images/TTtimer/ic_launcher.png\" alt=\"TTtimer\"><br></center>\n\n<p>名稱：TTtimer<br>類型：Andriod App / Java, 未上架<br>時間：2015/1 (大三上學期)<br>用途：期末作業</p>\n<h2 id=\"簡介\">簡介</h2><p>Android APP - TTtime 是我在大三上學期修 Amy 老師 Java 課程的期末作品。這隻 APP 大概是我個人最喜歡期末作品之一，包括結構和設計是我個人最喜歡的，當時我有不少的時間與不曉得發揮空間。TTtimer 的設計概念出自於 10,000 小時，意指在某一個專業區域中努力 10,000 小時才能成為該專業領域中的佼佼者(這個理念最後被我個人推翻了)。而 TTtimer 即是此類型的計時器，選擇目標的專業項目後，持續累計時間來達成最初設定的目標，並透過累計時間的百分比、累計總數來給予獎勵或是頭銜的稱號。</p>\n<center><br>    <img src=\"/images/TTtimer/working_finish.jpg\" alt=\"TTtimer Working\" style=\"width: 200px;\"><br></center>\n\n<p>以下為 APP 使用到的技術重點，有需要的同學可以在裡面尋找相關自訓。有機會的話相我想把這個 APP 上架，最為一次學習經驗。</p>\n<h2 id=\"Source_Code_分享\">Source Code 分享</h2><p>Source Code 放置在 Google Drive 上面，分享給需要範例的同學們。</p>\n<p>適用於 Andriod Studio 版本：<br><a href=\"https://drive.google.com/open?id=0B1p_o3Z5VQBeXzlXUlRNWExCUVE\" target=\"_blank\" rel=\"external\">[Android APP]  TTtimer-for-AS-v1.0</a></p>\n<p>適用於 Eclipse 版本：<br><a href=\"https://drive.google.com/open?id=0B1p_o3Z5VQBeYjM5ZEVQWVpWOWs\" target=\"_blank\" rel=\"external\">[Android APP]  TTtimer-for-eclipse-v1.0</a></p>\n<h2 id=\"技術簡介\">技術簡介</h2><h4 id=\"物件導向設計\">物件導向設計</h4><p>APP 中，每個 <code>任務</code> 都是以一個物件包裝，包括包裝這個 <code>任務</code> 本身的資訊、進度、累計時間等等。而累計時間輸出時，可是轉換成百分比的函數，也是包裝在 PlaneToTime 的類別裡面。物件導向設計可參考的是以下主要幾個類別：</p>\n<ul>\n<li>MyTimer</li>\n<li>MicroTimer</li>\n<li>Plan</li>\n<li>PlanToTime</li>\n</ul>\n<p>MyTimer 和 MicroTimer 類別主要功能就是計時器，在每個計畫中都會使用到一個計時計，並且有簡化一些時間I/O的機制，主要是根據我當時自己的需求所包裝的。而 Plan 和 PlanToTime 包裝了 <code>計畫</code> 和 <code>有時目標間的計畫</code>，事實上在最後 APP 實作的時候，並沒有 <code>無目標時間的計畫</code>，也就是說類別 Plan 只是單純被 PlanToTime 繼承，作用類似於一個基底類別，其實並沒有實作的功能，這屬於我個人設計錯誤，因為一開始有構想 <code>無目標時間的計畫</code>。因此在後面會發現，底層設計的取得獎勵的方式，略有不同，僅僅因為當初規劃時我的想法岔開了。</p>\n<p>包裝這四個類別，在我專案開發中後期其為吃香，傳送資料時不太需要考慮資料格式。簡單思考：傳遞一個物件比起傳遞四個不同型別的參數，何者容易？當然是包裝好的一個物件，一次傳遞來得輕鬆方便。另外，包裝物件可以在多人開發時，資料格式的缺漏檢查，或是避免掉不必要的資料傳遞誤會與錯誤。</p>\n<h4 id=\"計時器\">計時器</h4><p>計時器只有兩個原則，每秒(或是其他時間)的觸發事件，然後再撰寫自己紀錄的方式。計時器 Andriod 有預設事件，少量的計時器每秒的 tick 相當精準，不要一次開一大堆就好。也別用計時器去處理監聽事件，基本上 Andriod 大部份的物件都有自己的監聽事件，不需要自行去撰寫計時器去檢查。在 TTtimer 中牽涉到的類別如下：</p>\n<ul>\n<li>MainActivity</li>\n<li>TiemRiver</li>\n<li>SysSet</li>\n</ul>\n<p>之前被問過幾次 Android App 的計時計怎麼處理，計時器的影子可以在 <code>Mainctivity</code> 中找到，當初設計是在 APP 一啟動時，背後就有一個碼表在計時，而計時計的參數被我抽取到 <code>TimeRiver</code> 和 <code>SysSet</code> 的類別中，其實 <code>TimeRiver</code> 的類別中的設定參數直接抽取到 <code>SysSet</code>，目前的方式是多個任務會共用同一個碼錶，避免每開一起一個新的任務就啟用新的碼表消耗效能。</p>\n<h4 id=\"SQLite\">SQLite</h4><p>如果 SQLite 無法正常啟用，記得注意 Android 本身的版本是否要更新，之前個人在測試時就發生過無法啟動的狀況。情急之下用 txt 自己刻了一套類似功能的 documentation SQL。現在想想挺好笑的，結果期中考過後我發現手機系統要更新，更新好就能使用 SQLite 了，只好默默的砍掉整個手刻的 SQL。</p>\n<p>關於 SQLite 我使用在兩個部分：儲存計畫、系統參數。</p>\n<ul>\n<li>PlanSQL</li>\n<li>SystemSettingSQL</li>\n</ul>\n<p>兩者都相當直接的包裝了基本的 Sqlite 的 CRUD (新增/修改/刪除/查詢)，基本上 SQLite 在類別設計完成後，撰寫一次，確認每次 APP 開啟後跟 SQLite 的 IO 正常後，我就再也沒有修改過內部的程式碼。所以理想的話只要努力一次就好，並不需要開發途中不斷地維護那段程式碼。 SQLite 需要注意的重點是測試資料的問題。在開發時頻繁的測試過程中，程式碼除錯時會頻繁地影響到資料庫資料的變動，導致錯誤解決了卻仍然出現問題。主因是資料錯誤，產生 Garbage in garbage out 的結果。建議在開發期間每次 APP 啟動時就初始化一次資料，清空資料庫並且寫入測試用的資料，最終在 APP 發佈時只要將初始化資料的程式碼註解掉即可。</p>\n<p>另外需要注意的事情是，程式碼要有解析空資料的能力。意思是多半在測試時，資料庫內已經有測試資料，往往忽略了有可能無資料的情況，反而在拿掉測試資料後才發現 APP 啟動的一瞬間就會因為資料讀取失敗而崩潰。</p>\n<h4 id=\"動態新增控制項\">動態新增控制項</h4><p>這大概是我被詢問最頻繁的項目了。處理這部分的是以下兩個類別：</p>\n<ul>\n<li>AddBtn</li>\n<li>ViewList</li>\n</ul>\n<p>動態新增控制項的步驟就是：宣告 &gt; 設定 &gt; 掛載。除非是要做 APP 遊戲，不然 Andriod 內建的 ListView 應該能解決大部份的問題，當初我在這塊也是修改了好幾個版本，一開始因為好玩也是手刻 ListView，再建立 Scroll view。不過內建的 ListView 和手刻的邏輯基本上是相同的，先將想要動態新增的物件製作成一份 ListItem 再由 ListView 去重複就對了。</p>\n<h4 id=\"Android_Lifecycle_生命週期\">Android Lifecycle 生命週期</h4><p><img src=\"http://pic.pimg.tw/style77125tech/1369341764-3430810860.png\" alt=\"Andriod 生命週期 \"></p>\n<p>撰寫 Andriod APP 最重要的就是生命週期。簡而言之，生命週期就是我們在手機各種操作時，切換到 APP 畫面時對程式運行的影響，例如執行中的 APP 在按下 Home 鍵後會進入到 <code>onPause()</code> 的狀態，不同的狀態不可能讓 APP 一直處於運轉中，因此 APP 作業流程設計會圍繞著 Android Lifecycle 在運轉，也是設計的核心。但記得在 Lifecycle 中，我個人認為最不能仰賴 <code>onDestroy()</code>，仰賴關閉 APP 時才去執行，無法預測 APP 是在什麼情況下被關閉的，可能執行緒被中斷、手機沒電等等狀況。重要的資料同步，盡可能不要放在 <code>onDestroy</code> 的部分。</p>\n<h4 id=\"雙語系\">雙語系</h4><p>TTtiemr 支援雙語系，支援 <code>zh-Tw</code> 和 <code>en</code> 語系，根據手機設定的國籍去做辨識。在手機中抓取字串的方式都需要使用 <code>android:text=&quot;@string/show&quot;</code> 抓取，之前有聽過反映這樣相當不友善(且不容易辨識)，不過在後期翻譯時相當有趣，單純翻譯 <code>string</code> 的設定檔就可完成。如果從一開始就有遵守紀律，將對應的字串寫在設定檔內，在專案末期好好享受輕鬆翻譯 APP 語言的成果吧!</p>\n<h4 id=\"多解析度圖片\">多解析度圖片</h4><p>在多解析度圖片這部分，我個人處理得相當糟糕，當初在 PC 上測試時雨手機上測試時發現差距極大，因此我大量的改用百分比去做設計。解決問題後我就沒有再去對多種解析度的螢幕下去做設計。</p>\n<h4 id=\"Animation_動畫效果\">Animation 動畫效果</h4><p>在 <code>WorkingActivity</code> 可以大量使用到動畫，Android 的動畫使用大致上是：宣告 &gt; 設定參數 &gt; 啟動。需要注意的是 Animation 的狀態，需要將正確的資料流操作掛載載正確的 Animation 事件上面，避免掉發生動畫時件不同步或是執行順序有問題的情況。Animation 玩起來相當有趣且有成就看，相當推薦大家玩玩。</p>\n<p><img src=\"/images/TTtimer/demo.jpg\" alt=\"screen shot\"></p>\n<h2 id=\"檔案簡介\">檔案簡介</h2><p>path: src/main/java/tw/com/oit/andrew/</p>\n<h5 id=\"myclass/MyTimer\">myclass/MyTimer</h5><p>計時計類別，主要是依照需求包裝了計時器去配合之後的 Andriod time tick。</p>\n<h5 id=\"myclass/MicroTimer\">myclass/MicroTimer</h5><p>繼承了 MyTimer，加入了秒數的欄位，最後這兩個計時器使用的類別會被包在 Plan 和 PlanToTime 中使用。</p>\n<h4 id=\"myclass/Plan\">myclass/Plan</h4><p>包裝了每個計畫項目資訊，屬於 PlanToTime 的父類別，絕大多數重要的功能也是在這裡。</p>\n<h4 id=\"myclass/PlanToTime\">myclass/PlanToTime</h4><p>在計畫項目資訊增加了目標時間，之後的 Activity 中使用的都是這個 class。兩個 Plan 相關的 class 是整個 APP 中 CP 最高的，但也是被反覆修改最多次的，良好的物件設計讓我在整個 APP 開發的後期有了相當不錯的資料控管，我能清楚的掌握資料的傳輸。</p>\n<h4 id=\"system/Notify\">system/Notify</h4><p>包裝了所有使用的通知視窗(Dialog)，從外部可以輕鬆的呼叫視窗，僅需要傳入必要的字串需求即可。</p>\n<h4 id=\"system/SysSet\">system/SysSet</h4><p>系統設定檔。應該與 TimeRiver 合併。</p>\n<h4 id=\"system/TimeRiver\">system/TimeRiver</h4><p>系統設定檔。主要是針對計時器的部分，這部分的設定會被記錄在 SQLite 中，確保每次重新啟動時都會是使用者設定的值。</p>\n<h4 id=\"tenthousandtimer/MainActivity\">tenthousandtimer/MainActivity</h4><p>主要介面的操作，拿讀取進來的資料動態新增控制項，並且宣告、啟動計時器。</p>\n<h4 id=\"tenthousandtimer/MetalsActivity\">tenthousandtimer/MetalsActivity</h4><p>單純檢視獎牌與頭銜等訊息，可以視為單純的 ListView Demo。</p>\n<h4 id=\"tenthousandtimer/MyMenu\">tenthousandtimer/MyMenu</h4><p>針對 Menu 包裝操作，命名並沒有使用 Activity 是用來區別這個是一包裝操作的 class 並非直接掛載在頁面上的。</p>\n<h4 id=\"tenthousandtimer/SettingActivity\">tenthousandtimer/SettingActivity</h4><p>設定頁面，設邊使用了固定的控制項，然後將設定的資訊寫在上面的 system 類別中，並儲存在 SQLite。</p>\n<h4 id=\"tenthousandtimer/WelcomActivity\">tenthousandtimer/WelcomActivity</h4><p>歡迎界面，在裡面載入 SQLite 的資料，其實這沒有必要，在 MainActivity 中載入即可，單純為了好看。</p>\n<h4 id=\"tenthousandtimer/WorkingActivity\">tenthousandtimer/WorkingActivity</h4><p>在 WorkingActivity 中大量的使用了 Animation，如果在事後才掛上 Animation 容易導致先前設計的資料流多少出現錯誤。仔細研究 Animation 與主程式非同步的關係，就能解決這個問題，並不至於需要 APP 大改寫。</p>\n<h4 id=\"tttsql/PlanSQL_&amp;_tttsql/SystemSettingSQL\">tttsql/PlanSQL &amp; tttsql/SystemSettingSQL</h4><p>包裝了 SQLite 的操作，包含了整批資料的 CRUD，這邊對於 SQLite 的操作相當基本，依據我的印象，資料更新的操作是直接用覆蓋的。基本上也不會出錯，在小量的資料下，效能也沒有問題。PlanSQL 和 SystemSettingSQL 分別包裝了不同的資料而已，基本上觀念完全相同。皆是在載入畫面時會讀取資料。記得注意 Andriod 的版本問題，另外 SQLite 自己也有版本問題，請確保測試資料正確，紀律性的測試可以省去很多麻煩。</p>\n<h4 id=\"viewlist/AddBtn_&amp;_viewlist/ViewList\">viewlist/AddBtn &amp; viewlist/ViewList</h4><p>這兩個類別都包裝了動態新增物件的功能，新增動態物件其實相當麻煩，要考慮物件本身、事件、資料，因此我會盡可能將資訊都封裝在類別內，屆時只需要傳入必要參數即可，如任務有用物件包裝好，那理所當然直接傳遞物件即可。</p>\n<p><img src=\"/images/TTtimer/demo2.jpg\" alt=\"screen shot\"></p>\n<h2 id=\"結語\">結語</h2><p>TTtiemr 亦有存在問題，目前我個人也不知道該如何解決。TTtimer 似乎在重複開啟太多任務後，會導致手機效能降低，吃掉太多CPU或記憶體。但此部分已經超過我對 Andriod APP 的認知，需要更專業的技術。但 TTtimer 所使用的技術，除了連線的需求之外，能滿足絕大部份的 APP 開發。這次的 Andriod APP - TTtimer 分享希望能幫助到大家，如果有任何問題也可以 <a href=\"https://www.facebook.com/profile.php?id=100001317746154\" target=\"_blank\" rel=\"external\">Facebook</a> 敲我或是寄信給我詢問細節，但請標明是誰詢問與相關的問題資訊。</p>\n","excerpt":"","more":"<center><br><img src=\"/images/TTtimer/ic_launcher.png\" alt=\"TTtimer\"><br></center>\n\n<p>名稱：TTtimer<br>類型：Andriod App / Java, 未上架<br>時間：2015/1 (大三上學期)<br>用途：期末作業</p>\n<h2 id=\"簡介\">簡介</h2><p>Android APP - TTtime 是我在大三上學期修 Amy 老師 Java 課程的期末作品。這隻 APP 大概是我個人最喜歡期末作品之一，包括結構和設計是我個人最喜歡的，當時我有不少的時間與不曉得發揮空間。TTtimer 的設計概念出自於 10,000 小時，意指在某一個專業區域中努力 10,000 小時才能成為該專業領域中的佼佼者(這個理念最後被我個人推翻了)。而 TTtimer 即是此類型的計時器，選擇目標的專業項目後，持續累計時間來達成最初設定的目標，並透過累計時間的百分比、累計總數來給予獎勵或是頭銜的稱號。</p>\n<center><br>    <img src=\"/images/TTtimer/working_finish.jpg\" alt=\"TTtimer Working\" style=\"width: 200px;\"/><br></center>\n\n<p>以下為 APP 使用到的技術重點，有需要的同學可以在裡面尋找相關自訓。有機會的話相我想把這個 APP 上架，最為一次學習經驗。</p>\n<h2 id=\"Source_Code_分享\">Source Code 分享</h2><p>Source Code 放置在 Google Drive 上面，分享給需要範例的同學們。</p>\n<p>適用於 Andriod Studio 版本：<br><a href=\"https://drive.google.com/open?id=0B1p_o3Z5VQBeXzlXUlRNWExCUVE\">[Android APP]  TTtimer-for-AS-v1.0</a></p>\n<p>適用於 Eclipse 版本：<br><a href=\"https://drive.google.com/open?id=0B1p_o3Z5VQBeYjM5ZEVQWVpWOWs\">[Android APP]  TTtimer-for-eclipse-v1.0</a></p>\n<h2 id=\"技術簡介\">技術簡介</h2><h4 id=\"物件導向設計\">物件導向設計</h4><p>APP 中，每個 <code>任務</code> 都是以一個物件包裝，包括包裝這個 <code>任務</code> 本身的資訊、進度、累計時間等等。而累計時間輸出時，可是轉換成百分比的函數，也是包裝在 PlaneToTime 的類別裡面。物件導向設計可參考的是以下主要幾個類別：</p>\n<ul>\n<li>MyTimer</li>\n<li>MicroTimer</li>\n<li>Plan</li>\n<li>PlanToTime</li>\n</ul>\n<p>MyTimer 和 MicroTimer 類別主要功能就是計時器，在每個計畫中都會使用到一個計時計，並且有簡化一些時間I/O的機制，主要是根據我當時自己的需求所包裝的。而 Plan 和 PlanToTime 包裝了 <code>計畫</code> 和 <code>有時目標間的計畫</code>，事實上在最後 APP 實作的時候，並沒有 <code>無目標時間的計畫</code>，也就是說類別 Plan 只是單純被 PlanToTime 繼承，作用類似於一個基底類別，其實並沒有實作的功能，這屬於我個人設計錯誤，因為一開始有構想 <code>無目標時間的計畫</code>。因此在後面會發現，底層設計的取得獎勵的方式，略有不同，僅僅因為當初規劃時我的想法岔開了。</p>\n<p>包裝這四個類別，在我專案開發中後期其為吃香，傳送資料時不太需要考慮資料格式。簡單思考：傳遞一個物件比起傳遞四個不同型別的參數，何者容易？當然是包裝好的一個物件，一次傳遞來得輕鬆方便。另外，包裝物件可以在多人開發時，資料格式的缺漏檢查，或是避免掉不必要的資料傳遞誤會與錯誤。</p>\n<h4 id=\"計時器\">計時器</h4><p>計時器只有兩個原則，每秒(或是其他時間)的觸發事件，然後再撰寫自己紀錄的方式。計時器 Andriod 有預設事件，少量的計時器每秒的 tick 相當精準，不要一次開一大堆就好。也別用計時器去處理監聽事件，基本上 Andriod 大部份的物件都有自己的監聽事件，不需要自行去撰寫計時器去檢查。在 TTtimer 中牽涉到的類別如下：</p>\n<ul>\n<li>MainActivity</li>\n<li>TiemRiver</li>\n<li>SysSet</li>\n</ul>\n<p>之前被問過幾次 Android App 的計時計怎麼處理，計時器的影子可以在 <code>Mainctivity</code> 中找到，當初設計是在 APP 一啟動時，背後就有一個碼表在計時，而計時計的參數被我抽取到 <code>TimeRiver</code> 和 <code>SysSet</code> 的類別中，其實 <code>TimeRiver</code> 的類別中的設定參數直接抽取到 <code>SysSet</code>，目前的方式是多個任務會共用同一個碼錶，避免每開一起一個新的任務就啟用新的碼表消耗效能。</p>\n<h4 id=\"SQLite\">SQLite</h4><p>如果 SQLite 無法正常啟用，記得注意 Android 本身的版本是否要更新，之前個人在測試時就發生過無法啟動的狀況。情急之下用 txt 自己刻了一套類似功能的 documentation SQL。現在想想挺好笑的，結果期中考過後我發現手機系統要更新，更新好就能使用 SQLite 了，只好默默的砍掉整個手刻的 SQL。</p>\n<p>關於 SQLite 我使用在兩個部分：儲存計畫、系統參數。</p>\n<ul>\n<li>PlanSQL</li>\n<li>SystemSettingSQL</li>\n</ul>\n<p>兩者都相當直接的包裝了基本的 Sqlite 的 CRUD (新增/修改/刪除/查詢)，基本上 SQLite 在類別設計完成後，撰寫一次，確認每次 APP 開啟後跟 SQLite 的 IO 正常後，我就再也沒有修改過內部的程式碼。所以理想的話只要努力一次就好，並不需要開發途中不斷地維護那段程式碼。 SQLite 需要注意的重點是測試資料的問題。在開發時頻繁的測試過程中，程式碼除錯時會頻繁地影響到資料庫資料的變動，導致錯誤解決了卻仍然出現問題。主因是資料錯誤，產生 Garbage in garbage out 的結果。建議在開發期間每次 APP 啟動時就初始化一次資料，清空資料庫並且寫入測試用的資料，最終在 APP 發佈時只要將初始化資料的程式碼註解掉即可。</p>\n<p>另外需要注意的事情是，程式碼要有解析空資料的能力。意思是多半在測試時，資料庫內已經有測試資料，往往忽略了有可能無資料的情況，反而在拿掉測試資料後才發現 APP 啟動的一瞬間就會因為資料讀取失敗而崩潰。</p>\n<h4 id=\"動態新增控制項\">動態新增控制項</h4><p>這大概是我被詢問最頻繁的項目了。處理這部分的是以下兩個類別：</p>\n<ul>\n<li>AddBtn</li>\n<li>ViewList</li>\n</ul>\n<p>動態新增控制項的步驟就是：宣告 &gt; 設定 &gt; 掛載。除非是要做 APP 遊戲，不然 Andriod 內建的 ListView 應該能解決大部份的問題，當初我在這塊也是修改了好幾個版本，一開始因為好玩也是手刻 ListView，再建立 Scroll view。不過內建的 ListView 和手刻的邏輯基本上是相同的，先將想要動態新增的物件製作成一份 ListItem 再由 ListView 去重複就對了。</p>\n<h4 id=\"Android_Lifecycle_生命週期\">Android Lifecycle 生命週期</h4><p><img src=\"http://pic.pimg.tw/style77125tech/1369341764-3430810860.png\" alt=\"Andriod 生命週期 \"></p>\n<p>撰寫 Andriod APP 最重要的就是生命週期。簡而言之，生命週期就是我們在手機各種操作時，切換到 APP 畫面時對程式運行的影響，例如執行中的 APP 在按下 Home 鍵後會進入到 <code>onPause()</code> 的狀態，不同的狀態不可能讓 APP 一直處於運轉中，因此 APP 作業流程設計會圍繞著 Android Lifecycle 在運轉，也是設計的核心。但記得在 Lifecycle 中，我個人認為最不能仰賴 <code>onDestroy()</code>，仰賴關閉 APP 時才去執行，無法預測 APP 是在什麼情況下被關閉的，可能執行緒被中斷、手機沒電等等狀況。重要的資料同步，盡可能不要放在 <code>onDestroy</code> 的部分。</p>\n<h4 id=\"雙語系\">雙語系</h4><p>TTtiemr 支援雙語系，支援 <code>zh-Tw</code> 和 <code>en</code> 語系，根據手機設定的國籍去做辨識。在手機中抓取字串的方式都需要使用 <code>android:text=&quot;@string/show&quot;</code> 抓取，之前有聽過反映這樣相當不友善(且不容易辨識)，不過在後期翻譯時相當有趣，單純翻譯 <code>string</code> 的設定檔就可完成。如果從一開始就有遵守紀律，將對應的字串寫在設定檔內，在專案末期好好享受輕鬆翻譯 APP 語言的成果吧!</p>\n<h4 id=\"多解析度圖片\">多解析度圖片</h4><p>在多解析度圖片這部分，我個人處理得相當糟糕，當初在 PC 上測試時雨手機上測試時發現差距極大，因此我大量的改用百分比去做設計。解決問題後我就沒有再去對多種解析度的螢幕下去做設計。</p>\n<h4 id=\"Animation_動畫效果\">Animation 動畫效果</h4><p>在 <code>WorkingActivity</code> 可以大量使用到動畫，Android 的動畫使用大致上是：宣告 &gt; 設定參數 &gt; 啟動。需要注意的是 Animation 的狀態，需要將正確的資料流操作掛載載正確的 Animation 事件上面，避免掉發生動畫時件不同步或是執行順序有問題的情況。Animation 玩起來相當有趣且有成就看，相當推薦大家玩玩。</p>\n<p><img src=\"/images/TTtimer/demo.jpg\" alt=\"screen shot\"></p>\n<h2 id=\"檔案簡介\">檔案簡介</h2><p>path: src/main/java/tw/com/oit/andrew/</p>\n<h5 id=\"myclass/MyTimer\">myclass/MyTimer</h5><p>計時計類別，主要是依照需求包裝了計時器去配合之後的 Andriod time tick。</p>\n<h5 id=\"myclass/MicroTimer\">myclass/MicroTimer</h5><p>繼承了 MyTimer，加入了秒數的欄位，最後這兩個計時器使用的類別會被包在 Plan 和 PlanToTime 中使用。</p>\n<h4 id=\"myclass/Plan\">myclass/Plan</h4><p>包裝了每個計畫項目資訊，屬於 PlanToTime 的父類別，絕大多數重要的功能也是在這裡。</p>\n<h4 id=\"myclass/PlanToTime\">myclass/PlanToTime</h4><p>在計畫項目資訊增加了目標時間，之後的 Activity 中使用的都是這個 class。兩個 Plan 相關的 class 是整個 APP 中 CP 最高的，但也是被反覆修改最多次的，良好的物件設計讓我在整個 APP 開發的後期有了相當不錯的資料控管，我能清楚的掌握資料的傳輸。</p>\n<h4 id=\"system/Notify\">system/Notify</h4><p>包裝了所有使用的通知視窗(Dialog)，從外部可以輕鬆的呼叫視窗，僅需要傳入必要的字串需求即可。</p>\n<h4 id=\"system/SysSet\">system/SysSet</h4><p>系統設定檔。應該與 TimeRiver 合併。</p>\n<h4 id=\"system/TimeRiver\">system/TimeRiver</h4><p>系統設定檔。主要是針對計時器的部分，這部分的設定會被記錄在 SQLite 中，確保每次重新啟動時都會是使用者設定的值。</p>\n<h4 id=\"tenthousandtimer/MainActivity\">tenthousandtimer/MainActivity</h4><p>主要介面的操作，拿讀取進來的資料動態新增控制項，並且宣告、啟動計時器。</p>\n<h4 id=\"tenthousandtimer/MetalsActivity\">tenthousandtimer/MetalsActivity</h4><p>單純檢視獎牌與頭銜等訊息，可以視為單純的 ListView Demo。</p>\n<h4 id=\"tenthousandtimer/MyMenu\">tenthousandtimer/MyMenu</h4><p>針對 Menu 包裝操作，命名並沒有使用 Activity 是用來區別這個是一包裝操作的 class 並非直接掛載在頁面上的。</p>\n<h4 id=\"tenthousandtimer/SettingActivity\">tenthousandtimer/SettingActivity</h4><p>設定頁面，設邊使用了固定的控制項，然後將設定的資訊寫在上面的 system 類別中，並儲存在 SQLite。</p>\n<h4 id=\"tenthousandtimer/WelcomActivity\">tenthousandtimer/WelcomActivity</h4><p>歡迎界面，在裡面載入 SQLite 的資料，其實這沒有必要，在 MainActivity 中載入即可，單純為了好看。</p>\n<h4 id=\"tenthousandtimer/WorkingActivity\">tenthousandtimer/WorkingActivity</h4><p>在 WorkingActivity 中大量的使用了 Animation，如果在事後才掛上 Animation 容易導致先前設計的資料流多少出現錯誤。仔細研究 Animation 與主程式非同步的關係，就能解決這個問題，並不至於需要 APP 大改寫。</p>\n<h4 id=\"tttsql/PlanSQL_&amp;_tttsql/SystemSettingSQL\">tttsql/PlanSQL &amp; tttsql/SystemSettingSQL</h4><p>包裝了 SQLite 的操作，包含了整批資料的 CRUD，這邊對於 SQLite 的操作相當基本，依據我的印象，資料更新的操作是直接用覆蓋的。基本上也不會出錯，在小量的資料下，效能也沒有問題。PlanSQL 和 SystemSettingSQL 分別包裝了不同的資料而已，基本上觀念完全相同。皆是在載入畫面時會讀取資料。記得注意 Andriod 的版本問題，另外 SQLite 自己也有版本問題，請確保測試資料正確，紀律性的測試可以省去很多麻煩。</p>\n<h4 id=\"viewlist/AddBtn_&amp;_viewlist/ViewList\">viewlist/AddBtn &amp; viewlist/ViewList</h4><p>這兩個類別都包裝了動態新增物件的功能，新增動態物件其實相當麻煩，要考慮物件本身、事件、資料，因此我會盡可能將資訊都封裝在類別內，屆時只需要傳入必要參數即可，如任務有用物件包裝好，那理所當然直接傳遞物件即可。</p>\n<p><img src=\"/images/TTtimer/demo2.jpg\" alt=\"screen shot\"></p>\n<h2 id=\"結語\">結語</h2><p>TTtiemr 亦有存在問題，目前我個人也不知道該如何解決。TTtimer 似乎在重複開啟太多任務後，會導致手機效能降低，吃掉太多CPU或記憶體。但此部分已經超過我對 Andriod APP 的認知，需要更專業的技術。但 TTtimer 所使用的技術，除了連線的需求之外，能滿足絕大部份的 APP 開發。這次的 Andriod APP - TTtimer 分享希望能幫助到大家，如果有任何問題也可以 <a href=\"https://www.facebook.com/profile.php?id=100001317746154\">Facebook</a> 敲我或是寄信給我詢問細節，但請標明是誰詢問與相關的問題資訊。</p>\n"},{"title":"JS Devil Day 參與心得","date":"2015-08-02T01:05:42.000Z","comments":0,"_content":"\n> 本篇文上是本人Andrew Chen為[JSDC 2015](http://jsdc.tw)撰寫\n> 感謝[Caeser Chi](https://www.facebook.com/clonncd?fref=ts)給予指導\n\n![JS Devil Day](https://lh3.googleusercontent.com/-mm7RHTIWOAw/VXT1RxK7xrI/AAAAAAAAQK0/LQGMSNo2aNE/s0/post-0-0-83751300-1350904929_large.jpg)\n\nJS Devil Day 是本次 JSDC 2015 所舉辦第一場對外 Meetup，也是首次透過北中南三方連線方式進行，本次以參與者角色，記錄此次活動。\n\nJS Devil Day 當天主要有三個主題：Angular.js、ECMAScript6、講者對談與交流。\n\n## 專家分享\n\n儘管對 Angular.js相當不熟悉，透過講者阿梨的分享讓我對Angular.js的概念有些許的了解，事後座談時講者也推薦初學者直接以Angular.js 2.0作為起手版本。\n\n接著是 Jeremy 對 ES6、webpack 提出了幾個重點，在 ES6 中可以明顯地感受到 JavaScript 已經開始嘗試解決 ES5 一些為人詬病的問題，包括區域變數、類別、模組化等等，同時 ES6 內建了 promise 和 generator ，同時在 ES6 解決了過複雜的 callback function和流程控制，另外 ES6 採用許多 coffeeScript 語法讓結構更為簡潔。\n\n個人認為 ES6 讓 Javascript 成為了更完整的開發語言，也讓 Javascript 減少了許多舊有的小問題，也不必仰賴開發者用奇技淫巧去嘗試解決問題。\n\n現今主流瀏覽器諸如：Chrome、Safari、Firefox 等等，已經逐漸開始支援 ES6，但尚未完全支援。在瀏覽器完全支援 ES6 之前，我們可以透過 babel 在程式執行之前將 ES6 的程式碼轉譯成 ES5，讓瀏覽器完全整的支援 ES6 程式碼。\n\n另外 Jeremy 提到 webpack 和 JSCS ，協助團隊開發更為順暢，開發工具和技巧相當的重要。順暢的開發過程除了提高效率之外，也保護了開發者健康的肝。","source":"_posts/20150802_JS_JSDevilDay.md","raw":"title: JS Devil day 參與心得\ndate: 2015-08-02 09:05:42\ntags:\n- 社群活動\n- JavaScript\n- ES6\ncategories: 社群活動\ncomments: false\n---\n\n> 本篇文上是本人Andrew Chen為[JSDC 2015](http://jsdc.tw)撰寫\n> 感謝[Caeser Chi](https://www.facebook.com/clonncd?fref=ts)給予指導\n\n![JS Devil Day](https://lh3.googleusercontent.com/-mm7RHTIWOAw/VXT1RxK7xrI/AAAAAAAAQK0/LQGMSNo2aNE/s0/post-0-0-83751300-1350904929_large.jpg)\n\nJS Devil Day 是本次 JSDC 2015 所舉辦第一場對外 Meetup，也是首次透過北中南三方連線方式進行，本次以參與者角色，記錄此次活動。\n\nJS Devil Day 當天主要有三個主題：Angular.js、ECMAScript6、講者對談與交流。\n\n## 專家分享\n\n儘管對 Angular.js相當不熟悉，透過講者阿梨的分享讓我對Angular.js的概念有些許的了解，事後座談時講者也推薦初學者直接以Angular.js 2.0作為起手版本。\n\n接著是 Jeremy 對 ES6、webpack 提出了幾個重點，在 ES6 中可以明顯地感受到 JavaScript 已經開始嘗試解決 ES5 一些為人詬病的問題，包括區域變數、類別、模組化等等，同時 ES6 內建了 promise 和 generator ，同時在 ES6 解決了過複雜的 callback function和流程控制，另外 ES6 採用許多 coffeeScript 語法讓結構更為簡潔。\n\n個人認為 ES6 讓 Javascript 成為了更完整的開發語言，也讓 Javascript 減少了許多舊有的小問題，也不必仰賴開發者用奇技淫巧去嘗試解決問題。\n\n現今主流瀏覽器諸如：Chrome、Safari、Firefox 等等，已經逐漸開始支援 ES6，但尚未完全支援。在瀏覽器完全支援 ES6 之前，我們可以透過 babel 在程式執行之前將 ES6 的程式碼轉譯成 ES5，讓瀏覽器完全整的支援 ES6 程式碼。\n\n另外 Jeremy 提到 webpack 和 JSCS ，協助團隊開發更為順暢，開發工具和技巧相當的重要。順暢的開發過程除了提高效率之外，也保護了開發者健康的肝。","slug":"20150802_JS_JSDevilDay","published":1,"updated":"2015-08-03T11:42:51.000Z","layout":"post","photos":[],"link":"","_id":"ciykykomu0006iwu0ou6lnbkq","content":"<blockquote>\n<p>本篇文上是本人Andrew Chen為<a href=\"http://jsdc.tw\" target=\"_blank\" rel=\"external\">JSDC 2015</a>撰寫<br>感謝<a href=\"https://www.facebook.com/clonncd?fref=ts\" target=\"_blank\" rel=\"external\">Caeser Chi</a>給予指導</p>\n</blockquote>\n<p><img src=\"https://lh3.googleusercontent.com/-mm7RHTIWOAw/VXT1RxK7xrI/AAAAAAAAQK0/LQGMSNo2aNE/s0/post-0-0-83751300-1350904929_large.jpg\" alt=\"JS Devil Day\"></p>\n<p>JS Devil Day 是本次 JSDC 2015 所舉辦第一場對外 Meetup，也是首次透過北中南三方連線方式進行，本次以參與者角色，記錄此次活動。</p>\n<p>JS Devil Day 當天主要有三個主題：Angular.js、ECMAScript6、講者對談與交流。</p>\n<h2 id=\"專家分享\">專家分享</h2><p>儘管對 Angular.js相當不熟悉，透過講者阿梨的分享讓我對Angular.js的概念有些許的了解，事後座談時講者也推薦初學者直接以Angular.js 2.0作為起手版本。</p>\n<p>接著是 Jeremy 對 ES6、webpack 提出了幾個重點，在 ES6 中可以明顯地感受到 JavaScript 已經開始嘗試解決 ES5 一些為人詬病的問題，包括區域變數、類別、模組化等等，同時 ES6 內建了 promise 和 generator ，同時在 ES6 解決了過複雜的 callback function和流程控制，另外 ES6 採用許多 coffeeScript 語法讓結構更為簡潔。</p>\n<p>個人認為 ES6 讓 Javascript 成為了更完整的開發語言，也讓 Javascript 減少了許多舊有的小問題，也不必仰賴開發者用奇技淫巧去嘗試解決問題。</p>\n<p>現今主流瀏覽器諸如：Chrome、Safari、Firefox 等等，已經逐漸開始支援 ES6，但尚未完全支援。在瀏覽器完全支援 ES6 之前，我們可以透過 babel 在程式執行之前將 ES6 的程式碼轉譯成 ES5，讓瀏覽器完全整的支援 ES6 程式碼。</p>\n<p>另外 Jeremy 提到 webpack 和 JSCS ，協助團隊開發更為順暢，開發工具和技巧相當的重要。順暢的開發過程除了提高效率之外，也保護了開發者健康的肝。</p>\n","excerpt":"","more":"<blockquote>\n<p>本篇文上是本人Andrew Chen為<a href=\"http://jsdc.tw\">JSDC 2015</a>撰寫<br>感謝<a href=\"https://www.facebook.com/clonncd?fref=ts\">Caeser Chi</a>給予指導</p>\n</blockquote>\n<p><img src=\"https://lh3.googleusercontent.com/-mm7RHTIWOAw/VXT1RxK7xrI/AAAAAAAAQK0/LQGMSNo2aNE/s0/post-0-0-83751300-1350904929_large.jpg\" alt=\"JS Devil Day\"></p>\n<p>JS Devil Day 是本次 JSDC 2015 所舉辦第一場對外 Meetup，也是首次透過北中南三方連線方式進行，本次以參與者角色，記錄此次活動。</p>\n<p>JS Devil Day 當天主要有三個主題：Angular.js、ECMAScript6、講者對談與交流。</p>\n<h2 id=\"專家分享\">專家分享</h2><p>儘管對 Angular.js相當不熟悉，透過講者阿梨的分享讓我對Angular.js的概念有些許的了解，事後座談時講者也推薦初學者直接以Angular.js 2.0作為起手版本。</p>\n<p>接著是 Jeremy 對 ES6、webpack 提出了幾個重點，在 ES6 中可以明顯地感受到 JavaScript 已經開始嘗試解決 ES5 一些為人詬病的問題，包括區域變數、類別、模組化等等，同時 ES6 內建了 promise 和 generator ，同時在 ES6 解決了過複雜的 callback function和流程控制，另外 ES6 採用許多 coffeeScript 語法讓結構更為簡潔。</p>\n<p>個人認為 ES6 讓 Javascript 成為了更完整的開發語言，也讓 Javascript 減少了許多舊有的小問題，也不必仰賴開發者用奇技淫巧去嘗試解決問題。</p>\n<p>現今主流瀏覽器諸如：Chrome、Safari、Firefox 等等，已經逐漸開始支援 ES6，但尚未完全支援。在瀏覽器完全支援 ES6 之前，我們可以透過 babel 在程式執行之前將 ES6 的程式碼轉譯成 ES5，讓瀏覽器完全整的支援 ES6 程式碼。</p>\n<p>另外 Jeremy 提到 webpack 和 JSCS ，協助團隊開發更為順暢，開發工具和技巧相當的重要。順暢的開發過程除了提高效率之外，也保護了開發者健康的肝。</p>\n"},{"title":"淺談前端框架未來，Angular, React, 還是...？","date":"2015-08-02T01:13:44.000Z","comments":0,"_content":"\n> 本篇文上是本人Andrew Chen為[JSDC 2015](http://jsdc.tw)撰寫\n> 感謝[Caeser Chi](https://www.facebook.com/clonncd?fref=ts)給予指導\n\n![前端框架未來？React, Angular or ..?](http://cdn.xenyomedia.com/sites/default/files/blog/rwd.png)\n\n前端入坑深似海，一入宅門出不來。這肯定是許多前端工程師可以體認到的共同感觸，前端真可以說是一個坑，維繫大家能夠持續學習的動機，除了熱情，應該就還是熱情吧。\n\n## 淺談前端框架\n\n隨著前端應用變化越來越多，因此許多前端框架不斷的推陳出新，從早期大家所熟知的 [batman.js](http://batmanjs.org), [backbone.js](http://backbonejs.org), [emberjs](http://emberjs.com) 在中期也開始出現了許多不同框架，其中到了 Google 踏進 Angular.js 之後前端框架正式熱門起來，也掀起另外一波大戰。\n\n隨著世代的轉移，JavaScript 漸漸語法轉移到 ES6，語法不同，開始有了不同應用，也因此又出現了令人亮眼的新秀：[Aurelia](http://aurelia.io)。\n\n由於前端框架的世界更新相當迅速，不斷有新的Framwork出現，各家開發者對自己熟悉的框架各執其詞，其實相當難定義何者叫好。\n\n## 前端框架未來？React, Angular ?\n\n[React](http://facebook.github.io/react/) 和 [Angular](http://aurelia.io) 目前為前端兩大流行的框架，兩者的風格迥異。\n\nReact 主打 Single Source of True 和 Flux 的單項資料流，重新以元件的思維角度去設計 WebApp，最後又採用相同思維可以進行開發 iOS, Android native 程式框架 - React Native 讓大家眼睛為之一亮。\n\n而在Angular目前的情況較為不明朗，相當多的開發者正在使用能穩定運作的 1.x 版本，但是 Angular 2.x 的版本卻面臨了相當大的改版，而且並沒有支援 1.x 的部分。 Angular 最大亮點在雙向資料綁定，簡潔的資料綁定和監控配上快節奏的開發技巧時，產生令人驚豔的開發速度。\n\nReact 跟 Angular 整體的核心思維是相當不同的，React 特色在於簡化的開發邏輯與資料流，單純的單項資料流讓開發流程和除錯都容易了許多，React 的結構設計也讓抽取元件變得直觀與單純，React 傾向於將開發簡化，在設計好架構與資料結構後就減少犯錯的機會。\n\n但從另一個角度來說，React針對單一的操作，要撰寫的程式碼多出了許多，整個架構也變得龐大。而 Angular 則相反，Angular 在處理資料時相當快速且方便，雙向的資料綁定讓開者並不需要思考太多元件對應的關係，但也因此最終可能會讓整個專案陷入混亂，Angular 在抽取元件時比 React 需要更多的開發技巧，對整體團隊的開發素質要求也相對的更高。\n\n## 新的選擇 - Aurelia\n\nAurelia 或許可以說介於 React 和 Angular 兩者之間，Aurelia 目前為相當新秀的開發框架，他本身與 Angular 的資料綁定方式相當類似，不僅僅對 Angular 的開發者相當容易上手，安插在 HTML5 中的屬性也更加語意化。\n\nAurelia 的核心圍繞在模板上，因此他似乎同時擁有了 React 類似元件的觀念，又同時有 Angular 綁定資料的手法，算是相當多元，除此之外 Aurelia 對 ES6, ES7 擁有更高的支援度。\n\n當然目前 Aurelia 還在持續開發中，雖然版本尚未穩定，但是已經是個值得注目的前端框架，可以開始試著去執行，了解 Aurelia ，或許在現今 Single Page App 爆炸性成長的階段，Aurelia 能在未來佔有一席之地。\n\n也許未來 JavaScript 真的能夠做到前後端統一程式碼進行開發，也有可能踏入 hardware 開發領域，這都需要時間來證明，當然也需要各位的投入，就讓我們持續關注這個世代的變化吧。","source":"_posts/20150802_JS_AngularReactOrOther.md","raw":"title: 淺談前端框架未來，Angular, React, 還是...？\ndate: 2015-08-02 09:13:44\ntags:\n- 社群活動\n- JavaScript\n- Angular.js\n- React.js\ncategories: 社群活動\ncomments: false\n---\n\n> 本篇文上是本人Andrew Chen為[JSDC 2015](http://jsdc.tw)撰寫\n> 感謝[Caeser Chi](https://www.facebook.com/clonncd?fref=ts)給予指導\n\n![前端框架未來？React, Angular or ..?](http://cdn.xenyomedia.com/sites/default/files/blog/rwd.png)\n\n前端入坑深似海，一入宅門出不來。這肯定是許多前端工程師可以體認到的共同感觸，前端真可以說是一個坑，維繫大家能夠持續學習的動機，除了熱情，應該就還是熱情吧。\n\n## 淺談前端框架\n\n隨著前端應用變化越來越多，因此許多前端框架不斷的推陳出新，從早期大家所熟知的 [batman.js](http://batmanjs.org), [backbone.js](http://backbonejs.org), [emberjs](http://emberjs.com) 在中期也開始出現了許多不同框架，其中到了 Google 踏進 Angular.js 之後前端框架正式熱門起來，也掀起另外一波大戰。\n\n隨著世代的轉移，JavaScript 漸漸語法轉移到 ES6，語法不同，開始有了不同應用，也因此又出現了令人亮眼的新秀：[Aurelia](http://aurelia.io)。\n\n由於前端框架的世界更新相當迅速，不斷有新的Framwork出現，各家開發者對自己熟悉的框架各執其詞，其實相當難定義何者叫好。\n\n## 前端框架未來？React, Angular ?\n\n[React](http://facebook.github.io/react/) 和 [Angular](http://aurelia.io) 目前為前端兩大流行的框架，兩者的風格迥異。\n\nReact 主打 Single Source of True 和 Flux 的單項資料流，重新以元件的思維角度去設計 WebApp，最後又採用相同思維可以進行開發 iOS, Android native 程式框架 - React Native 讓大家眼睛為之一亮。\n\n而在Angular目前的情況較為不明朗，相當多的開發者正在使用能穩定運作的 1.x 版本，但是 Angular 2.x 的版本卻面臨了相當大的改版，而且並沒有支援 1.x 的部分。 Angular 最大亮點在雙向資料綁定，簡潔的資料綁定和監控配上快節奏的開發技巧時，產生令人驚豔的開發速度。\n\nReact 跟 Angular 整體的核心思維是相當不同的，React 特色在於簡化的開發邏輯與資料流，單純的單項資料流讓開發流程和除錯都容易了許多，React 的結構設計也讓抽取元件變得直觀與單純，React 傾向於將開發簡化，在設計好架構與資料結構後就減少犯錯的機會。\n\n但從另一個角度來說，React針對單一的操作，要撰寫的程式碼多出了許多，整個架構也變得龐大。而 Angular 則相反，Angular 在處理資料時相當快速且方便，雙向的資料綁定讓開者並不需要思考太多元件對應的關係，但也因此最終可能會讓整個專案陷入混亂，Angular 在抽取元件時比 React 需要更多的開發技巧，對整體團隊的開發素質要求也相對的更高。\n\n## 新的選擇 - Aurelia\n\nAurelia 或許可以說介於 React 和 Angular 兩者之間，Aurelia 目前為相當新秀的開發框架，他本身與 Angular 的資料綁定方式相當類似，不僅僅對 Angular 的開發者相當容易上手，安插在 HTML5 中的屬性也更加語意化。\n\nAurelia 的核心圍繞在模板上，因此他似乎同時擁有了 React 類似元件的觀念，又同時有 Angular 綁定資料的手法，算是相當多元，除此之外 Aurelia 對 ES6, ES7 擁有更高的支援度。\n\n當然目前 Aurelia 還在持續開發中，雖然版本尚未穩定，但是已經是個值得注目的前端框架，可以開始試著去執行，了解 Aurelia ，或許在現今 Single Page App 爆炸性成長的階段，Aurelia 能在未來佔有一席之地。\n\n也許未來 JavaScript 真的能夠做到前後端統一程式碼進行開發，也有可能踏入 hardware 開發領域，這都需要時間來證明，當然也需要各位的投入，就讓我們持續關注這個世代的變化吧。","slug":"20150802_JS_AngularReactOrOther","published":1,"updated":"2015-08-03T11:29:32.000Z","layout":"post","photos":[],"link":"","_id":"ciykykon60009iwu09rlzqy49","content":"<blockquote>\n<p>本篇文上是本人Andrew Chen為<a href=\"http://jsdc.tw\" target=\"_blank\" rel=\"external\">JSDC 2015</a>撰寫<br>感謝<a href=\"https://www.facebook.com/clonncd?fref=ts\" target=\"_blank\" rel=\"external\">Caeser Chi</a>給予指導</p>\n</blockquote>\n<p><img src=\"http://cdn.xenyomedia.com/sites/default/files/blog/rwd.png\" alt=\"前端框架未來？React, Angular or ..?\"></p>\n<p>前端入坑深似海，一入宅門出不來。這肯定是許多前端工程師可以體認到的共同感觸，前端真可以說是一個坑，維繫大家能夠持續學習的動機，除了熱情，應該就還是熱情吧。</p>\n<h2 id=\"淺談前端框架\">淺談前端框架</h2><p>隨著前端應用變化越來越多，因此許多前端框架不斷的推陳出新，從早期大家所熟知的 <a href=\"http://batmanjs.org\" target=\"_blank\" rel=\"external\">batman.js</a>, <a href=\"http://backbonejs.org\" target=\"_blank\" rel=\"external\">backbone.js</a>, <a href=\"http://emberjs.com\" target=\"_blank\" rel=\"external\">emberjs</a> 在中期也開始出現了許多不同框架，其中到了 Google 踏進 Angular.js 之後前端框架正式熱門起來，也掀起另外一波大戰。</p>\n<p>隨著世代的轉移，JavaScript 漸漸語法轉移到 ES6，語法不同，開始有了不同應用，也因此又出現了令人亮眼的新秀：<a href=\"http://aurelia.io\" target=\"_blank\" rel=\"external\">Aurelia</a>。</p>\n<p>由於前端框架的世界更新相當迅速，不斷有新的Framwork出現，各家開發者對自己熟悉的框架各執其詞，其實相當難定義何者叫好。</p>\n<h2 id=\"前端框架未來？React,_Angular_?\">前端框架未來？React, Angular ?</h2><p><a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a> 和 <a href=\"http://aurelia.io\" target=\"_blank\" rel=\"external\">Angular</a> 目前為前端兩大流行的框架，兩者的風格迥異。</p>\n<p>React 主打 Single Source of True 和 Flux 的單項資料流，重新以元件的思維角度去設計 WebApp，最後又採用相同思維可以進行開發 iOS, Android native 程式框架 - React Native 讓大家眼睛為之一亮。</p>\n<p>而在Angular目前的情況較為不明朗，相當多的開發者正在使用能穩定運作的 1.x 版本，但是 Angular 2.x 的版本卻面臨了相當大的改版，而且並沒有支援 1.x 的部分。 Angular 最大亮點在雙向資料綁定，簡潔的資料綁定和監控配上快節奏的開發技巧時，產生令人驚豔的開發速度。</p>\n<p>React 跟 Angular 整體的核心思維是相當不同的，React 特色在於簡化的開發邏輯與資料流，單純的單項資料流讓開發流程和除錯都容易了許多，React 的結構設計也讓抽取元件變得直觀與單純，React 傾向於將開發簡化，在設計好架構與資料結構後就減少犯錯的機會。</p>\n<p>但從另一個角度來說，React針對單一的操作，要撰寫的程式碼多出了許多，整個架構也變得龐大。而 Angular 則相反，Angular 在處理資料時相當快速且方便，雙向的資料綁定讓開者並不需要思考太多元件對應的關係，但也因此最終可能會讓整個專案陷入混亂，Angular 在抽取元件時比 React 需要更多的開發技巧，對整體團隊的開發素質要求也相對的更高。</p>\n<h2 id=\"新的選擇_-_Aurelia\">新的選擇 - Aurelia</h2><p>Aurelia 或許可以說介於 React 和 Angular 兩者之間，Aurelia 目前為相當新秀的開發框架，他本身與 Angular 的資料綁定方式相當類似，不僅僅對 Angular 的開發者相當容易上手，安插在 HTML5 中的屬性也更加語意化。</p>\n<p>Aurelia 的核心圍繞在模板上，因此他似乎同時擁有了 React 類似元件的觀念，又同時有 Angular 綁定資料的手法，算是相當多元，除此之外 Aurelia 對 ES6, ES7 擁有更高的支援度。</p>\n<p>當然目前 Aurelia 還在持續開發中，雖然版本尚未穩定，但是已經是個值得注目的前端框架，可以開始試著去執行，了解 Aurelia ，或許在現今 Single Page App 爆炸性成長的階段，Aurelia 能在未來佔有一席之地。</p>\n<p>也許未來 JavaScript 真的能夠做到前後端統一程式碼進行開發，也有可能踏入 hardware 開發領域，這都需要時間來證明，當然也需要各位的投入，就讓我們持續關注這個世代的變化吧。</p>\n","excerpt":"","more":"<blockquote>\n<p>本篇文上是本人Andrew Chen為<a href=\"http://jsdc.tw\">JSDC 2015</a>撰寫<br>感謝<a href=\"https://www.facebook.com/clonncd?fref=ts\">Caeser Chi</a>給予指導</p>\n</blockquote>\n<p><img src=\"http://cdn.xenyomedia.com/sites/default/files/blog/rwd.png\" alt=\"前端框架未來？React, Angular or ..?\"></p>\n<p>前端入坑深似海，一入宅門出不來。這肯定是許多前端工程師可以體認到的共同感觸，前端真可以說是一個坑，維繫大家能夠持續學習的動機，除了熱情，應該就還是熱情吧。</p>\n<h2 id=\"淺談前端框架\">淺談前端框架</h2><p>隨著前端應用變化越來越多，因此許多前端框架不斷的推陳出新，從早期大家所熟知的 <a href=\"http://batmanjs.org\">batman.js</a>, <a href=\"http://backbonejs.org\">backbone.js</a>, <a href=\"http://emberjs.com\">emberjs</a> 在中期也開始出現了許多不同框架，其中到了 Google 踏進 Angular.js 之後前端框架正式熱門起來，也掀起另外一波大戰。</p>\n<p>隨著世代的轉移，JavaScript 漸漸語法轉移到 ES6，語法不同，開始有了不同應用，也因此又出現了令人亮眼的新秀：<a href=\"http://aurelia.io\">Aurelia</a>。</p>\n<p>由於前端框架的世界更新相當迅速，不斷有新的Framwork出現，各家開發者對自己熟悉的框架各執其詞，其實相當難定義何者叫好。</p>\n<h2 id=\"前端框架未來？React,_Angular_?\">前端框架未來？React, Angular ?</h2><p><a href=\"http://facebook.github.io/react/\">React</a> 和 <a href=\"http://aurelia.io\">Angular</a> 目前為前端兩大流行的框架，兩者的風格迥異。</p>\n<p>React 主打 Single Source of True 和 Flux 的單項資料流，重新以元件的思維角度去設計 WebApp，最後又採用相同思維可以進行開發 iOS, Android native 程式框架 - React Native 讓大家眼睛為之一亮。</p>\n<p>而在Angular目前的情況較為不明朗，相當多的開發者正在使用能穩定運作的 1.x 版本，但是 Angular 2.x 的版本卻面臨了相當大的改版，而且並沒有支援 1.x 的部分。 Angular 最大亮點在雙向資料綁定，簡潔的資料綁定和監控配上快節奏的開發技巧時，產生令人驚豔的開發速度。</p>\n<p>React 跟 Angular 整體的核心思維是相當不同的，React 特色在於簡化的開發邏輯與資料流，單純的單項資料流讓開發流程和除錯都容易了許多，React 的結構設計也讓抽取元件變得直觀與單純，React 傾向於將開發簡化，在設計好架構與資料結構後就減少犯錯的機會。</p>\n<p>但從另一個角度來說，React針對單一的操作，要撰寫的程式碼多出了許多，整個架構也變得龐大。而 Angular 則相反，Angular 在處理資料時相當快速且方便，雙向的資料綁定讓開者並不需要思考太多元件對應的關係，但也因此最終可能會讓整個專案陷入混亂，Angular 在抽取元件時比 React 需要更多的開發技巧，對整體團隊的開發素質要求也相對的更高。</p>\n<h2 id=\"新的選擇_-_Aurelia\">新的選擇 - Aurelia</h2><p>Aurelia 或許可以說介於 React 和 Angular 兩者之間，Aurelia 目前為相當新秀的開發框架，他本身與 Angular 的資料綁定方式相當類似，不僅僅對 Angular 的開發者相當容易上手，安插在 HTML5 中的屬性也更加語意化。</p>\n<p>Aurelia 的核心圍繞在模板上，因此他似乎同時擁有了 React 類似元件的觀念，又同時有 Angular 綁定資料的手法，算是相當多元，除此之外 Aurelia 對 ES6, ES7 擁有更高的支援度。</p>\n<p>當然目前 Aurelia 還在持續開發中，雖然版本尚未穩定，但是已經是個值得注目的前端框架，可以開始試著去執行，了解 Aurelia ，或許在現今 Single Page App 爆炸性成長的階段，Aurelia 能在未來佔有一席之地。</p>\n<p>也許未來 JavaScript 真的能夠做到前後端統一程式碼進行開發，也有可能踏入 hardware 開發領域，這都需要時間來證明，當然也需要各位的投入，就讓我們持續關注這個世代的變化吧。</p>\n"},{"title":"JavaScript - .Bind() .Apply() .Call()","date":"2015-08-18T14:30:15.000Z","comments":0,"_content":"\n![javascript](/images/javascript.jpg)\n\n#### function .bind()\n\n.bind() 不會立即執行 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。\n\n``` js\nfunc.bind( null, 1 ,2 ,3 ) ;   // 不會立即執行\n```\n\n#### function .call()\n\n.call() 呼叫 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。\n\n``` js\nfunc.call( null, 1 ,2 ,3 ) ;   // 逐一傳入參數 (立即執行)\n```\n\n#### function .apply()\n\n.apply() 呼叫 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。而參數是統一用一個陣列包起來，apply 會自行拆開傳入。\n\n\n``` js\nfunc.apply( null, [ 1, 2, 3 ] );  // 參數統一用 array 傳入 (立即執行)\n```\n","source":"_posts/20150818_JS_buildCallApply.md","raw":"title: JavaScript - .bind() .apply() .call()\ndate: 2015-08-18 22:30:15\ntags:\n- JavaScript\ncategories: JavaScript\ncomments: false\n---\n\n![javascript](/images/javascript.jpg)\n\n#### function .bind()\n\n.bind() 不會立即執行 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。\n\n``` js\nfunc.bind( null, 1 ,2 ,3 ) ;   // 不會立即執行\n```\n\n#### function .call()\n\n.call() 呼叫 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。\n\n``` js\nfunc.call( null, 1 ,2 ,3 ) ;   // 逐一傳入參數 (立即執行)\n```\n\n#### function .apply()\n\n.apply() 呼叫 function，並設定 `this` 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 `this` 的範疇。而參數是統一用一個陣列包起來，apply 會自行拆開傳入。\n\n\n``` js\nfunc.apply( null, [ 1, 2, 3 ] );  // 參數統一用 array 傳入 (立即執行)\n```\n","slug":"20150818_JS_buildCallApply","published":1,"updated":"2017-01-30T11:57:14.000Z","layout":"post","photos":[],"link":"","_id":"ciykykon9000ciwu0kzzsixwt","content":"<p><img src=\"/images/javascript.jpg\" alt=\"javascript\"></p>\n<h4 id=\"function_-bind()\">function .bind()</h4><p>.bind() 不會立即執行 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.bind( <span class=\"literal\">null</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> ,<span class=\"number\">3</span> ) ;   <span class=\"comment\">// 不會立即執行</span></div></pre></td></tr></table></figure>\n<h4 id=\"function_-call()\">function .call()</h4><p>.call() 呼叫 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.call( <span class=\"literal\">null</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> ,<span class=\"number\">3</span> ) ;   <span class=\"comment\">// 逐一傳入參數 (立即執行)</span></div></pre></td></tr></table></figure>\n<h4 id=\"function_-apply()\">function .apply()</h4><p>.apply() 呼叫 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。而參數是統一用一個陣列包起來，apply 會自行拆開傳入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.apply( <span class=\"literal\">null</span>, [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] );  <span class=\"comment\">// 參數統一用 array 傳入 (立即執行)</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><img src=\"/images/javascript.jpg\" alt=\"javascript\"></p>\n<h4 id=\"function_-bind()\">function .bind()</h4><p>.bind() 不會立即執行 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.bind( <span class=\"literal\">null</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> ,<span class=\"number\">3</span> ) ;   <span class=\"comment\">// 不會立即執行</span></div></pre></td></tr></table></figure>\n<h4 id=\"function_-call()\">function .call()</h4><p>.call() 呼叫 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.call( <span class=\"literal\">null</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> ,<span class=\"number\">3</span> ) ;   <span class=\"comment\">// 逐一傳入參數 (立即執行)</span></div></pre></td></tr></table></figure>\n<h4 id=\"function_-apply()\">function .apply()</h4><p>.apply() 呼叫 function，並設定 <code>this</code> 範疇與傳入參數。傳入第一個參數是 scope，指定 function 內 <code>this</code> 的範疇。而參數是統一用一個陣列包起來，apply 會自行拆開傳入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func.apply( <span class=\"literal\">null</span>, [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] );  <span class=\"comment\">// 參數統一用 array 傳入 (立即執行)</span></div></pre></td></tr></table></figure>\n"},{"title":"Redis - Node.js 記憶體快取","date":"2015-08-16T03:01:07.000Z","comments":0,"_content":"\n<center>\n![Redis](https://redislabs.com/wp-content/images/redis-logo.png)\n</center>\n\n* [Redis](http://redis.io)\n* [Redis - 官方文件](http://redis.io/documentation)\n* [Redis - npm](https://www.npmjs.com/package/redis)\n* [Redis - GUI](http://redisdesktop.com)\n\n## 簡介\n\nRedis 是以 key-value 的形式在伺服器的記憶體中儲存資訊的方式，為伺服器命名做快取(cache)。有別於其他 noSQL 或是 RDB，key-value 即是使用一個 key 的值對應到一筆資料。而 Redis 的特色就是將這筆資料，寫在記憶體裡面。\n\n大概有幾種狀況會將資料寫入到快取中：\n\n* 在一定時間內會被大量請求的資料，如：新聞的 Top 10。\n* 某些伺服器會頻繁使用的資料，或全域變數。如：\n* 測試用的資料，短時間內要使用的假資料。\n* 也能當成 Session 使用。(相當不健康的觀念)\n\nRedis 本身會瓜分伺服器的記憶體來使用，Node.js 連線所使用的記憶體相對於 PHP/Apache 較少，除非能非常準確地掌握 Session 的數量，否則不建議 Redit 當成 Session 使用，同樣的意思不應該將 Redis 當成資料庫來只用。如果對 Redis 有相當大的需求，應該特地架設 Redis 的伺服器，避免兩套系統互相搶奪記憶體資源。\n\n## 安裝\n\n先從官方網站下載 Redis，解開壓縮檔之後，在資料夾下執行以下指令\n\n``` bat\n$ make\n```\n\n輸入指令後，Redis 會自行安裝，需要一段時間\n\n``` bat\n$ make test\n```\n\nRedis 會自行進行測試，測時完成後即可啟動，啟動並不需要在指定的資料夾下，屬於全域的\n\n``` bat\n$ redis-server\n```\n\n接著在 [Redis - GUI](http://redisdesktop.com) 的介面中進行連線就可以檢視現在 Redis 內的資料。\n\n\n## 使用\n\n在 Node.js 引用 Redis 的套件並且連線\n\n``` js\nvar redis = require(\"redis\").createClient('6379', '127.0.0.1'); //port, IP\n```\n\nredis.set 寫入值\n\n``` js\nredis.set( key, value, function( err, reply ){\n  console.log( reply.toString() ); // 新增成功會回傳 ok\n});\n```\n\nredis.get 取得值\n\n``` js\nredis.get( key, function( err, reply ){\n  console.log( reply.toString() ); // 新增會回傳 value\n});\n```\n\ncache 資料的存活時間\n\n``` js\nredis.expire( key, 60);\n```\n\nredis 錯誤 callback function\n\n``` js\nredis.on( \"connect\", callback );\n```\n\nredis 錯誤 callback function\n\n``` js\nredis.on( \"error\", callback );\n```\n\nredis 驗證\n如果在 redis.conf 中有設定需要驗證的話，須在在此填入驗證碼，類似密碼的意思。\n\n``` js\nredis.auth(\"AndrewChen\");\n```\n\n## 結語\n\nRedis 基本上安裝完成就成功一半了，簡易的 set/get 即可使用，Redis 的操作本身不難，但謹慎的使用，小心記憶體的使用量，避免超額使用或是佔據了伺服器的空間。另外定期簡單的透過GUI介面檢查 Redis 的狀況也是相當不錯的選擇。\n","source":"_posts/20150816_JS_redis.md","raw":"title: Redis - Node.js 記憶體快取\ndate: 2015-08-16 11:01:07\ntags:\n- Node.js\n- JavaScript\ncategories: Node.js\ncomments: false\n---\n\n<center>\n![Redis](https://redislabs.com/wp-content/images/redis-logo.png)\n</center>\n\n* [Redis](http://redis.io)\n* [Redis - 官方文件](http://redis.io/documentation)\n* [Redis - npm](https://www.npmjs.com/package/redis)\n* [Redis - GUI](http://redisdesktop.com)\n\n## 簡介\n\nRedis 是以 key-value 的形式在伺服器的記憶體中儲存資訊的方式，為伺服器命名做快取(cache)。有別於其他 noSQL 或是 RDB，key-value 即是使用一個 key 的值對應到一筆資料。而 Redis 的特色就是將這筆資料，寫在記憶體裡面。\n\n大概有幾種狀況會將資料寫入到快取中：\n\n* 在一定時間內會被大量請求的資料，如：新聞的 Top 10。\n* 某些伺服器會頻繁使用的資料，或全域變數。如：\n* 測試用的資料，短時間內要使用的假資料。\n* 也能當成 Session 使用。(相當不健康的觀念)\n\nRedis 本身會瓜分伺服器的記憶體來使用，Node.js 連線所使用的記憶體相對於 PHP/Apache 較少，除非能非常準確地掌握 Session 的數量，否則不建議 Redit 當成 Session 使用，同樣的意思不應該將 Redis 當成資料庫來只用。如果對 Redis 有相當大的需求，應該特地架設 Redis 的伺服器，避免兩套系統互相搶奪記憶體資源。\n\n## 安裝\n\n先從官方網站下載 Redis，解開壓縮檔之後，在資料夾下執行以下指令\n\n``` bat\n$ make\n```\n\n輸入指令後，Redis 會自行安裝，需要一段時間\n\n``` bat\n$ make test\n```\n\nRedis 會自行進行測試，測時完成後即可啟動，啟動並不需要在指定的資料夾下，屬於全域的\n\n``` bat\n$ redis-server\n```\n\n接著在 [Redis - GUI](http://redisdesktop.com) 的介面中進行連線就可以檢視現在 Redis 內的資料。\n\n\n## 使用\n\n在 Node.js 引用 Redis 的套件並且連線\n\n``` js\nvar redis = require(\"redis\").createClient('6379', '127.0.0.1'); //port, IP\n```\n\nredis.set 寫入值\n\n``` js\nredis.set( key, value, function( err, reply ){\n  console.log( reply.toString() ); // 新增成功會回傳 ok\n});\n```\n\nredis.get 取得值\n\n``` js\nredis.get( key, function( err, reply ){\n  console.log( reply.toString() ); // 新增會回傳 value\n});\n```\n\ncache 資料的存活時間\n\n``` js\nredis.expire( key, 60);\n```\n\nredis 錯誤 callback function\n\n``` js\nredis.on( \"connect\", callback );\n```\n\nredis 錯誤 callback function\n\n``` js\nredis.on( \"error\", callback );\n```\n\nredis 驗證\n如果在 redis.conf 中有設定需要驗證的話，須在在此填入驗證碼，類似密碼的意思。\n\n``` js\nredis.auth(\"AndrewChen\");\n```\n\n## 結語\n\nRedis 基本上安裝完成就成功一半了，簡易的 set/get 即可使用，Redis 的操作本身不難，但謹慎的使用，小心記憶體的使用量，避免超額使用或是佔據了伺服器的空間。另外定期簡單的透過GUI介面檢查 Redis 的狀況也是相當不錯的選擇。\n","slug":"20150816_JS_redis","published":1,"updated":"2017-01-30T11:32:36.000Z","layout":"post","photos":[],"link":"","_id":"ciykz7ter000089u0vzdvact1","content":"<center><br><img src=\"https://redislabs.com/wp-content/images/redis-logo.png\" alt=\"Redis\"><br></center>\n\n<ul>\n<li><a href=\"http://redis.io\" target=\"_blank\" rel=\"external\">Redis</a></li>\n<li><a href=\"http://redis.io/documentation\" target=\"_blank\" rel=\"external\">Redis - 官方文件</a></li>\n<li><a href=\"https://www.npmjs.com/package/redis\" target=\"_blank\" rel=\"external\">Redis - npm</a></li>\n<li><a href=\"http://redisdesktop.com\" target=\"_blank\" rel=\"external\">Redis - GUI</a></li>\n</ul>\n<h2 id=\"簡介\">簡介</h2><p>Redis 是以 key-value 的形式在伺服器的記憶體中儲存資訊的方式，為伺服器命名做快取(cache)。有別於其他 noSQL 或是 RDB，key-value 即是使用一個 key 的值對應到一筆資料。而 Redis 的特色就是將這筆資料，寫在記憶體裡面。</p>\n<p>大概有幾種狀況會將資料寫入到快取中：</p>\n<ul>\n<li>在一定時間內會被大量請求的資料，如：新聞的 Top 10。</li>\n<li>某些伺服器會頻繁使用的資料，或全域變數。如：</li>\n<li>測試用的資料，短時間內要使用的假資料。</li>\n<li>也能當成 Session 使用。(相當不健康的觀念)</li>\n</ul>\n<p>Redis 本身會瓜分伺服器的記憶體來使用，Node.js 連線所使用的記憶體相對於 PHP/Apache 較少，除非能非常準確地掌握 Session 的數量，否則不建議 Redit 當成 Session 使用，同樣的意思不應該將 Redis 當成資料庫來只用。如果對 Redis 有相當大的需求，應該特地架設 Redis 的伺服器，避免兩套系統互相搶奪記憶體資源。</p>\n<h2 id=\"安裝\">安裝</h2><p>先從官方網站下載 Redis，解開壓縮檔之後，在資料夾下執行以下指令</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make</div></pre></td></tr></table></figure>\n<p>輸入指令後，Redis 會自行安裝，需要一段時間</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make test</div></pre></td></tr></table></figure>\n<p>Redis 會自行進行測試，測時完成後即可啟動，啟動並不需要在指定的資料夾下，屬於全域的</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-server</div></pre></td></tr></table></figure>\n<p>接著在 <a href=\"http://redisdesktop.com\" target=\"_blank\" rel=\"external\">Redis - GUI</a> 的介面中進行連線就可以檢視現在 Redis 內的資料。</p>\n<h2 id=\"使用\">使用</h2><p>在 Node.js 引用 Redis 的套件並且連線</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>).createClient(<span class=\"string\">'6379'</span>, <span class=\"string\">'127.0.0.1'</span>); <span class=\"comment\">//port, IP</span></div></pre></td></tr></table></figure>\n<p>redis.set 寫入值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.set( key, value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> err, reply </span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( reply.toString() ); <span class=\"comment\">// 新增成功會回傳 ok</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>redis.get 取得值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.get( key, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> err, reply </span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( reply.toString() ); <span class=\"comment\">// 新增會回傳 value</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>cache 資料的存活時間</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.expire( key, <span class=\"number\">60</span>);</div></pre></td></tr></table></figure>\n<p>redis 錯誤 callback function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.on( <span class=\"string\">\"connect\"</span>, callback );</div></pre></td></tr></table></figure>\n<p>redis 錯誤 callback function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.on( <span class=\"string\">\"error\"</span>, callback );</div></pre></td></tr></table></figure>\n<p>redis 驗證<br>如果在 redis.conf 中有設定需要驗證的話，須在在此填入驗證碼，類似密碼的意思。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.auth(<span class=\"string\">\"AndrewChen\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"結語\">結語</h2><p>Redis 基本上安裝完成就成功一半了，簡易的 set/get 即可使用，Redis 的操作本身不難，但謹慎的使用，小心記憶體的使用量，避免超額使用或是佔據了伺服器的空間。另外定期簡單的透過GUI介面檢查 Redis 的狀況也是相當不錯的選擇。</p>\n","excerpt":"","more":"<center><br><img src=\"https://redislabs.com/wp-content/images/redis-logo.png\" alt=\"Redis\"><br></center>\n\n<ul>\n<li><a href=\"http://redis.io\">Redis</a></li>\n<li><a href=\"http://redis.io/documentation\">Redis - 官方文件</a></li>\n<li><a href=\"https://www.npmjs.com/package/redis\">Redis - npm</a></li>\n<li><a href=\"http://redisdesktop.com\">Redis - GUI</a></li>\n</ul>\n<h2 id=\"簡介\">簡介</h2><p>Redis 是以 key-value 的形式在伺服器的記憶體中儲存資訊的方式，為伺服器命名做快取(cache)。有別於其他 noSQL 或是 RDB，key-value 即是使用一個 key 的值對應到一筆資料。而 Redis 的特色就是將這筆資料，寫在記憶體裡面。</p>\n<p>大概有幾種狀況會將資料寫入到快取中：</p>\n<ul>\n<li>在一定時間內會被大量請求的資料，如：新聞的 Top 10。</li>\n<li>某些伺服器會頻繁使用的資料，或全域變數。如：</li>\n<li>測試用的資料，短時間內要使用的假資料。</li>\n<li>也能當成 Session 使用。(相當不健康的觀念)</li>\n</ul>\n<p>Redis 本身會瓜分伺服器的記憶體來使用，Node.js 連線所使用的記憶體相對於 PHP/Apache 較少，除非能非常準確地掌握 Session 的數量，否則不建議 Redit 當成 Session 使用，同樣的意思不應該將 Redis 當成資料庫來只用。如果對 Redis 有相當大的需求，應該特地架設 Redis 的伺服器，避免兩套系統互相搶奪記憶體資源。</p>\n<h2 id=\"安裝\">安裝</h2><p>先從官方網站下載 Redis，解開壓縮檔之後，在資料夾下執行以下指令</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make</div></pre></td></tr></table></figure>\n<p>輸入指令後，Redis 會自行安裝，需要一段時間</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make test</div></pre></td></tr></table></figure>\n<p>Redis 會自行進行測試，測時完成後即可啟動，啟動並不需要在指定的資料夾下，屬於全域的</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-server</div></pre></td></tr></table></figure>\n<p>接著在 <a href=\"http://redisdesktop.com\">Redis - GUI</a> 的介面中進行連線就可以檢視現在 Redis 內的資料。</p>\n<h2 id=\"使用\">使用</h2><p>在 Node.js 引用 Redis 的套件並且連線</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>).createClient(<span class=\"string\">'6379'</span>, <span class=\"string\">'127.0.0.1'</span>); <span class=\"comment\">//port, IP</span></div></pre></td></tr></table></figure>\n<p>redis.set 寫入值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.set( key, value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> err, reply </span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( reply.toString() ); <span class=\"comment\">// 新增成功會回傳 ok</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>redis.get 取得值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.get( key, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> err, reply </span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( reply.toString() ); <span class=\"comment\">// 新增會回傳 value</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>cache 資料的存活時間</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.expire( key, <span class=\"number\">60</span>);</div></pre></td></tr></table></figure>\n<p>redis 錯誤 callback function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.on( <span class=\"string\">\"connect\"</span>, callback );</div></pre></td></tr></table></figure>\n<p>redis 錯誤 callback function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.on( <span class=\"string\">\"error\"</span>, callback );</div></pre></td></tr></table></figure>\n<p>redis 驗證<br>如果在 redis.conf 中有設定需要驗證的話，須在在此填入驗證碼，類似密碼的意思。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.auth(<span class=\"string\">\"AndrewChen\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"結語\">結語</h2><p>Redis 基本上安裝完成就成功一半了，簡易的 set/get 即可使用，Redis 的操作本身不難，但謹慎的使用，小心記憶體的使用量，避免超額使用或是佔據了伺服器的空間。另外定期簡單的透過GUI介面檢查 Redis 的狀況也是相當不錯的選擇。</p>\n"},{"title":"被討厭的勇氣 1 (下)","date":"2017-01-31T02:20:15.000Z","comments":0,"_content":"\n# 被討厭的勇氣\n\n![被討厭的勇氣](/images/books/被討厭的勇氣.jpg)\n\n作者：岸見一郎、古賀史健\n譯者：葉小燕\n出版社：究竟出版\n\n# 簡介\n\n2015年最火紅的書莫過於就是<被討厭的勇氣>，有別於一般心理學書籍，作者從個人心理的觀點來探討個人跟整個社會的互動，把焦點放在自己身上，了解自己、改變自己，不再是去瞭解他人或是嘗試透視對方的想法。思考自己在做什麼，讓自己的外在表態或是內在的心靈強化是書中相當明顯的觀點，而當我們自己變得更好時，或許也能帶動身邊的人跟著改變。\n\n# 個體心理學與整體論\n\n> 無法再分割的最小單位。\n> 精神與肉體無法分割、\n> 理性與情感無法分割、\n> 意識與無意識無法分割\n\n這邊指的無法分割是指我們在表達情緒時，整體是不可分割的，當我們在發脾氣時、在爭論時，理性與情感是無法分割的，也就是無論我們多麽理性，我們仍然是透過整個整體在與人溝通，無論如何都是兼具了理性與感性。\n\n# 人際關係的終極目標在於 \"社會意識\"\n\n> 把別人當成夥伴，並感覺到有自己的歸屬，稱為社會意識。\n\n共同體，共同體的目標也是整個社會。\n\n> 把對自我的執著轉變成為對他人的關心。\n\n# 你不是世界的中心\n\n> 為什麼只關心我?\n> 做不到 \"課題分離\"，被認同需求束搏的人，也是極度以自我為中心的。\n\n阿德勒的觀點為：希望自己取得社會的認同，這個觀點也只是從自己出發而已。只在乎別人是如何看我的這種生活方式，就是所謂的自我中心，只關心\"我\"的生活型態。\n\n> 別人並不是為了滿足你的期望而活，你只是共同體的一部份，不是中心。\n\n重新去思考自己能帶來的價值，能為大家貢獻什麼，而不是單純的思考自己能從大家那邊得到什麼。而為大家帶來什麼貢獻，這點是出自於善意，並不是為了獲得大家的讚賞，而是實質的非強迫性幫助。\n\n> 歸屬感避不是與生俱來的，而是要靠自己的雙手去獲得。\n\n人際關係 --> 課題分離 --> 社會意識\n\n社會意識的觀點在於共同體，不斷拉高自己的高度，透過巨觀的思維來看整件事情。不要把事情看得很單一，例如：誰誰誰不愛我了，我的人生...。要拉高看事情的維度與角度，瞭解到這些事情是本來就有可能發生的，並不是針對自己，遭遇變故後這整個世界也仍然在運轉，並沒有因此而停止。\n\n> 在害怕關係崩壞的恐懼下過日子，其實只是為別人而活，是不自由的生活方式。\n\n# 不責罵，也不稱讚\n\n> 背後的目的都是操控。\n\n如果透過單一手段的話，很容易二元化整個世界的事情，並開始追究是非對錯，達成事情只是為了避免責罵，或獲得獎賞，當我們抽掉賞罰時，會感覺到是事情是沒有意義。這個心態並不樂見。\n\n> 阿德勒心理學否定縱向關係，支持一切的橫向關係。\n\n縱向關係就是導致介入他人的課題的直接原因。因為覺得自己會處理得比對方更好。縱向關係會在自己的對外的各個感情中傳染，當你用縱向關係的心態去瞧不起某人時，另外一方面就投射出縱向關西的崇拜或是尊重另一個人，反之亦然。當我們用縱向關係在看但人際關係時，就會出現階級的情況，這會讓人際關係陷入利益的狀態，例如跟XXX約遲到一下沒關係，但是跟OOO約絕對不能遲到。而這種縱向關係最終會反映在重要的事情決策上，或是面對對方的態度。\n\n> 只要你與任何一個人建立了縱向關係，不知不覺間\n> 你所有的人際關係都會採用縱向的方式。\n\n# 關於稱讚\n\n> 稱讚是一種有能力者給無能力者的評價。\n\n責備容易導致迴避的處事行為，不斷地稱讚會導致被稱讚的人缺乏信心，稱讚也常常讓人誤解是為了稱讚而稱讚的。這邊的情緒處理相當的複雜，真誠與誠實是相當難掌握的，說者無心聽者有意，純粹的鼓勵往往令人起疑。\n\n> 人只有在自己有價值的時候，才會有勇氣。\n\n感謝，或是橫向的稱讚，都屬於比較好的方式。讓人感覺到對整件事情有幫助，感覺到自己有價值。因此肯定他人的作為，是一個更扎實的稱讚方式。(在兼具情與理的表達方式一書中有類似的說法)。\n\n> 當一個人覺得我對共同體來說是有益的時候，就能感受到自己的價值。\n\n這邊就詮釋了自卑感議題，為了追隨別人的觀感，在自己的心中映射出理想的自己，現在的自己與理想中的自己有差距，進而產生了自卑感，這個自卑感也有可能用自傲、炫耀來包裝。自卑感有可能產生動力，也有可能找藉口來詮釋這個自卑感，這時就成了人生的謊言，用來迴避自己無法解決的課題。獲得感謝不是從別人那裡獲得好的評價，而是自己主觀的認識我對別人有貢獻，間接地解決了自卑感的問題，接著有可能可以逐漸解開人生的課題，這屬於一種橫向的幫助，比縱向的幫助、直接性的稱讚來的有效果。\n\n# 只要存在，就有價值\n\n> 我們不以行為的層級，而是已存在的層級來看待別人。\n\n> 社會意識，必須以人開始去做。就算其他人不配合，也和你沒關係。\n> 應該由你開始，完全不必考慮其他人是否提供協助。\n\n這大概是整本書最接近我自己核心思想的一句話。但難免受傷、難免難受。有本書 \"把這份愛傳下去\"， 核心邏輯就是這個，總要有人開始，而不計代價。這樣就能像湖中的漣漪，傳遍整個水面。由自己開市就是最好的方式。\n\n# 小結\n\n交友的課題，不只單單是交朋友，包括與朋友相處上的關係，職場上的人際手腕等等，與整個社為的人相處的關係，這遠比想像中來得複雜，這包括了人與人之間的對等溝通，並且透過自己讓社會變得更好。幫助的不只是整個社會，同時也是在幫助自己，與社會地位比自己低的人建立橫向關係，同事就是在幫助自己與長輩建立橫向溝通的方式，也消除了自己的自卑感。\n\n******\n\n# 認真地活在當下\n\n### 過多的自我意識，反而牽制自我\n\n> 不是肯的自我，而是接納自我\n\n* 接納自我\n* 信任他人\n* 貢獻他人\n\n##### 接納自我\n\n接納自我跟肯定自我是不同的，自我肯定是肯定成功，說服自己能辦到，接納自我是接受那個失敗的自己，當失敗時無力挽回。並在接納之後，繼續的盡最大的努力前進。\n\n> 積極正面的斷念\n\n這就是整個阿德勒心理學最重要的核心價值之一，積極正面，明確的了解自己該做什麼，並且壁面自己陷入過往的泥沼中。不過份的肯定自己，正面的為自己努力，同時嘗試去幫助他人，一切是為了讓自己更好，讓自己對攝位多少有點貢獻。\n\n> 主啊\n> 求你四我平靜的心，去接納無法改變的事情;\n> 賜給我勇氣，去改變可以改變的東西;\n> 並賜給我智慧，去分辨這兩者的差異。\n> --- 尼布爾<寧靜的祈禱文>\n\n我們並非能力不足，只是缺乏勇氣而已。\n\n### 信用和信任有什麼不同\n\n> 相信別人的時候不附加任何條件，再怎麼樣無條件信任他人，最後不過是遭受背叛而已。\n\n重點並不是無條件的幫助別人，應該是在能力範圍內，而在幫助別人時，就只是幫助而已。不要在對方請求幫助時馬上產生懷疑，人跟人互相猜忌，會變得更複雜，觀念與 \"把這份愛傳下去\" 雷同，只要關心自己怎麼做就好，關心自己能不能幫助人，而不是反覆思考是否受到詐騙。\n\n> 只要你害怕信任，終將無法與人建立深厚的關係。\n\n這邊的論點在現實社會中比較難令人接受。這篇像大同世界的思考，屬於一種改變世界的手段，如果從現在起每個人都真誠以待，那這個世界就會變得更單純、更歡樂。\n\n### 工作的本質在於對他人貢獻\n\n> 所謂的貢獻他人並不是捨棄自我去為某人鞠躬盡瘁，而是為了實際感受自我的價值\n\n在整體社會共同體中，社會意識是讓自己有安全感的來源。可以說是一種存在感、自我價值感。阿德勒心理中認為，改變自我需要呼費過去 50% 的歲數時間\n也就是 20 歲的人需要花 10 年改變，同理，越年輕的人開始嘗試是理解，就能越早改變。\n\n### 工作狂是人生的謊言\n\n> 無論在哪種情況下，發動攻擊的那個人是有問題的，絕不是大家都錯了。\n\n這邊同事要思考，自我價值、情緒是種工具以及社會意識。人與人之間相處的方式。\n\n> 別把焦點放在無關緊要的小部分，甚至打算用狹隘的觀點來評論全世界。\n\n這種事情的極端狀況就是憂鬱症、躁鬱症等行為。但也有可能是比較讓然感覺正面的事情：工作狂。\n\n> 以工作為藉口迴避其他責任。\n\n以工作為藉口迴避其他人生的課題。交友的課題、愛的課題。這種就屬於先前提到的：行為層級。以自身的行為定義自己，並不是真正的存在的層級，不夠透徹了解自身的價值。\n\n### 由這一瞬間開始變得幸福\n\n阿德勒認為：幸福來自己認定自身的價值。自己所做的貢獻，可能可見或是不可見。\n\n> 所謂的幸福，就是貢獻感。\n\n這就屬於社會意識的範疇，了解自己的存在、自己的貢獻後就不需要別人的人同來定義自己的供獻。不屬於追求別人的認同感時，就能放下那個來自人際關係的包袱\n不必成為別人或是某個自己期待受到肯定的人，而是自己就是自己，自我認同，就不會以行為的層級，而是真正存在的層級參與社會的共同體。\n\n### 想成為特別存在的人有兩條路\n\n> 為了得到別人的關注，脫離普通的狀態，成為特別的存在\n\n有可能特別好，也有可能特別壞。當我們透過不太正當的手段追求受到關注，例如小孩子的打鬧，或是其他蓄意引人注目的問題，屬於簡便的追求卓越，追求的是自己受到關注的感覺，某種層面上，這也屬於一種自私的行為，單純為了滿足自己而已。\n\n### 甘於平凡的勇氣\n\n> 我們沒有必要刻意誇耀自己的優越性\n\n### 人生是一連串的剎那\n\n活在當下。追求的是此刻的心態，回頭時候看到許多光彩，這邊的觀念偏向說，並不是所有的事情都要完美個站照規劃達成，才能擁有好結果。如果你去爬山，計畫爬到山頂，可是爬了一半就下來，仍然是去爬山，並不是一切都要按照計畫的完美執行。而是當下最努力的我們，才適當我們在回憶時最甘甜的剎那。\n\n> 過去發生什麼事情，和當下沒有關係，而未來會如何，也不是當下要考慮的問題。\n> 不要用直線去衡量自己已經走到了哪裡，要看看每個剎那是如何度過的。\n\n從更現實的角度來看，如果我現在即刻身亡，我會後悔什麼，我最在意的是什麼，這就是這個剎那。這相當的難實踐。\n\n> 只要貢獻他人這顆引導之星還在，就不會徬徨，做什麼都可以。\n\n將自己導向正確的路途上\n\n> 必須有人開始去做。就算其他人不配合，也和你沒關係。這就是我的建議。\n> 應該由你開始，完全不必考慮其他人是否提供協助\n\n現在，就是現在，當我們想通的這一瞬間。\n","source":"_posts/20170131_BOOKS_被討厭的勇氣1-2.md","raw":"title: 被討厭的勇氣 1 (下)\ndate: 2017-01-31 10:20:15\ntags:\n- 讀書心得\ncategories: 讀書心得\ncomments: false\n---\n\n# 被討厭的勇氣\n\n![被討厭的勇氣](/images/books/被討厭的勇氣.jpg)\n\n作者：岸見一郎、古賀史健\n譯者：葉小燕\n出版社：究竟出版\n\n# 簡介\n\n2015年最火紅的書莫過於就是<被討厭的勇氣>，有別於一般心理學書籍，作者從個人心理的觀點來探討個人跟整個社會的互動，把焦點放在自己身上，了解自己、改變自己，不再是去瞭解他人或是嘗試透視對方的想法。思考自己在做什麼，讓自己的外在表態或是內在的心靈強化是書中相當明顯的觀點，而當我們自己變得更好時，或許也能帶動身邊的人跟著改變。\n\n# 個體心理學與整體論\n\n> 無法再分割的最小單位。\n> 精神與肉體無法分割、\n> 理性與情感無法分割、\n> 意識與無意識無法分割\n\n這邊指的無法分割是指我們在表達情緒時，整體是不可分割的，當我們在發脾氣時、在爭論時，理性與情感是無法分割的，也就是無論我們多麽理性，我們仍然是透過整個整體在與人溝通，無論如何都是兼具了理性與感性。\n\n# 人際關係的終極目標在於 \"社會意識\"\n\n> 把別人當成夥伴，並感覺到有自己的歸屬，稱為社會意識。\n\n共同體，共同體的目標也是整個社會。\n\n> 把對自我的執著轉變成為對他人的關心。\n\n# 你不是世界的中心\n\n> 為什麼只關心我?\n> 做不到 \"課題分離\"，被認同需求束搏的人，也是極度以自我為中心的。\n\n阿德勒的觀點為：希望自己取得社會的認同，這個觀點也只是從自己出發而已。只在乎別人是如何看我的這種生活方式，就是所謂的自我中心，只關心\"我\"的生活型態。\n\n> 別人並不是為了滿足你的期望而活，你只是共同體的一部份，不是中心。\n\n重新去思考自己能帶來的價值，能為大家貢獻什麼，而不是單純的思考自己能從大家那邊得到什麼。而為大家帶來什麼貢獻，這點是出自於善意，並不是為了獲得大家的讚賞，而是實質的非強迫性幫助。\n\n> 歸屬感避不是與生俱來的，而是要靠自己的雙手去獲得。\n\n人際關係 --> 課題分離 --> 社會意識\n\n社會意識的觀點在於共同體，不斷拉高自己的高度，透過巨觀的思維來看整件事情。不要把事情看得很單一，例如：誰誰誰不愛我了，我的人生...。要拉高看事情的維度與角度，瞭解到這些事情是本來就有可能發生的，並不是針對自己，遭遇變故後這整個世界也仍然在運轉，並沒有因此而停止。\n\n> 在害怕關係崩壞的恐懼下過日子，其實只是為別人而活，是不自由的生活方式。\n\n# 不責罵，也不稱讚\n\n> 背後的目的都是操控。\n\n如果透過單一手段的話，很容易二元化整個世界的事情，並開始追究是非對錯，達成事情只是為了避免責罵，或獲得獎賞，當我們抽掉賞罰時，會感覺到是事情是沒有意義。這個心態並不樂見。\n\n> 阿德勒心理學否定縱向關係，支持一切的橫向關係。\n\n縱向關係就是導致介入他人的課題的直接原因。因為覺得自己會處理得比對方更好。縱向關係會在自己的對外的各個感情中傳染，當你用縱向關係的心態去瞧不起某人時，另外一方面就投射出縱向關西的崇拜或是尊重另一個人，反之亦然。當我們用縱向關係在看但人際關係時，就會出現階級的情況，這會讓人際關係陷入利益的狀態，例如跟XXX約遲到一下沒關係，但是跟OOO約絕對不能遲到。而這種縱向關係最終會反映在重要的事情決策上，或是面對對方的態度。\n\n> 只要你與任何一個人建立了縱向關係，不知不覺間\n> 你所有的人際關係都會採用縱向的方式。\n\n# 關於稱讚\n\n> 稱讚是一種有能力者給無能力者的評價。\n\n責備容易導致迴避的處事行為，不斷地稱讚會導致被稱讚的人缺乏信心，稱讚也常常讓人誤解是為了稱讚而稱讚的。這邊的情緒處理相當的複雜，真誠與誠實是相當難掌握的，說者無心聽者有意，純粹的鼓勵往往令人起疑。\n\n> 人只有在自己有價值的時候，才會有勇氣。\n\n感謝，或是橫向的稱讚，都屬於比較好的方式。讓人感覺到對整件事情有幫助，感覺到自己有價值。因此肯定他人的作為，是一個更扎實的稱讚方式。(在兼具情與理的表達方式一書中有類似的說法)。\n\n> 當一個人覺得我對共同體來說是有益的時候，就能感受到自己的價值。\n\n這邊就詮釋了自卑感議題，為了追隨別人的觀感，在自己的心中映射出理想的自己，現在的自己與理想中的自己有差距，進而產生了自卑感，這個自卑感也有可能用自傲、炫耀來包裝。自卑感有可能產生動力，也有可能找藉口來詮釋這個自卑感，這時就成了人生的謊言，用來迴避自己無法解決的課題。獲得感謝不是從別人那裡獲得好的評價，而是自己主觀的認識我對別人有貢獻，間接地解決了自卑感的問題，接著有可能可以逐漸解開人生的課題，這屬於一種橫向的幫助，比縱向的幫助、直接性的稱讚來的有效果。\n\n# 只要存在，就有價值\n\n> 我們不以行為的層級，而是已存在的層級來看待別人。\n\n> 社會意識，必須以人開始去做。就算其他人不配合，也和你沒關係。\n> 應該由你開始，完全不必考慮其他人是否提供協助。\n\n這大概是整本書最接近我自己核心思想的一句話。但難免受傷、難免難受。有本書 \"把這份愛傳下去\"， 核心邏輯就是這個，總要有人開始，而不計代價。這樣就能像湖中的漣漪，傳遍整個水面。由自己開市就是最好的方式。\n\n# 小結\n\n交友的課題，不只單單是交朋友，包括與朋友相處上的關係，職場上的人際手腕等等，與整個社為的人相處的關係，這遠比想像中來得複雜，這包括了人與人之間的對等溝通，並且透過自己讓社會變得更好。幫助的不只是整個社會，同時也是在幫助自己，與社會地位比自己低的人建立橫向關係，同事就是在幫助自己與長輩建立橫向溝通的方式，也消除了自己的自卑感。\n\n******\n\n# 認真地活在當下\n\n### 過多的自我意識，反而牽制自我\n\n> 不是肯的自我，而是接納自我\n\n* 接納自我\n* 信任他人\n* 貢獻他人\n\n##### 接納自我\n\n接納自我跟肯定自我是不同的，自我肯定是肯定成功，說服自己能辦到，接納自我是接受那個失敗的自己，當失敗時無力挽回。並在接納之後，繼續的盡最大的努力前進。\n\n> 積極正面的斷念\n\n這就是整個阿德勒心理學最重要的核心價值之一，積極正面，明確的了解自己該做什麼，並且壁面自己陷入過往的泥沼中。不過份的肯定自己，正面的為自己努力，同時嘗試去幫助他人，一切是為了讓自己更好，讓自己對攝位多少有點貢獻。\n\n> 主啊\n> 求你四我平靜的心，去接納無法改變的事情;\n> 賜給我勇氣，去改變可以改變的東西;\n> 並賜給我智慧，去分辨這兩者的差異。\n> --- 尼布爾<寧靜的祈禱文>\n\n我們並非能力不足，只是缺乏勇氣而已。\n\n### 信用和信任有什麼不同\n\n> 相信別人的時候不附加任何條件，再怎麼樣無條件信任他人，最後不過是遭受背叛而已。\n\n重點並不是無條件的幫助別人，應該是在能力範圍內，而在幫助別人時，就只是幫助而已。不要在對方請求幫助時馬上產生懷疑，人跟人互相猜忌，會變得更複雜，觀念與 \"把這份愛傳下去\" 雷同，只要關心自己怎麼做就好，關心自己能不能幫助人，而不是反覆思考是否受到詐騙。\n\n> 只要你害怕信任，終將無法與人建立深厚的關係。\n\n這邊的論點在現實社會中比較難令人接受。這篇像大同世界的思考，屬於一種改變世界的手段，如果從現在起每個人都真誠以待，那這個世界就會變得更單純、更歡樂。\n\n### 工作的本質在於對他人貢獻\n\n> 所謂的貢獻他人並不是捨棄自我去為某人鞠躬盡瘁，而是為了實際感受自我的價值\n\n在整體社會共同體中，社會意識是讓自己有安全感的來源。可以說是一種存在感、自我價值感。阿德勒心理中認為，改變自我需要呼費過去 50% 的歲數時間\n也就是 20 歲的人需要花 10 年改變，同理，越年輕的人開始嘗試是理解，就能越早改變。\n\n### 工作狂是人生的謊言\n\n> 無論在哪種情況下，發動攻擊的那個人是有問題的，絕不是大家都錯了。\n\n這邊同事要思考，自我價值、情緒是種工具以及社會意識。人與人之間相處的方式。\n\n> 別把焦點放在無關緊要的小部分，甚至打算用狹隘的觀點來評論全世界。\n\n這種事情的極端狀況就是憂鬱症、躁鬱症等行為。但也有可能是比較讓然感覺正面的事情：工作狂。\n\n> 以工作為藉口迴避其他責任。\n\n以工作為藉口迴避其他人生的課題。交友的課題、愛的課題。這種就屬於先前提到的：行為層級。以自身的行為定義自己，並不是真正的存在的層級，不夠透徹了解自身的價值。\n\n### 由這一瞬間開始變得幸福\n\n阿德勒認為：幸福來自己認定自身的價值。自己所做的貢獻，可能可見或是不可見。\n\n> 所謂的幸福，就是貢獻感。\n\n這就屬於社會意識的範疇，了解自己的存在、自己的貢獻後就不需要別人的人同來定義自己的供獻。不屬於追求別人的認同感時，就能放下那個來自人際關係的包袱\n不必成為別人或是某個自己期待受到肯定的人，而是自己就是自己，自我認同，就不會以行為的層級，而是真正存在的層級參與社會的共同體。\n\n### 想成為特別存在的人有兩條路\n\n> 為了得到別人的關注，脫離普通的狀態，成為特別的存在\n\n有可能特別好，也有可能特別壞。當我們透過不太正當的手段追求受到關注，例如小孩子的打鬧，或是其他蓄意引人注目的問題，屬於簡便的追求卓越，追求的是自己受到關注的感覺，某種層面上，這也屬於一種自私的行為，單純為了滿足自己而已。\n\n### 甘於平凡的勇氣\n\n> 我們沒有必要刻意誇耀自己的優越性\n\n### 人生是一連串的剎那\n\n活在當下。追求的是此刻的心態，回頭時候看到許多光彩，這邊的觀念偏向說，並不是所有的事情都要完美個站照規劃達成，才能擁有好結果。如果你去爬山，計畫爬到山頂，可是爬了一半就下來，仍然是去爬山，並不是一切都要按照計畫的完美執行。而是當下最努力的我們，才適當我們在回憶時最甘甜的剎那。\n\n> 過去發生什麼事情，和當下沒有關係，而未來會如何，也不是當下要考慮的問題。\n> 不要用直線去衡量自己已經走到了哪裡，要看看每個剎那是如何度過的。\n\n從更現實的角度來看，如果我現在即刻身亡，我會後悔什麼，我最在意的是什麼，這就是這個剎那。這相當的難實踐。\n\n> 只要貢獻他人這顆引導之星還在，就不會徬徨，做什麼都可以。\n\n將自己導向正確的路途上\n\n> 必須有人開始去做。就算其他人不配合，也和你沒關係。這就是我的建議。\n> 應該由你開始，完全不必考慮其他人是否提供協助\n\n現在，就是現在，當我們想通的這一瞬間。\n","slug":"20170131_BOOKS_被討厭的勇氣1-2","published":1,"updated":"2017-01-31T15:12:57.000Z","layout":"post","photos":[],"link":"","_id":"ciylnyozs00007ru0a4crvlln","content":"<h1 id=\"被討厭的勇氣\">被討厭的勇氣</h1><p><img src=\"/images/books/被討厭的勇氣.jpg\" alt=\"被討厭的勇氣\"></p>\n<p>作者：岸見一郎、古賀史健<br>譯者：葉小燕<br>出版社：究竟出版</p>\n<h1 id=\"簡介\">簡介</h1><p>2015年最火紅的書莫過於就是&lt;被討厭的勇氣&gt;，有別於一般心理學書籍，作者從個人心理的觀點來探討個人跟整個社會的互動，把焦點放在自己身上，了解自己、改變自己，不再是去瞭解他人或是嘗試透視對方的想法。思考自己在做什麼，讓自己的外在表態或是內在的心靈強化是書中相當明顯的觀點，而當我們自己變得更好時，或許也能帶動身邊的人跟著改變。</p>\n<h1 id=\"個體心理學與整體論\">個體心理學與整體論</h1><blockquote>\n<p>無法再分割的最小單位。<br>精神與肉體無法分割、<br>理性與情感無法分割、<br>意識與無意識無法分割</p>\n</blockquote>\n<p>這邊指的無法分割是指我們在表達情緒時，整體是不可分割的，當我們在發脾氣時、在爭論時，理性與情感是無法分割的，也就是無論我們多麽理性，我們仍然是透過整個整體在與人溝通，無論如何都是兼具了理性與感性。</p>\n<h1 id=\"人際關係的終極目標在於_“社會意識”\">人際關係的終極目標在於 “社會意識”</h1><blockquote>\n<p>把別人當成夥伴，並感覺到有自己的歸屬，稱為社會意識。</p>\n</blockquote>\n<p>共同體，共同體的目標也是整個社會。</p>\n<blockquote>\n<p>把對自我的執著轉變成為對他人的關心。</p>\n</blockquote>\n<h1 id=\"你不是世界的中心\">你不是世界的中心</h1><blockquote>\n<p>為什麼只關心我?<br>做不到 “課題分離”，被認同需求束搏的人，也是極度以自我為中心的。</p>\n</blockquote>\n<p>阿德勒的觀點為：希望自己取得社會的認同，這個觀點也只是從自己出發而已。只在乎別人是如何看我的這種生活方式，就是所謂的自我中心，只關心”我”的生活型態。</p>\n<blockquote>\n<p>別人並不是為了滿足你的期望而活，你只是共同體的一部份，不是中心。</p>\n</blockquote>\n<p>重新去思考自己能帶來的價值，能為大家貢獻什麼，而不是單純的思考自己能從大家那邊得到什麼。而為大家帶來什麼貢獻，這點是出自於善意，並不是為了獲得大家的讚賞，而是實質的非強迫性幫助。</p>\n<blockquote>\n<p>歸屬感避不是與生俱來的，而是要靠自己的雙手去獲得。</p>\n</blockquote>\n<p>人際關係 –&gt; 課題分離 –&gt; 社會意識</p>\n<p>社會意識的觀點在於共同體，不斷拉高自己的高度，透過巨觀的思維來看整件事情。不要把事情看得很單一，例如：誰誰誰不愛我了，我的人生…。要拉高看事情的維度與角度，瞭解到這些事情是本來就有可能發生的，並不是針對自己，遭遇變故後這整個世界也仍然在運轉，並沒有因此而停止。</p>\n<blockquote>\n<p>在害怕關係崩壞的恐懼下過日子，其實只是為別人而活，是不自由的生活方式。</p>\n</blockquote>\n<h1 id=\"不責罵，也不稱讚\">不責罵，也不稱讚</h1><blockquote>\n<p>背後的目的都是操控。</p>\n</blockquote>\n<p>如果透過單一手段的話，很容易二元化整個世界的事情，並開始追究是非對錯，達成事情只是為了避免責罵，或獲得獎賞，當我們抽掉賞罰時，會感覺到是事情是沒有意義。這個心態並不樂見。</p>\n<blockquote>\n<p>阿德勒心理學否定縱向關係，支持一切的橫向關係。</p>\n</blockquote>\n<p>縱向關係就是導致介入他人的課題的直接原因。因為覺得自己會處理得比對方更好。縱向關係會在自己的對外的各個感情中傳染，當你用縱向關係的心態去瞧不起某人時，另外一方面就投射出縱向關西的崇拜或是尊重另一個人，反之亦然。當我們用縱向關係在看但人際關係時，就會出現階級的情況，這會讓人際關係陷入利益的狀態，例如跟XXX約遲到一下沒關係，但是跟OOO約絕對不能遲到。而這種縱向關係最終會反映在重要的事情決策上，或是面對對方的態度。</p>\n<blockquote>\n<p>只要你與任何一個人建立了縱向關係，不知不覺間<br>你所有的人際關係都會採用縱向的方式。</p>\n</blockquote>\n<h1 id=\"關於稱讚\">關於稱讚</h1><blockquote>\n<p>稱讚是一種有能力者給無能力者的評價。</p>\n</blockquote>\n<p>責備容易導致迴避的處事行為，不斷地稱讚會導致被稱讚的人缺乏信心，稱讚也常常讓人誤解是為了稱讚而稱讚的。這邊的情緒處理相當的複雜，真誠與誠實是相當難掌握的，說者無心聽者有意，純粹的鼓勵往往令人起疑。</p>\n<blockquote>\n<p>人只有在自己有價值的時候，才會有勇氣。</p>\n</blockquote>\n<p>感謝，或是橫向的稱讚，都屬於比較好的方式。讓人感覺到對整件事情有幫助，感覺到自己有價值。因此肯定他人的作為，是一個更扎實的稱讚方式。(在兼具情與理的表達方式一書中有類似的說法)。</p>\n<blockquote>\n<p>當一個人覺得我對共同體來說是有益的時候，就能感受到自己的價值。</p>\n</blockquote>\n<p>這邊就詮釋了自卑感議題，為了追隨別人的觀感，在自己的心中映射出理想的自己，現在的自己與理想中的自己有差距，進而產生了自卑感，這個自卑感也有可能用自傲、炫耀來包裝。自卑感有可能產生動力，也有可能找藉口來詮釋這個自卑感，這時就成了人生的謊言，用來迴避自己無法解決的課題。獲得感謝不是從別人那裡獲得好的評價，而是自己主觀的認識我對別人有貢獻，間接地解決了自卑感的問題，接著有可能可以逐漸解開人生的課題，這屬於一種橫向的幫助，比縱向的幫助、直接性的稱讚來的有效果。</p>\n<h1 id=\"只要存在，就有價值\">只要存在，就有價值</h1><blockquote>\n<p>我們不以行為的層級，而是已存在的層級來看待別人。</p>\n<p>社會意識，必須以人開始去做。就算其他人不配合，也和你沒關係。<br>應該由你開始，完全不必考慮其他人是否提供協助。</p>\n</blockquote>\n<p>這大概是整本書最接近我自己核心思想的一句話。但難免受傷、難免難受。有本書 “把這份愛傳下去”， 核心邏輯就是這個，總要有人開始，而不計代價。這樣就能像湖中的漣漪，傳遍整個水面。由自己開市就是最好的方式。</p>\n<h1 id=\"小結\">小結</h1><p>交友的課題，不只單單是交朋友，包括與朋友相處上的關係，職場上的人際手腕等等，與整個社為的人相處的關係，這遠比想像中來得複雜，這包括了人與人之間的對等溝通，並且透過自己讓社會變得更好。幫助的不只是整個社會，同時也是在幫助自己，與社會地位比自己低的人建立橫向關係，同事就是在幫助自己與長輩建立橫向溝通的方式，也消除了自己的自卑感。</p>\n<hr>\n<h1 id=\"認真地活在當下\">認真地活在當下</h1><h3 id=\"過多的自我意識，反而牽制自我\">過多的自我意識，反而牽制自我</h3><blockquote>\n<p>不是肯的自我，而是接納自我</p>\n</blockquote>\n<ul>\n<li>接納自我</li>\n<li>信任他人</li>\n<li>貢獻他人</li>\n</ul>\n<h5 id=\"接納自我\">接納自我</h5><p>接納自我跟肯定自我是不同的，自我肯定是肯定成功，說服自己能辦到，接納自我是接受那個失敗的自己，當失敗時無力挽回。並在接納之後，繼續的盡最大的努力前進。</p>\n<blockquote>\n<p>積極正面的斷念</p>\n</blockquote>\n<p>這就是整個阿德勒心理學最重要的核心價值之一，積極正面，明確的了解自己該做什麼，並且壁面自己陷入過往的泥沼中。不過份的肯定自己，正面的為自己努力，同時嘗試去幫助他人，一切是為了讓自己更好，讓自己對攝位多少有點貢獻。</p>\n<blockquote>\n<p>主啊<br>求你四我平靜的心，去接納無法改變的事情;<br>賜給我勇氣，去改變可以改變的東西;<br>並賜給我智慧，去分辨這兩者的差異。<br>— 尼布爾&lt;寧靜的祈禱文&gt;</p>\n</blockquote>\n<p>我們並非能力不足，只是缺乏勇氣而已。</p>\n<h3 id=\"信用和信任有什麼不同\">信用和信任有什麼不同</h3><blockquote>\n<p>相信別人的時候不附加任何條件，再怎麼樣無條件信任他人，最後不過是遭受背叛而已。</p>\n</blockquote>\n<p>重點並不是無條件的幫助別人，應該是在能力範圍內，而在幫助別人時，就只是幫助而已。不要在對方請求幫助時馬上產生懷疑，人跟人互相猜忌，會變得更複雜，觀念與 “把這份愛傳下去” 雷同，只要關心自己怎麼做就好，關心自己能不能幫助人，而不是反覆思考是否受到詐騙。</p>\n<blockquote>\n<p>只要你害怕信任，終將無法與人建立深厚的關係。</p>\n</blockquote>\n<p>這邊的論點在現實社會中比較難令人接受。這篇像大同世界的思考，屬於一種改變世界的手段，如果從現在起每個人都真誠以待，那這個世界就會變得更單純、更歡樂。</p>\n<h3 id=\"工作的本質在於對他人貢獻\">工作的本質在於對他人貢獻</h3><blockquote>\n<p>所謂的貢獻他人並不是捨棄自我去為某人鞠躬盡瘁，而是為了實際感受自我的價值</p>\n</blockquote>\n<p>在整體社會共同體中，社會意識是讓自己有安全感的來源。可以說是一種存在感、自我價值感。阿德勒心理中認為，改變自我需要呼費過去 50% 的歲數時間<br>也就是 20 歲的人需要花 10 年改變，同理，越年輕的人開始嘗試是理解，就能越早改變。</p>\n<h3 id=\"工作狂是人生的謊言\">工作狂是人生的謊言</h3><blockquote>\n<p>無論在哪種情況下，發動攻擊的那個人是有問題的，絕不是大家都錯了。</p>\n</blockquote>\n<p>這邊同事要思考，自我價值、情緒是種工具以及社會意識。人與人之間相處的方式。</p>\n<blockquote>\n<p>別把焦點放在無關緊要的小部分，甚至打算用狹隘的觀點來評論全世界。</p>\n</blockquote>\n<p>這種事情的極端狀況就是憂鬱症、躁鬱症等行為。但也有可能是比較讓然感覺正面的事情：工作狂。</p>\n<blockquote>\n<p>以工作為藉口迴避其他責任。</p>\n</blockquote>\n<p>以工作為藉口迴避其他人生的課題。交友的課題、愛的課題。這種就屬於先前提到的：行為層級。以自身的行為定義自己，並不是真正的存在的層級，不夠透徹了解自身的價值。</p>\n<h3 id=\"由這一瞬間開始變得幸福\">由這一瞬間開始變得幸福</h3><p>阿德勒認為：幸福來自己認定自身的價值。自己所做的貢獻，可能可見或是不可見。</p>\n<blockquote>\n<p>所謂的幸福，就是貢獻感。</p>\n</blockquote>\n<p>這就屬於社會意識的範疇，了解自己的存在、自己的貢獻後就不需要別人的人同來定義自己的供獻。不屬於追求別人的認同感時，就能放下那個來自人際關係的包袱<br>不必成為別人或是某個自己期待受到肯定的人，而是自己就是自己，自我認同，就不會以行為的層級，而是真正存在的層級參與社會的共同體。</p>\n<h3 id=\"想成為特別存在的人有兩條路\">想成為特別存在的人有兩條路</h3><blockquote>\n<p>為了得到別人的關注，脫離普通的狀態，成為特別的存在</p>\n</blockquote>\n<p>有可能特別好，也有可能特別壞。當我們透過不太正當的手段追求受到關注，例如小孩子的打鬧，或是其他蓄意引人注目的問題，屬於簡便的追求卓越，追求的是自己受到關注的感覺，某種層面上，這也屬於一種自私的行為，單純為了滿足自己而已。</p>\n<h3 id=\"甘於平凡的勇氣\">甘於平凡的勇氣</h3><blockquote>\n<p>我們沒有必要刻意誇耀自己的優越性</p>\n</blockquote>\n<h3 id=\"人生是一連串的剎那\">人生是一連串的剎那</h3><p>活在當下。追求的是此刻的心態，回頭時候看到許多光彩，這邊的觀念偏向說，並不是所有的事情都要完美個站照規劃達成，才能擁有好結果。如果你去爬山，計畫爬到山頂，可是爬了一半就下來，仍然是去爬山，並不是一切都要按照計畫的完美執行。而是當下最努力的我們，才適當我們在回憶時最甘甜的剎那。</p>\n<blockquote>\n<p>過去發生什麼事情，和當下沒有關係，而未來會如何，也不是當下要考慮的問題。<br>不要用直線去衡量自己已經走到了哪裡，要看看每個剎那是如何度過的。</p>\n</blockquote>\n<p>從更現實的角度來看，如果我現在即刻身亡，我會後悔什麼，我最在意的是什麼，這就是這個剎那。這相當的難實踐。</p>\n<blockquote>\n<p>只要貢獻他人這顆引導之星還在，就不會徬徨，做什麼都可以。</p>\n</blockquote>\n<p>將自己導向正確的路途上</p>\n<blockquote>\n<p>必須有人開始去做。就算其他人不配合，也和你沒關係。這就是我的建議。<br>應該由你開始，完全不必考慮其他人是否提供協助</p>\n</blockquote>\n<p>現在，就是現在，當我們想通的這一瞬間。</p>\n","excerpt":"","more":"<h1 id=\"被討厭的勇氣\">被討厭的勇氣</h1><p><img src=\"/images/books/被討厭的勇氣.jpg\" alt=\"被討厭的勇氣\"></p>\n<p>作者：岸見一郎、古賀史健<br>譯者：葉小燕<br>出版社：究竟出版</p>\n<h1 id=\"簡介\">簡介</h1><p>2015年最火紅的書莫過於就是&lt;被討厭的勇氣&gt;，有別於一般心理學書籍，作者從個人心理的觀點來探討個人跟整個社會的互動，把焦點放在自己身上，了解自己、改變自己，不再是去瞭解他人或是嘗試透視對方的想法。思考自己在做什麼，讓自己的外在表態或是內在的心靈強化是書中相當明顯的觀點，而當我們自己變得更好時，或許也能帶動身邊的人跟著改變。</p>\n<h1 id=\"個體心理學與整體論\">個體心理學與整體論</h1><blockquote>\n<p>無法再分割的最小單位。<br>精神與肉體無法分割、<br>理性與情感無法分割、<br>意識與無意識無法分割</p>\n</blockquote>\n<p>這邊指的無法分割是指我們在表達情緒時，整體是不可分割的，當我們在發脾氣時、在爭論時，理性與情感是無法分割的，也就是無論我們多麽理性，我們仍然是透過整個整體在與人溝通，無論如何都是兼具了理性與感性。</p>\n<h1 id=\"人際關係的終極目標在於_“社會意識”\">人際關係的終極目標在於 “社會意識”</h1><blockquote>\n<p>把別人當成夥伴，並感覺到有自己的歸屬，稱為社會意識。</p>\n</blockquote>\n<p>共同體，共同體的目標也是整個社會。</p>\n<blockquote>\n<p>把對自我的執著轉變成為對他人的關心。</p>\n</blockquote>\n<h1 id=\"你不是世界的中心\">你不是世界的中心</h1><blockquote>\n<p>為什麼只關心我?<br>做不到 “課題分離”，被認同需求束搏的人，也是極度以自我為中心的。</p>\n</blockquote>\n<p>阿德勒的觀點為：希望自己取得社會的認同，這個觀點也只是從自己出發而已。只在乎別人是如何看我的這種生活方式，就是所謂的自我中心，只關心”我”的生活型態。</p>\n<blockquote>\n<p>別人並不是為了滿足你的期望而活，你只是共同體的一部份，不是中心。</p>\n</blockquote>\n<p>重新去思考自己能帶來的價值，能為大家貢獻什麼，而不是單純的思考自己能從大家那邊得到什麼。而為大家帶來什麼貢獻，這點是出自於善意，並不是為了獲得大家的讚賞，而是實質的非強迫性幫助。</p>\n<blockquote>\n<p>歸屬感避不是與生俱來的，而是要靠自己的雙手去獲得。</p>\n</blockquote>\n<p>人際關係 –&gt; 課題分離 –&gt; 社會意識</p>\n<p>社會意識的觀點在於共同體，不斷拉高自己的高度，透過巨觀的思維來看整件事情。不要把事情看得很單一，例如：誰誰誰不愛我了，我的人生…。要拉高看事情的維度與角度，瞭解到這些事情是本來就有可能發生的，並不是針對自己，遭遇變故後這整個世界也仍然在運轉，並沒有因此而停止。</p>\n<blockquote>\n<p>在害怕關係崩壞的恐懼下過日子，其實只是為別人而活，是不自由的生活方式。</p>\n</blockquote>\n<h1 id=\"不責罵，也不稱讚\">不責罵，也不稱讚</h1><blockquote>\n<p>背後的目的都是操控。</p>\n</blockquote>\n<p>如果透過單一手段的話，很容易二元化整個世界的事情，並開始追究是非對錯，達成事情只是為了避免責罵，或獲得獎賞，當我們抽掉賞罰時，會感覺到是事情是沒有意義。這個心態並不樂見。</p>\n<blockquote>\n<p>阿德勒心理學否定縱向關係，支持一切的橫向關係。</p>\n</blockquote>\n<p>縱向關係就是導致介入他人的課題的直接原因。因為覺得自己會處理得比對方更好。縱向關係會在自己的對外的各個感情中傳染，當你用縱向關係的心態去瞧不起某人時，另外一方面就投射出縱向關西的崇拜或是尊重另一個人，反之亦然。當我們用縱向關係在看但人際關係時，就會出現階級的情況，這會讓人際關係陷入利益的狀態，例如跟XXX約遲到一下沒關係，但是跟OOO約絕對不能遲到。而這種縱向關係最終會反映在重要的事情決策上，或是面對對方的態度。</p>\n<blockquote>\n<p>只要你與任何一個人建立了縱向關係，不知不覺間<br>你所有的人際關係都會採用縱向的方式。</p>\n</blockquote>\n<h1 id=\"關於稱讚\">關於稱讚</h1><blockquote>\n<p>稱讚是一種有能力者給無能力者的評價。</p>\n</blockquote>\n<p>責備容易導致迴避的處事行為，不斷地稱讚會導致被稱讚的人缺乏信心，稱讚也常常讓人誤解是為了稱讚而稱讚的。這邊的情緒處理相當的複雜，真誠與誠實是相當難掌握的，說者無心聽者有意，純粹的鼓勵往往令人起疑。</p>\n<blockquote>\n<p>人只有在自己有價值的時候，才會有勇氣。</p>\n</blockquote>\n<p>感謝，或是橫向的稱讚，都屬於比較好的方式。讓人感覺到對整件事情有幫助，感覺到自己有價值。因此肯定他人的作為，是一個更扎實的稱讚方式。(在兼具情與理的表達方式一書中有類似的說法)。</p>\n<blockquote>\n<p>當一個人覺得我對共同體來說是有益的時候，就能感受到自己的價值。</p>\n</blockquote>\n<p>這邊就詮釋了自卑感議題，為了追隨別人的觀感，在自己的心中映射出理想的自己，現在的自己與理想中的自己有差距，進而產生了自卑感，這個自卑感也有可能用自傲、炫耀來包裝。自卑感有可能產生動力，也有可能找藉口來詮釋這個自卑感，這時就成了人生的謊言，用來迴避自己無法解決的課題。獲得感謝不是從別人那裡獲得好的評價，而是自己主觀的認識我對別人有貢獻，間接地解決了自卑感的問題，接著有可能可以逐漸解開人生的課題，這屬於一種橫向的幫助，比縱向的幫助、直接性的稱讚來的有效果。</p>\n<h1 id=\"只要存在，就有價值\">只要存在，就有價值</h1><blockquote>\n<p>我們不以行為的層級，而是已存在的層級來看待別人。</p>\n<p>社會意識，必須以人開始去做。就算其他人不配合，也和你沒關係。<br>應該由你開始，完全不必考慮其他人是否提供協助。</p>\n</blockquote>\n<p>這大概是整本書最接近我自己核心思想的一句話。但難免受傷、難免難受。有本書 “把這份愛傳下去”， 核心邏輯就是這個，總要有人開始，而不計代價。這樣就能像湖中的漣漪，傳遍整個水面。由自己開市就是最好的方式。</p>\n<h1 id=\"小結\">小結</h1><p>交友的課題，不只單單是交朋友，包括與朋友相處上的關係，職場上的人際手腕等等，與整個社為的人相處的關係，這遠比想像中來得複雜，這包括了人與人之間的對等溝通，並且透過自己讓社會變得更好。幫助的不只是整個社會，同時也是在幫助自己，與社會地位比自己低的人建立橫向關係，同事就是在幫助自己與長輩建立橫向溝通的方式，也消除了自己的自卑感。</p>\n<hr>\n<h1 id=\"認真地活在當下\">認真地活在當下</h1><h3 id=\"過多的自我意識，反而牽制自我\">過多的自我意識，反而牽制自我</h3><blockquote>\n<p>不是肯的自我，而是接納自我</p>\n</blockquote>\n<ul>\n<li>接納自我</li>\n<li>信任他人</li>\n<li>貢獻他人</li>\n</ul>\n<h5 id=\"接納自我\">接納自我</h5><p>接納自我跟肯定自我是不同的，自我肯定是肯定成功，說服自己能辦到，接納自我是接受那個失敗的自己，當失敗時無力挽回。並在接納之後，繼續的盡最大的努力前進。</p>\n<blockquote>\n<p>積極正面的斷念</p>\n</blockquote>\n<p>這就是整個阿德勒心理學最重要的核心價值之一，積極正面，明確的了解自己該做什麼，並且壁面自己陷入過往的泥沼中。不過份的肯定自己，正面的為自己努力，同時嘗試去幫助他人，一切是為了讓自己更好，讓自己對攝位多少有點貢獻。</p>\n<blockquote>\n<p>主啊<br>求你四我平靜的心，去接納無法改變的事情;<br>賜給我勇氣，去改變可以改變的東西;<br>並賜給我智慧，去分辨這兩者的差異。<br>— 尼布爾&lt;寧靜的祈禱文&gt;</p>\n</blockquote>\n<p>我們並非能力不足，只是缺乏勇氣而已。</p>\n<h3 id=\"信用和信任有什麼不同\">信用和信任有什麼不同</h3><blockquote>\n<p>相信別人的時候不附加任何條件，再怎麼樣無條件信任他人，最後不過是遭受背叛而已。</p>\n</blockquote>\n<p>重點並不是無條件的幫助別人，應該是在能力範圍內，而在幫助別人時，就只是幫助而已。不要在對方請求幫助時馬上產生懷疑，人跟人互相猜忌，會變得更複雜，觀念與 “把這份愛傳下去” 雷同，只要關心自己怎麼做就好，關心自己能不能幫助人，而不是反覆思考是否受到詐騙。</p>\n<blockquote>\n<p>只要你害怕信任，終將無法與人建立深厚的關係。</p>\n</blockquote>\n<p>這邊的論點在現實社會中比較難令人接受。這篇像大同世界的思考，屬於一種改變世界的手段，如果從現在起每個人都真誠以待，那這個世界就會變得更單純、更歡樂。</p>\n<h3 id=\"工作的本質在於對他人貢獻\">工作的本質在於對他人貢獻</h3><blockquote>\n<p>所謂的貢獻他人並不是捨棄自我去為某人鞠躬盡瘁，而是為了實際感受自我的價值</p>\n</blockquote>\n<p>在整體社會共同體中，社會意識是讓自己有安全感的來源。可以說是一種存在感、自我價值感。阿德勒心理中認為，改變自我需要呼費過去 50% 的歲數時間<br>也就是 20 歲的人需要花 10 年改變，同理，越年輕的人開始嘗試是理解，就能越早改變。</p>\n<h3 id=\"工作狂是人生的謊言\">工作狂是人生的謊言</h3><blockquote>\n<p>無論在哪種情況下，發動攻擊的那個人是有問題的，絕不是大家都錯了。</p>\n</blockquote>\n<p>這邊同事要思考，自我價值、情緒是種工具以及社會意識。人與人之間相處的方式。</p>\n<blockquote>\n<p>別把焦點放在無關緊要的小部分，甚至打算用狹隘的觀點來評論全世界。</p>\n</blockquote>\n<p>這種事情的極端狀況就是憂鬱症、躁鬱症等行為。但也有可能是比較讓然感覺正面的事情：工作狂。</p>\n<blockquote>\n<p>以工作為藉口迴避其他責任。</p>\n</blockquote>\n<p>以工作為藉口迴避其他人生的課題。交友的課題、愛的課題。這種就屬於先前提到的：行為層級。以自身的行為定義自己，並不是真正的存在的層級，不夠透徹了解自身的價值。</p>\n<h3 id=\"由這一瞬間開始變得幸福\">由這一瞬間開始變得幸福</h3><p>阿德勒認為：幸福來自己認定自身的價值。自己所做的貢獻，可能可見或是不可見。</p>\n<blockquote>\n<p>所謂的幸福，就是貢獻感。</p>\n</blockquote>\n<p>這就屬於社會意識的範疇，了解自己的存在、自己的貢獻後就不需要別人的人同來定義自己的供獻。不屬於追求別人的認同感時，就能放下那個來自人際關係的包袱<br>不必成為別人或是某個自己期待受到肯定的人，而是自己就是自己，自我認同，就不會以行為的層級，而是真正存在的層級參與社會的共同體。</p>\n<h3 id=\"想成為特別存在的人有兩條路\">想成為特別存在的人有兩條路</h3><blockquote>\n<p>為了得到別人的關注，脫離普通的狀態，成為特別的存在</p>\n</blockquote>\n<p>有可能特別好，也有可能特別壞。當我們透過不太正當的手段追求受到關注，例如小孩子的打鬧，或是其他蓄意引人注目的問題，屬於簡便的追求卓越，追求的是自己受到關注的感覺，某種層面上，這也屬於一種自私的行為，單純為了滿足自己而已。</p>\n<h3 id=\"甘於平凡的勇氣\">甘於平凡的勇氣</h3><blockquote>\n<p>我們沒有必要刻意誇耀自己的優越性</p>\n</blockquote>\n<h3 id=\"人生是一連串的剎那\">人生是一連串的剎那</h3><p>活在當下。追求的是此刻的心態，回頭時候看到許多光彩，這邊的觀念偏向說，並不是所有的事情都要完美個站照規劃達成，才能擁有好結果。如果你去爬山，計畫爬到山頂，可是爬了一半就下來，仍然是去爬山，並不是一切都要按照計畫的完美執行。而是當下最努力的我們，才適當我們在回憶時最甘甜的剎那。</p>\n<blockquote>\n<p>過去發生什麼事情，和當下沒有關係，而未來會如何，也不是當下要考慮的問題。<br>不要用直線去衡量自己已經走到了哪裡，要看看每個剎那是如何度過的。</p>\n</blockquote>\n<p>從更現實的角度來看，如果我現在即刻身亡，我會後悔什麼，我最在意的是什麼，這就是這個剎那。這相當的難實踐。</p>\n<blockquote>\n<p>只要貢獻他人這顆引導之星還在，就不會徬徨，做什麼都可以。</p>\n</blockquote>\n<p>將自己導向正確的路途上</p>\n<blockquote>\n<p>必須有人開始去做。就算其他人不配合，也和你沒關係。這就是我的建議。<br>應該由你開始，完全不必考慮其他人是否提供協助</p>\n</blockquote>\n<p>現在，就是現在，當我們想通的這一瞬間。</p>\n"},{"title":"被討厭的勇氣 1 (上)","date":"2017-01-31T02:20:15.000Z","comments":0,"_content":"\n# 被討厭的勇氣\n\n![被討厭的勇氣](/images/books/被討厭的勇氣.jpg)\n\n作者：岸見一郎、古賀史健\n譯者：葉小燕\n出版社：究竟出版\n\n# 簡介\n\n2015年最火紅的書莫過於就是<被討厭的勇氣>，有別於一般心理學書籍，作者從個人心理的觀點來探討個人跟整個社會的互動，把焦點放在自己身上，了解自己、改變自己，不再是去瞭解他人或是嘗試透視對方的想法。思考自己在做什麼，讓自己的外在表態或是內在的心靈強化是書中相當明顯的觀點，而當我們自己變得更好時，或許也能帶動身邊的人跟著改變。\n\n# 否定心理創傷\n\n*****\n\n### 心理創傷並不存在\n\n阿德勒心理學明確的否定心理創傷。\n\n> 不要由經驗來決定自我，而是由經驗賦予的意義來決定。\n\n我們每個人都為了某個目的而活著。\n\n> 應該追究的，不是過去的原因，是現在的目的。\n\n* 決定論\n* 目的論\n\n##### 決定論\n\n因果關係，就是典型的決定論。因為什麼原因，造成現在這樣。雖然看似邏輯正確，但心中其實是將事情的結果推向過去的自己，否定現在的是幾，從某個方面來說我們往往忽略了人能掌控自己的情緒，面對失敗，了解原因及可，不要將責任推給過去。\n\n##### 目地論\n\n目的論的觀點認為，人的每個行為、情緒變化等等，都是有目的性的，我們透過表達自己的情緒，來得到自己想要的成果。與決定論完全相反的是，決定論認為：\"我因為XXX事情，所以我現在生氣了\"，但在目的論認為：\"你現在生氣，是為了達成ＯＯＯ目標\"。舉例來說，決定的論點是：\"因為你掃地沒掃乾淨所以我生氣\"，認為\"我生氣是別人造成的\"。目的論則認為：當下在生氣時，其實是透過情緒表達，希望對方折服自己並認真打掃，情緒變成了一種手段，而非被動的產物。(透過這個論點可以反思，我們是能控制自己的情緒的，能收放自己的情緒。)\n\n*****\n\n### 人，會捏造憤怒的情緒\n\n即是目的論的核心論點。藉由捏造的憤怒的情緒，來達成某種目度。這種情緒並不是所謂的 \"無法控制\" 或是 \"衝動\"。如果人們能夠不遷怒，那就代表憤怒是可以收放自如的 \"工具\" 。我們藉由憤怒的情緒來讓自己的行為合理化，是一種使人屈服於自己的手段。\n\n*****\n\n### 不受過去支配的生活方式\n\n> 不論是從 \"人不受過去控制\" 或 \"人不受情緒控制\" 的層面來說，阿德勒心理學都是與虛無主義者對立的思想，是哲學。\n\n問題不在於過去發生了什麼事情，而是我們怎麼去解釋它。例如說成功的喜悅可能沖昏頭，失敗可能激起更多的浪花。\n每個人的生命中都會發生各種產生正面利益或是負面利益的事情，重點在於我們怎麼去詮釋狀況，從發生的狀況中我們得到或是學習到什麼。\n\n> 人並非受過去的原因而行動，\n> 而是朝向自己決定好的目的而行動。\n\n### 改變\n\n> 改變的第一步是要先知道。\n> 答案，不應該是由誰告訴你，而是你自己親手去找才對。\n\n改變、成長都需要靠自己，一切的起頭也需要自己來。過程中的經歷才能淬煉成結果。不斷地灌輸觀念，不如人自己反思、自我思考。\n\n### 幸與不幸，是自己選的\n\n> 沒有人單純只是為了做壞事而做壞事，所有犯罪的人都有讓他犯罪的內在 \"正當理由\"。例如，因為金錢糾紛而殺人，對當事人來說，他因為自以為的 \"正當理由\" 而採取行動。換句話說，是在執行 \"自以為好\" 的 \"善\" 事。當然，這裡所說的 \"善\" 並不是指道德上的良善，而是 \"為自己的\" 善。希臘語中的 \"善\" 跟道德沒有關係，純粹是 \"有用\" 的意思;另一方面 \"惡\" 是指 \"沒有用處\"。\n\n我們往往選擇對自己有利的狀況，可能自覺、可能不自覺，這種有利的狀況多半屬於短期有利，當下自己覺得舒服或方便而已，有可能是安於現狀，亦可能只是面子掛不住。所謂的 \"目的論\" 就是指人們只是為了達成某種目的，而做出的情緒反應而已，並透過其他的原因來詮釋現在的自己。但多半的時候人們透過 \"決定論\" 來解釋自己也是情非得已，並沒有了解到自己內心中正正的目的性。\n\n### 人，常常決定不要改變\n\n#### 生活型態 life style\n\n是人的性格或是氣質。並非直接指物質的生活狀況。\n\n> 如果生活性態不是天生的，而是自己選的，那就有重新選擇的可能性。\n\n人們往往不願意改變，儘管自己已經知道有地方需要改變，儘管知道已經造成別人的抱怨，但往往我們覺得 \"安於現狀\" 是輕鬆的，不確定的未來，人們總是不願意去冒險。\n\n> 缺乏便幸福的勇氣。\n\n#### 人生決定於當下\n\n一種捨棄現有的生活型態的決心。就像在第一次做壞事一樣，變好一樣也需要有改變的勇氣，第一次運動時會覺得想放棄，同樣的，第一次偷東西的人，也會猶豫或是考慮要不要收手。\n\n> 無論之前你的人生發生過怎麼樣的事，那對於你將來要怎麼過日子一點影響都沒有。\n\n人生過去的影響，實際真正的影響在於精神層面，而精神層面應該是能理性控制的。\n\n## 小結\n\n貫徹了之前我自己聽過的一句話：\n\n> 感性的事情要用理性解，理性的事情要用感性解。\n\n人生中有很多機會可以選擇，對於過去，重點是是從過去學習到什麼，或是從過往的經驗了解什麼。而不是一味的埋怨過去對自已造成傷害，因為過去的種種如果，所現在如何。人的所有的情緒、反應都是有目的性的。表達難過可能是為了得到安慰，憤怒是為了使人屈服、表達自己的強悍，情緒是能收放的。當然，人必定會有情緒，接受內在的情緒之後，不一定要對外表態出來，我真正需要學習的，是處理自己內心的情緒即可。\n\n而生活的現狀，取決於自己的思考，換而言之，現在的生活狀況是自己決定的，就如：\"如果我有空的話..我就...\"事實上是在為自己找藉口，為自己尋找 \"結果論\" 的原因，安慰自己。做出改變是痛苦的，是需要時間的。離開自己的舒適圈，朝夢想前進，而不是為自己找更多的理由。\n\n> 尋找解法，而不是責怪原因。\n\n\n# 所有的煩惱都來自人際關係\n\n*****\n\n### 為什麼討厭自己\n\n> 因為過分害被別人討厭、在人際關係中受傷所致。\n> 目的變成了不要在人際關係中受傷害。\n\n在人際關係中相當容易受到傷害，我們會遇到適合自己的人、排斥自己的人。為了避免受到傷害，我們為自己套上：孤僻、沈默等等性格，為自己的行爲找出合理的詮釋。合理的詮釋是為了讓自己的避免傷害，例如我會覺得：如果我每天念英文，我的人生就是彩色的了。其實心中是在迴避唸英文這個問題，我怕自己每天念也念不來，怕自己就算真的唸了，人生也並沒有改變。\n\n> 阿德勒：要除去所有煩惱，唯有獨自一人存活在宇宙中。\n\n簡單說，有人就會有問題拉。\n\n### 所有的煩惱都是人際關係的煩惱\n\n> 我們就算要覺得孤獨，也需要其他人的存在。\n> 所謂的 \"內在的煩惱\" 並不存在。\n\n### 自卑感，是一種主觀的設定\n\n> 自卑感 = 價值 + 較少 + 感覺。這些折磨我們的自卑感並不是 \"客觀的事實\"，而是 \"主觀的解釋\"\n\n人與人之間存在比較，而我們從什麼角度跟別人比較，進而的產生 \"自己不如人\" 的感覺。事情有各個角度可以看，接受失敗、接受自己的缺點，而不是持續地以自己的缺點出發，認為自己的不完美，認為別人的條件比較好。因為這些主觀的觀點產生的自卑感，實為 \"主觀的自卑感\"，而非 \"客觀的事實\"，這種感覺通常是由自己判定自己的失敗，或是由別人投射在我們心中。總之，這個感覺仍然是人的感情建立，並非實際需要比較的東西。\n\n### 當成藉口的自卑情結\n\n> 當理想無法達成時，就會產生一種低劣無能的感覺。\n> 自卑情結，是指把自卑感當成某種藉口使用的狀態。\n\n自卑情結即是為自己找藉口，為自己找的一個相對舒適的圈圈。因為自己無法達成，所以也就算了。同時解開了自己愧疚的心結，也解釋了自己為什麼不更努力的去完成目標。自卑感不見得是壞事，人們可以透過自卑感產生動力，覺得自己不好，需要更加努力達成。但自卑情結是為自己找到看似合理的出口，放棄改變來避免失敗。\n\n### 自傲的人同時也感到自卑\n\n> 藉由權威的力量來膨脹自我的人，終究還是活在別人的價值觀裡，過著別人的人生。如果有人自吹自擂，不過是因為他感到自卑罷了。\n\n真的正的強者，不會急於表現自己有多好，急於證明自己比別人好。因為他們對自己有足夠的自信，知道自己的優點。這也是為什麼在爭論的場合中弱勢的人，自尊心往往較強，甚至透過擺爛的行為，來贏得一個自己無法贏得的爭吵，把 \"自己\" 看得相當的重要。\n\n##### 炫耀不幸\n\n> 藉由自己的不幸，變得特別; 憑藉不幸，想要高人一等。\n> 把自己的不幸當成武器，想要支配對方。\n\n人們也會利用自己的缺點、悲情的過往來提搞自己的身份地位。透過說明自己撐過了某種艱困的過去，來表示自己撐過去了。或是透過 \"你們沒經歷過，永遠無法體會\" 的論點，來顯示自己的成長過程與眾不同。謙虛大概才是一個有自信的人會擁有的。\n\n##### 題外話，營造更好交談的10條建議\n\n這邊讓我想到一個 TED 的演講：營造更好交談的10條建議。\n\n其中提到，當人們在陳述自己的遭遇時，是在尋求慰藉或是某種認同，而當我們接受到這樣的訊號時，建議不要用自己的經驗或是經驗法則套用在別人身上，沒有任何一段經驗是相同的，那段悲傷的情緒屬於對方的，而自己的狀況是相對的較難獲得認同。而與他人溝通或是聆聽對方的遭遇時，是一個建立雙方感情鏈結的好機會，我們需要做的只有嘗試去體會對方的感受，並當個好的傾聽者。\n\n##### 中譯影片：\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nBbxsXqcF6E\" frameborder=\"0\" allowfullscreen></iframe>\n\n### 人生並不是與他人競賽\n\n> 追求卓越，不需要跟任何人競爭，只需要跨步向前就行了。健全的自卑感並不是跟別人比較產生的，而是跟 \"理想中的自己\" 比較後的結果。\n\n人跟人之間應該是完全平等的，沒有人絕對得比誰優秀，儘管我們之間慛載著差異。而我們會把看到感覺優秀的人的影子，投射到自己身上，產生一個如果自己是那樣的想法。間接的，我們產了現在的自己不如自己像象中好的樣子，產生了自卑感。\n\n> 將別人的幸福認定成自己的挫敗。\n\n要把大家當成夥伴，而不是都當成敵人。當我們把周遭的人都當成敵人，免不了跟別人比較。應該把大家當成夥伴，大家共同成長，那比較就會更少，也不會間接產生自卑感。\n\n### 由權力鬥爭到復仇\n\n> 想藉由勝利來證明自己的權利。\n> 當對方挑起權力鬥爭時，絕不要隨之起舞。\n\n我們不需要透過鬥爭來解決問題，更不需要透過鬥爭來證明自己的能力。正確地解決問題，不要挑起無意義的爭端。\n\n### 認錯不等於承認失敗\n\n> 不是忍耐，忍耐代表你已經捲入了這場鬥爭。\n\n當對方發起爭執時，代表這整件事情處理的過程有瑕疵。沒有必要證明自己是對的或是對方是錯的，解決問題最重要的。這回歸到第一章節所述的 \"憤怒是種工具\" 不要濫用憤怒的情緒來解決問題。\n\n\n### 如何面對人生的任務\n\n> 行動面的目標有 \"獨立\" 和 \"能與社會和諧生活\" 兩項。而支援這項行動的心裡面目標則是 \"我是有能力的\"，以及 \"人人都是我的夥伴\"\n\n* 工作的任務\n* 交友的任務\n* 愛的任務\n\n##### 工作的任務\n\n工作的任務其實仍然與人際關係有關，如果我們在工作上疏失，會導致自己不想去上班，不願意面對工作。真正的原因並不是工作本身，而是我們在工作上會遭受的責難，被評價為能力不足等等的問題。因此，工作的任務其實仍然屬於人際關係的範疇。\n\n##### 交友的任務\n\n這屬於人生的中相當重要的一個課題。交友的任務即是普遍認知的人際關係，而這方面的難度會高於工作的任務。因為人跟人之間並沒有強制性的關聯，沒有 \"一定要在一起\" 的需求。朋友的重點不在多，而在於摯友，久久見面一次的朋友仍然可是摯友。\n\n##### 愛的任務\n\n> 只要和這個人在一起，就可以自由盡情的展現自我\n\n愛的過程中，最重的是面對問題，並嘗試解決，並不要安逸於現狀。\n\n\n### 不要漠視人生的謊言\n\n> 找出各種藉口來逃避人生任務的情形，就稱為人生的謊言\n\n### 從擁有的心理學到使用的心理學\n\n* 佛洛伊德-因果論\n\n擁有的心理學，最後注定要走入決定論。\n\n* 阿德勒-目的論\n\n使用的心理學，決定權在於你自己。\n\n### 小結\n\n人之間最大的心魔就是互相比較，透過比較得到優越感，或是自卑感。人生的課題主要為三大方向：工作、交友、愛情，在嘗試解決這三方面的問題時\n應該對自己更有自信，不是不斷的拿自己的條件跟人比較。而比較時又常常使用固守的觀點認為自己不夠好，在失敗的時候，我們嘗試找出原因，卻只找出藉口，\n藉由藉口來解釋自己的失敗，解釋自己為什麼無法成功，其實成功與否一直都操之在我們自己，遮蔽這一切的，即是人生的謊言。\n\n滿滿的正能量啊。\n\n# 割捨別人的課題\n\n### 不要為了滿足別人的期望而活\n\n> 如果你不為自己而活，那誰要為你的人生而活?\n\n賞罰教育帶來的瑕疵點：絕對的是非對錯，將這個世界上的事情一分為二。理想的狀況事情是：我們會只做對的事情，並不會做錯誤的事情。\n但這種教育造成的情況是，我們會選擇做會受到讚賞的事情，選擇做光彩的事情。而人們排斥做沒人注意到的事情。換而言之我們陷入的為他人而活的迴圈，有別人的目光的事情才有意義。...所有的問題仍然來自於人際關係。\n\n### 課題分離\n\n> 不涉入別人的課題。所有人際關係中的紛爭，差不多都是因為一個腳踩進人家的課題裡，或自己的課題遭到干涉所引起的。\n\n仔細思考，因為這個決定而帶來的結果，最後會由誰來承受？\n\n> 只有自己可以改變自己。\n> 我們能把馬牽到水邊，卻不能強迫她喝水。\n\n### 割捨別人的課題\n\n> 越是關係親近的家人，越需要刻意機課題切割開來。\n\n割捨別人的課題這個想法是雙面的，如果我們不要為了滿足別人的期望而活。那我們也不應該期望別人會為了我們而做什麼，這個觀點相當的清晰，每個人跟人之間是個體，我們能互相關心，能相愛，但不是互相控制對方，互相牽制對方。每個人有每個人自己的人生，有屬於它的成功，也有屬於自己的失敗，失敗也是屬於自己的體驗。\n\n> 不要介入別人的課題，也不要讓別人介入你的。\n\n尤其是家人，更因為晦長時間的相處而互相跨入對方的私領域。\n\n### 斬斷難題\n\n> 所謂的命運，並非依靠傳說來安排，而是揮舞自己的劍去展開。 --- 亞歷山大\n\n與常識對立的反命題。\n\n> 如果你無法不在意他人的評價、無法不害怕被別人討厭。也不想付出可能得不到認同的代價。那就無法貫徹自己的生活方次。\n\n### 小結\n\n順著書本的邏輯思考到這邊的話，邏輯是說得通的。我很難表達自己現在覺得這整件事情的想法，也與我自己過去的經驗有所牴觸。但不可否認的，我們不可能做到人見人愛，就連賈伯斯都被指責是個暴君、差勁、難相處的人。自己快樂和讓人快樂，相當難同時兼具，如果我們要完全百分之百應和他人，那就會失去自由的自己。\n\n不過不要忘記一具相當重要的話：\n\n> 說話讓人舒服的程度，決定你的高度。\n\n這仍然是管理學中翁相當重要的一環。做人、做自己、跟管理，需要認真地分開思考。抓取中間的平衡點是相當重要的，過度的偏激自我或是他人，都是不健康的心理狀態。\n","source":"_posts/20170131_BOOKS_被討厭的勇氣1-1.md","raw":"title: 被討厭的勇氣 1 (上)\ndate: 2017-01-31 10:20:15\ntags:\n- 讀書心得\ncategories: 讀書心得\ncomments: false\n---\n\n# 被討厭的勇氣\n\n![被討厭的勇氣](/images/books/被討厭的勇氣.jpg)\n\n作者：岸見一郎、古賀史健\n譯者：葉小燕\n出版社：究竟出版\n\n# 簡介\n\n2015年最火紅的書莫過於就是<被討厭的勇氣>，有別於一般心理學書籍，作者從個人心理的觀點來探討個人跟整個社會的互動，把焦點放在自己身上，了解自己、改變自己，不再是去瞭解他人或是嘗試透視對方的想法。思考自己在做什麼，讓自己的外在表態或是內在的心靈強化是書中相當明顯的觀點，而當我們自己變得更好時，或許也能帶動身邊的人跟著改變。\n\n# 否定心理創傷\n\n*****\n\n### 心理創傷並不存在\n\n阿德勒心理學明確的否定心理創傷。\n\n> 不要由經驗來決定自我，而是由經驗賦予的意義來決定。\n\n我們每個人都為了某個目的而活著。\n\n> 應該追究的，不是過去的原因，是現在的目的。\n\n* 決定論\n* 目的論\n\n##### 決定論\n\n因果關係，就是典型的決定論。因為什麼原因，造成現在這樣。雖然看似邏輯正確，但心中其實是將事情的結果推向過去的自己，否定現在的是幾，從某個方面來說我們往往忽略了人能掌控自己的情緒，面對失敗，了解原因及可，不要將責任推給過去。\n\n##### 目地論\n\n目的論的觀點認為，人的每個行為、情緒變化等等，都是有目的性的，我們透過表達自己的情緒，來得到自己想要的成果。與決定論完全相反的是，決定論認為：\"我因為XXX事情，所以我現在生氣了\"，但在目的論認為：\"你現在生氣，是為了達成ＯＯＯ目標\"。舉例來說，決定的論點是：\"因為你掃地沒掃乾淨所以我生氣\"，認為\"我生氣是別人造成的\"。目的論則認為：當下在生氣時，其實是透過情緒表達，希望對方折服自己並認真打掃，情緒變成了一種手段，而非被動的產物。(透過這個論點可以反思，我們是能控制自己的情緒的，能收放自己的情緒。)\n\n*****\n\n### 人，會捏造憤怒的情緒\n\n即是目的論的核心論點。藉由捏造的憤怒的情緒，來達成某種目度。這種情緒並不是所謂的 \"無法控制\" 或是 \"衝動\"。如果人們能夠不遷怒，那就代表憤怒是可以收放自如的 \"工具\" 。我們藉由憤怒的情緒來讓自己的行為合理化，是一種使人屈服於自己的手段。\n\n*****\n\n### 不受過去支配的生活方式\n\n> 不論是從 \"人不受過去控制\" 或 \"人不受情緒控制\" 的層面來說，阿德勒心理學都是與虛無主義者對立的思想，是哲學。\n\n問題不在於過去發生了什麼事情，而是我們怎麼去解釋它。例如說成功的喜悅可能沖昏頭，失敗可能激起更多的浪花。\n每個人的生命中都會發生各種產生正面利益或是負面利益的事情，重點在於我們怎麼去詮釋狀況，從發生的狀況中我們得到或是學習到什麼。\n\n> 人並非受過去的原因而行動，\n> 而是朝向自己決定好的目的而行動。\n\n### 改變\n\n> 改變的第一步是要先知道。\n> 答案，不應該是由誰告訴你，而是你自己親手去找才對。\n\n改變、成長都需要靠自己，一切的起頭也需要自己來。過程中的經歷才能淬煉成結果。不斷地灌輸觀念，不如人自己反思、自我思考。\n\n### 幸與不幸，是自己選的\n\n> 沒有人單純只是為了做壞事而做壞事，所有犯罪的人都有讓他犯罪的內在 \"正當理由\"。例如，因為金錢糾紛而殺人，對當事人來說，他因為自以為的 \"正當理由\" 而採取行動。換句話說，是在執行 \"自以為好\" 的 \"善\" 事。當然，這裡所說的 \"善\" 並不是指道德上的良善，而是 \"為自己的\" 善。希臘語中的 \"善\" 跟道德沒有關係，純粹是 \"有用\" 的意思;另一方面 \"惡\" 是指 \"沒有用處\"。\n\n我們往往選擇對自己有利的狀況，可能自覺、可能不自覺，這種有利的狀況多半屬於短期有利，當下自己覺得舒服或方便而已，有可能是安於現狀，亦可能只是面子掛不住。所謂的 \"目的論\" 就是指人們只是為了達成某種目的，而做出的情緒反應而已，並透過其他的原因來詮釋現在的自己。但多半的時候人們透過 \"決定論\" 來解釋自己也是情非得已，並沒有了解到自己內心中正正的目的性。\n\n### 人，常常決定不要改變\n\n#### 生活型態 life style\n\n是人的性格或是氣質。並非直接指物質的生活狀況。\n\n> 如果生活性態不是天生的，而是自己選的，那就有重新選擇的可能性。\n\n人們往往不願意改變，儘管自己已經知道有地方需要改變，儘管知道已經造成別人的抱怨，但往往我們覺得 \"安於現狀\" 是輕鬆的，不確定的未來，人們總是不願意去冒險。\n\n> 缺乏便幸福的勇氣。\n\n#### 人生決定於當下\n\n一種捨棄現有的生活型態的決心。就像在第一次做壞事一樣，變好一樣也需要有改變的勇氣，第一次運動時會覺得想放棄，同樣的，第一次偷東西的人，也會猶豫或是考慮要不要收手。\n\n> 無論之前你的人生發生過怎麼樣的事，那對於你將來要怎麼過日子一點影響都沒有。\n\n人生過去的影響，實際真正的影響在於精神層面，而精神層面應該是能理性控制的。\n\n## 小結\n\n貫徹了之前我自己聽過的一句話：\n\n> 感性的事情要用理性解，理性的事情要用感性解。\n\n人生中有很多機會可以選擇，對於過去，重點是是從過去學習到什麼，或是從過往的經驗了解什麼。而不是一味的埋怨過去對自已造成傷害，因為過去的種種如果，所現在如何。人的所有的情緒、反應都是有目的性的。表達難過可能是為了得到安慰，憤怒是為了使人屈服、表達自己的強悍，情緒是能收放的。當然，人必定會有情緒，接受內在的情緒之後，不一定要對外表態出來，我真正需要學習的，是處理自己內心的情緒即可。\n\n而生活的現狀，取決於自己的思考，換而言之，現在的生活狀況是自己決定的，就如：\"如果我有空的話..我就...\"事實上是在為自己找藉口，為自己尋找 \"結果論\" 的原因，安慰自己。做出改變是痛苦的，是需要時間的。離開自己的舒適圈，朝夢想前進，而不是為自己找更多的理由。\n\n> 尋找解法，而不是責怪原因。\n\n\n# 所有的煩惱都來自人際關係\n\n*****\n\n### 為什麼討厭自己\n\n> 因為過分害被別人討厭、在人際關係中受傷所致。\n> 目的變成了不要在人際關係中受傷害。\n\n在人際關係中相當容易受到傷害，我們會遇到適合自己的人、排斥自己的人。為了避免受到傷害，我們為自己套上：孤僻、沈默等等性格，為自己的行爲找出合理的詮釋。合理的詮釋是為了讓自己的避免傷害，例如我會覺得：如果我每天念英文，我的人生就是彩色的了。其實心中是在迴避唸英文這個問題，我怕自己每天念也念不來，怕自己就算真的唸了，人生也並沒有改變。\n\n> 阿德勒：要除去所有煩惱，唯有獨自一人存活在宇宙中。\n\n簡單說，有人就會有問題拉。\n\n### 所有的煩惱都是人際關係的煩惱\n\n> 我們就算要覺得孤獨，也需要其他人的存在。\n> 所謂的 \"內在的煩惱\" 並不存在。\n\n### 自卑感，是一種主觀的設定\n\n> 自卑感 = 價值 + 較少 + 感覺。這些折磨我們的自卑感並不是 \"客觀的事實\"，而是 \"主觀的解釋\"\n\n人與人之間存在比較，而我們從什麼角度跟別人比較，進而的產生 \"自己不如人\" 的感覺。事情有各個角度可以看，接受失敗、接受自己的缺點，而不是持續地以自己的缺點出發，認為自己的不完美，認為別人的條件比較好。因為這些主觀的觀點產生的自卑感，實為 \"主觀的自卑感\"，而非 \"客觀的事實\"，這種感覺通常是由自己判定自己的失敗，或是由別人投射在我們心中。總之，這個感覺仍然是人的感情建立，並非實際需要比較的東西。\n\n### 當成藉口的自卑情結\n\n> 當理想無法達成時，就會產生一種低劣無能的感覺。\n> 自卑情結，是指把自卑感當成某種藉口使用的狀態。\n\n自卑情結即是為自己找藉口，為自己找的一個相對舒適的圈圈。因為自己無法達成，所以也就算了。同時解開了自己愧疚的心結，也解釋了自己為什麼不更努力的去完成目標。自卑感不見得是壞事，人們可以透過自卑感產生動力，覺得自己不好，需要更加努力達成。但自卑情結是為自己找到看似合理的出口，放棄改變來避免失敗。\n\n### 自傲的人同時也感到自卑\n\n> 藉由權威的力量來膨脹自我的人，終究還是活在別人的價值觀裡，過著別人的人生。如果有人自吹自擂，不過是因為他感到自卑罷了。\n\n真的正的強者，不會急於表現自己有多好，急於證明自己比別人好。因為他們對自己有足夠的自信，知道自己的優點。這也是為什麼在爭論的場合中弱勢的人，自尊心往往較強，甚至透過擺爛的行為，來贏得一個自己無法贏得的爭吵，把 \"自己\" 看得相當的重要。\n\n##### 炫耀不幸\n\n> 藉由自己的不幸，變得特別; 憑藉不幸，想要高人一等。\n> 把自己的不幸當成武器，想要支配對方。\n\n人們也會利用自己的缺點、悲情的過往來提搞自己的身份地位。透過說明自己撐過了某種艱困的過去，來表示自己撐過去了。或是透過 \"你們沒經歷過，永遠無法體會\" 的論點，來顯示自己的成長過程與眾不同。謙虛大概才是一個有自信的人會擁有的。\n\n##### 題外話，營造更好交談的10條建議\n\n這邊讓我想到一個 TED 的演講：營造更好交談的10條建議。\n\n其中提到，當人們在陳述自己的遭遇時，是在尋求慰藉或是某種認同，而當我們接受到這樣的訊號時，建議不要用自己的經驗或是經驗法則套用在別人身上，沒有任何一段經驗是相同的，那段悲傷的情緒屬於對方的，而自己的狀況是相對的較難獲得認同。而與他人溝通或是聆聽對方的遭遇時，是一個建立雙方感情鏈結的好機會，我們需要做的只有嘗試去體會對方的感受，並當個好的傾聽者。\n\n##### 中譯影片：\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nBbxsXqcF6E\" frameborder=\"0\" allowfullscreen></iframe>\n\n### 人生並不是與他人競賽\n\n> 追求卓越，不需要跟任何人競爭，只需要跨步向前就行了。健全的自卑感並不是跟別人比較產生的，而是跟 \"理想中的自己\" 比較後的結果。\n\n人跟人之間應該是完全平等的，沒有人絕對得比誰優秀，儘管我們之間慛載著差異。而我們會把看到感覺優秀的人的影子，投射到自己身上，產生一個如果自己是那樣的想法。間接的，我們產了現在的自己不如自己像象中好的樣子，產生了自卑感。\n\n> 將別人的幸福認定成自己的挫敗。\n\n要把大家當成夥伴，而不是都當成敵人。當我們把周遭的人都當成敵人，免不了跟別人比較。應該把大家當成夥伴，大家共同成長，那比較就會更少，也不會間接產生自卑感。\n\n### 由權力鬥爭到復仇\n\n> 想藉由勝利來證明自己的權利。\n> 當對方挑起權力鬥爭時，絕不要隨之起舞。\n\n我們不需要透過鬥爭來解決問題，更不需要透過鬥爭來證明自己的能力。正確地解決問題，不要挑起無意義的爭端。\n\n### 認錯不等於承認失敗\n\n> 不是忍耐，忍耐代表你已經捲入了這場鬥爭。\n\n當對方發起爭執時，代表這整件事情處理的過程有瑕疵。沒有必要證明自己是對的或是對方是錯的，解決問題最重要的。這回歸到第一章節所述的 \"憤怒是種工具\" 不要濫用憤怒的情緒來解決問題。\n\n\n### 如何面對人生的任務\n\n> 行動面的目標有 \"獨立\" 和 \"能與社會和諧生活\" 兩項。而支援這項行動的心裡面目標則是 \"我是有能力的\"，以及 \"人人都是我的夥伴\"\n\n* 工作的任務\n* 交友的任務\n* 愛的任務\n\n##### 工作的任務\n\n工作的任務其實仍然與人際關係有關，如果我們在工作上疏失，會導致自己不想去上班，不願意面對工作。真正的原因並不是工作本身，而是我們在工作上會遭受的責難，被評價為能力不足等等的問題。因此，工作的任務其實仍然屬於人際關係的範疇。\n\n##### 交友的任務\n\n這屬於人生的中相當重要的一個課題。交友的任務即是普遍認知的人際關係，而這方面的難度會高於工作的任務。因為人跟人之間並沒有強制性的關聯，沒有 \"一定要在一起\" 的需求。朋友的重點不在多，而在於摯友，久久見面一次的朋友仍然可是摯友。\n\n##### 愛的任務\n\n> 只要和這個人在一起，就可以自由盡情的展現自我\n\n愛的過程中，最重的是面對問題，並嘗試解決，並不要安逸於現狀。\n\n\n### 不要漠視人生的謊言\n\n> 找出各種藉口來逃避人生任務的情形，就稱為人生的謊言\n\n### 從擁有的心理學到使用的心理學\n\n* 佛洛伊德-因果論\n\n擁有的心理學，最後注定要走入決定論。\n\n* 阿德勒-目的論\n\n使用的心理學，決定權在於你自己。\n\n### 小結\n\n人之間最大的心魔就是互相比較，透過比較得到優越感，或是自卑感。人生的課題主要為三大方向：工作、交友、愛情，在嘗試解決這三方面的問題時\n應該對自己更有自信，不是不斷的拿自己的條件跟人比較。而比較時又常常使用固守的觀點認為自己不夠好，在失敗的時候，我們嘗試找出原因，卻只找出藉口，\n藉由藉口來解釋自己的失敗，解釋自己為什麼無法成功，其實成功與否一直都操之在我們自己，遮蔽這一切的，即是人生的謊言。\n\n滿滿的正能量啊。\n\n# 割捨別人的課題\n\n### 不要為了滿足別人的期望而活\n\n> 如果你不為自己而活，那誰要為你的人生而活?\n\n賞罰教育帶來的瑕疵點：絕對的是非對錯，將這個世界上的事情一分為二。理想的狀況事情是：我們會只做對的事情，並不會做錯誤的事情。\n但這種教育造成的情況是，我們會選擇做會受到讚賞的事情，選擇做光彩的事情。而人們排斥做沒人注意到的事情。換而言之我們陷入的為他人而活的迴圈，有別人的目光的事情才有意義。...所有的問題仍然來自於人際關係。\n\n### 課題分離\n\n> 不涉入別人的課題。所有人際關係中的紛爭，差不多都是因為一個腳踩進人家的課題裡，或自己的課題遭到干涉所引起的。\n\n仔細思考，因為這個決定而帶來的結果，最後會由誰來承受？\n\n> 只有自己可以改變自己。\n> 我們能把馬牽到水邊，卻不能強迫她喝水。\n\n### 割捨別人的課題\n\n> 越是關係親近的家人，越需要刻意機課題切割開來。\n\n割捨別人的課題這個想法是雙面的，如果我們不要為了滿足別人的期望而活。那我們也不應該期望別人會為了我們而做什麼，這個觀點相當的清晰，每個人跟人之間是個體，我們能互相關心，能相愛，但不是互相控制對方，互相牽制對方。每個人有每個人自己的人生，有屬於它的成功，也有屬於自己的失敗，失敗也是屬於自己的體驗。\n\n> 不要介入別人的課題，也不要讓別人介入你的。\n\n尤其是家人，更因為晦長時間的相處而互相跨入對方的私領域。\n\n### 斬斷難題\n\n> 所謂的命運，並非依靠傳說來安排，而是揮舞自己的劍去展開。 --- 亞歷山大\n\n與常識對立的反命題。\n\n> 如果你無法不在意他人的評價、無法不害怕被別人討厭。也不想付出可能得不到認同的代價。那就無法貫徹自己的生活方次。\n\n### 小結\n\n順著書本的邏輯思考到這邊的話，邏輯是說得通的。我很難表達自己現在覺得這整件事情的想法，也與我自己過去的經驗有所牴觸。但不可否認的，我們不可能做到人見人愛，就連賈伯斯都被指責是個暴君、差勁、難相處的人。自己快樂和讓人快樂，相當難同時兼具，如果我們要完全百分之百應和他人，那就會失去自由的自己。\n\n不過不要忘記一具相當重要的話：\n\n> 說話讓人舒服的程度，決定你的高度。\n\n這仍然是管理學中翁相當重要的一環。做人、做自己、跟管理，需要認真地分開思考。抓取中間的平衡點是相當重要的，過度的偏激自我或是他人，都是不健康的心理狀態。\n","slug":"20170131_BOOKS_被討厭的勇氣1-1","published":1,"updated":"2017-01-31T14:46:33.000Z","layout":"post","photos":[],"link":"","_id":"ciylnyp0900017ru0ecdt2i7r","content":"<h1 id=\"被討厭的勇氣\">被討厭的勇氣</h1><p><img src=\"/images/books/被討厭的勇氣.jpg\" alt=\"被討厭的勇氣\"></p>\n<p>作者：岸見一郎、古賀史健<br>譯者：葉小燕<br>出版社：究竟出版</p>\n<h1 id=\"簡介\">簡介</h1><p>2015年最火紅的書莫過於就是&lt;被討厭的勇氣&gt;，有別於一般心理學書籍，作者從個人心理的觀點來探討個人跟整個社會的互動，把焦點放在自己身上，了解自己、改變自己，不再是去瞭解他人或是嘗試透視對方的想法。思考自己在做什麼，讓自己的外在表態或是內在的心靈強化是書中相當明顯的觀點，而當我們自己變得更好時，或許也能帶動身邊的人跟著改變。</p>\n<h1 id=\"否定心理創傷\">否定心理創傷</h1><hr>\n<h3 id=\"心理創傷並不存在\">心理創傷並不存在</h3><p>阿德勒心理學明確的否定心理創傷。</p>\n<blockquote>\n<p>不要由經驗來決定自我，而是由經驗賦予的意義來決定。</p>\n</blockquote>\n<p>我們每個人都為了某個目的而活著。</p>\n<blockquote>\n<p>應該追究的，不是過去的原因，是現在的目的。</p>\n</blockquote>\n<ul>\n<li>決定論</li>\n<li>目的論</li>\n</ul>\n<h5 id=\"決定論\">決定論</h5><p>因果關係，就是典型的決定論。因為什麼原因，造成現在這樣。雖然看似邏輯正確，但心中其實是將事情的結果推向過去的自己，否定現在的是幾，從某個方面來說我們往往忽略了人能掌控自己的情緒，面對失敗，了解原因及可，不要將責任推給過去。</p>\n<h5 id=\"目地論\">目地論</h5><p>目的論的觀點認為，人的每個行為、情緒變化等等，都是有目的性的，我們透過表達自己的情緒，來得到自己想要的成果。與決定論完全相反的是，決定論認為：”我因為XXX事情，所以我現在生氣了”，但在目的論認為：”你現在生氣，是為了達成ＯＯＯ目標”。舉例來說，決定的論點是：”因為你掃地沒掃乾淨所以我生氣”，認為”我生氣是別人造成的”。目的論則認為：當下在生氣時，其實是透過情緒表達，希望對方折服自己並認真打掃，情緒變成了一種手段，而非被動的產物。(透過這個論點可以反思，我們是能控制自己的情緒的，能收放自己的情緒。)</p>\n<hr>\n<h3 id=\"人，會捏造憤怒的情緒\">人，會捏造憤怒的情緒</h3><p>即是目的論的核心論點。藉由捏造的憤怒的情緒，來達成某種目度。這種情緒並不是所謂的 “無法控制” 或是 “衝動”。如果人們能夠不遷怒，那就代表憤怒是可以收放自如的 “工具” 。我們藉由憤怒的情緒來讓自己的行為合理化，是一種使人屈服於自己的手段。</p>\n<hr>\n<h3 id=\"不受過去支配的生活方式\">不受過去支配的生活方式</h3><blockquote>\n<p>不論是從 “人不受過去控制” 或 “人不受情緒控制” 的層面來說，阿德勒心理學都是與虛無主義者對立的思想，是哲學。</p>\n</blockquote>\n<p>問題不在於過去發生了什麼事情，而是我們怎麼去解釋它。例如說成功的喜悅可能沖昏頭，失敗可能激起更多的浪花。<br>每個人的生命中都會發生各種產生正面利益或是負面利益的事情，重點在於我們怎麼去詮釋狀況，從發生的狀況中我們得到或是學習到什麼。</p>\n<blockquote>\n<p>人並非受過去的原因而行動，<br>而是朝向自己決定好的目的而行動。</p>\n</blockquote>\n<h3 id=\"改變\">改變</h3><blockquote>\n<p>改變的第一步是要先知道。<br>答案，不應該是由誰告訴你，而是你自己親手去找才對。</p>\n</blockquote>\n<p>改變、成長都需要靠自己，一切的起頭也需要自己來。過程中的經歷才能淬煉成結果。不斷地灌輸觀念，不如人自己反思、自我思考。</p>\n<h3 id=\"幸與不幸，是自己選的\">幸與不幸，是自己選的</h3><blockquote>\n<p>沒有人單純只是為了做壞事而做壞事，所有犯罪的人都有讓他犯罪的內在 “正當理由”。例如，因為金錢糾紛而殺人，對當事人來說，他因為自以為的 “正當理由” 而採取行動。換句話說，是在執行 “自以為好” 的 “善” 事。當然，這裡所說的 “善” 並不是指道德上的良善，而是 “為自己的” 善。希臘語中的 “善” 跟道德沒有關係，純粹是 “有用” 的意思;另一方面 “惡” 是指 “沒有用處”。</p>\n</blockquote>\n<p>我們往往選擇對自己有利的狀況，可能自覺、可能不自覺，這種有利的狀況多半屬於短期有利，當下自己覺得舒服或方便而已，有可能是安於現狀，亦可能只是面子掛不住。所謂的 “目的論” 就是指人們只是為了達成某種目的，而做出的情緒反應而已，並透過其他的原因來詮釋現在的自己。但多半的時候人們透過 “決定論” 來解釋自己也是情非得已，並沒有了解到自己內心中正正的目的性。</p>\n<h3 id=\"人，常常決定不要改變\">人，常常決定不要改變</h3><h4 id=\"生活型態_life_style\">生活型態 life style</h4><p>是人的性格或是氣質。並非直接指物質的生活狀況。</p>\n<blockquote>\n<p>如果生活性態不是天生的，而是自己選的，那就有重新選擇的可能性。</p>\n</blockquote>\n<p>人們往往不願意改變，儘管自己已經知道有地方需要改變，儘管知道已經造成別人的抱怨，但往往我們覺得 “安於現狀” 是輕鬆的，不確定的未來，人們總是不願意去冒險。</p>\n<blockquote>\n<p>缺乏便幸福的勇氣。</p>\n</blockquote>\n<h4 id=\"人生決定於當下\">人生決定於當下</h4><p>一種捨棄現有的生活型態的決心。就像在第一次做壞事一樣，變好一樣也需要有改變的勇氣，第一次運動時會覺得想放棄，同樣的，第一次偷東西的人，也會猶豫或是考慮要不要收手。</p>\n<blockquote>\n<p>無論之前你的人生發生過怎麼樣的事，那對於你將來要怎麼過日子一點影響都沒有。</p>\n</blockquote>\n<p>人生過去的影響，實際真正的影響在於精神層面，而精神層面應該是能理性控制的。</p>\n<h2 id=\"小結\">小結</h2><p>貫徹了之前我自己聽過的一句話：</p>\n<blockquote>\n<p>感性的事情要用理性解，理性的事情要用感性解。</p>\n</blockquote>\n<p>人生中有很多機會可以選擇，對於過去，重點是是從過去學習到什麼，或是從過往的經驗了解什麼。而不是一味的埋怨過去對自已造成傷害，因為過去的種種如果，所現在如何。人的所有的情緒、反應都是有目的性的。表達難過可能是為了得到安慰，憤怒是為了使人屈服、表達自己的強悍，情緒是能收放的。當然，人必定會有情緒，接受內在的情緒之後，不一定要對外表態出來，我真正需要學習的，是處理自己內心的情緒即可。</p>\n<p>而生活的現狀，取決於自己的思考，換而言之，現在的生活狀況是自己決定的，就如：”如果我有空的話..我就…”事實上是在為自己找藉口，為自己尋找 “結果論” 的原因，安慰自己。做出改變是痛苦的，是需要時間的。離開自己的舒適圈，朝夢想前進，而不是為自己找更多的理由。</p>\n<blockquote>\n<p>尋找解法，而不是責怪原因。</p>\n</blockquote>\n<h1 id=\"所有的煩惱都來自人際關係\">所有的煩惱都來自人際關係</h1><hr>\n<h3 id=\"為什麼討厭自己\">為什麼討厭自己</h3><blockquote>\n<p>因為過分害被別人討厭、在人際關係中受傷所致。<br>目的變成了不要在人際關係中受傷害。</p>\n</blockquote>\n<p>在人際關係中相當容易受到傷害，我們會遇到適合自己的人、排斥自己的人。為了避免受到傷害，我們為自己套上：孤僻、沈默等等性格，為自己的行爲找出合理的詮釋。合理的詮釋是為了讓自己的避免傷害，例如我會覺得：如果我每天念英文，我的人生就是彩色的了。其實心中是在迴避唸英文這個問題，我怕自己每天念也念不來，怕自己就算真的唸了，人生也並沒有改變。</p>\n<blockquote>\n<p>阿德勒：要除去所有煩惱，唯有獨自一人存活在宇宙中。</p>\n</blockquote>\n<p>簡單說，有人就會有問題拉。</p>\n<h3 id=\"所有的煩惱都是人際關係的煩惱\">所有的煩惱都是人際關係的煩惱</h3><blockquote>\n<p>我們就算要覺得孤獨，也需要其他人的存在。<br>所謂的 “內在的煩惱” 並不存在。</p>\n</blockquote>\n<h3 id=\"自卑感，是一種主觀的設定\">自卑感，是一種主觀的設定</h3><blockquote>\n<p>自卑感 = 價值 + 較少 + 感覺。這些折磨我們的自卑感並不是 “客觀的事實”，而是 “主觀的解釋”</p>\n</blockquote>\n<p>人與人之間存在比較，而我們從什麼角度跟別人比較，進而的產生 “自己不如人” 的感覺。事情有各個角度可以看，接受失敗、接受自己的缺點，而不是持續地以自己的缺點出發，認為自己的不完美，認為別人的條件比較好。因為這些主觀的觀點產生的自卑感，實為 “主觀的自卑感”，而非 “客觀的事實”，這種感覺通常是由自己判定自己的失敗，或是由別人投射在我們心中。總之，這個感覺仍然是人的感情建立，並非實際需要比較的東西。</p>\n<h3 id=\"當成藉口的自卑情結\">當成藉口的自卑情結</h3><blockquote>\n<p>當理想無法達成時，就會產生一種低劣無能的感覺。<br>自卑情結，是指把自卑感當成某種藉口使用的狀態。</p>\n</blockquote>\n<p>自卑情結即是為自己找藉口，為自己找的一個相對舒適的圈圈。因為自己無法達成，所以也就算了。同時解開了自己愧疚的心結，也解釋了自己為什麼不更努力的去完成目標。自卑感不見得是壞事，人們可以透過自卑感產生動力，覺得自己不好，需要更加努力達成。但自卑情結是為自己找到看似合理的出口，放棄改變來避免失敗。</p>\n<h3 id=\"自傲的人同時也感到自卑\">自傲的人同時也感到自卑</h3><blockquote>\n<p>藉由權威的力量來膨脹自我的人，終究還是活在別人的價值觀裡，過著別人的人生。如果有人自吹自擂，不過是因為他感到自卑罷了。</p>\n</blockquote>\n<p>真的正的強者，不會急於表現自己有多好，急於證明自己比別人好。因為他們對自己有足夠的自信，知道自己的優點。這也是為什麼在爭論的場合中弱勢的人，自尊心往往較強，甚至透過擺爛的行為，來贏得一個自己無法贏得的爭吵，把 “自己” 看得相當的重要。</p>\n<h5 id=\"炫耀不幸\">炫耀不幸</h5><blockquote>\n<p>藉由自己的不幸，變得特別; 憑藉不幸，想要高人一等。<br>把自己的不幸當成武器，想要支配對方。</p>\n</blockquote>\n<p>人們也會利用自己的缺點、悲情的過往來提搞自己的身份地位。透過說明自己撐過了某種艱困的過去，來表示自己撐過去了。或是透過 “你們沒經歷過，永遠無法體會” 的論點，來顯示自己的成長過程與眾不同。謙虛大概才是一個有自信的人會擁有的。</p>\n<h5 id=\"題外話，營造更好交談的10條建議\">題外話，營造更好交談的10條建議</h5><p>這邊讓我想到一個 TED 的演講：營造更好交談的10條建議。</p>\n<p>其中提到，當人們在陳述自己的遭遇時，是在尋求慰藉或是某種認同，而當我們接受到這樣的訊號時，建議不要用自己的經驗或是經驗法則套用在別人身上，沒有任何一段經驗是相同的，那段悲傷的情緒屬於對方的，而自己的狀況是相對的較難獲得認同。而與他人溝通或是聆聽對方的遭遇時，是一個建立雙方感情鏈結的好機會，我們需要做的只有嘗試去體會對方的感受，並當個好的傾聽者。</p>\n<h5 id=\"中譯影片：\">中譯影片：</h5><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nBbxsXqcF6E\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h3 id=\"人生並不是與他人競賽\">人生並不是與他人競賽</h3><blockquote>\n<p>追求卓越，不需要跟任何人競爭，只需要跨步向前就行了。健全的自卑感並不是跟別人比較產生的，而是跟 “理想中的自己” 比較後的結果。</p>\n</blockquote>\n<p>人跟人之間應該是完全平等的，沒有人絕對得比誰優秀，儘管我們之間慛載著差異。而我們會把看到感覺優秀的人的影子，投射到自己身上，產生一個如果自己是那樣的想法。間接的，我們產了現在的自己不如自己像象中好的樣子，產生了自卑感。</p>\n<blockquote>\n<p>將別人的幸福認定成自己的挫敗。</p>\n</blockquote>\n<p>要把大家當成夥伴，而不是都當成敵人。當我們把周遭的人都當成敵人，免不了跟別人比較。應該把大家當成夥伴，大家共同成長，那比較就會更少，也不會間接產生自卑感。</p>\n<h3 id=\"由權力鬥爭到復仇\">由權力鬥爭到復仇</h3><blockquote>\n<p>想藉由勝利來證明自己的權利。<br>當對方挑起權力鬥爭時，絕不要隨之起舞。</p>\n</blockquote>\n<p>我們不需要透過鬥爭來解決問題，更不需要透過鬥爭來證明自己的能力。正確地解決問題，不要挑起無意義的爭端。</p>\n<h3 id=\"認錯不等於承認失敗\">認錯不等於承認失敗</h3><blockquote>\n<p>不是忍耐，忍耐代表你已經捲入了這場鬥爭。</p>\n</blockquote>\n<p>當對方發起爭執時，代表這整件事情處理的過程有瑕疵。沒有必要證明自己是對的或是對方是錯的，解決問題最重要的。這回歸到第一章節所述的 “憤怒是種工具” 不要濫用憤怒的情緒來解決問題。</p>\n<h3 id=\"如何面對人生的任務\">如何面對人生的任務</h3><blockquote>\n<p>行動面的目標有 “獨立” 和 “能與社會和諧生活” 兩項。而支援這項行動的心裡面目標則是 “我是有能力的”，以及 “人人都是我的夥伴”</p>\n</blockquote>\n<ul>\n<li>工作的任務</li>\n<li>交友的任務</li>\n<li>愛的任務</li>\n</ul>\n<h5 id=\"工作的任務\">工作的任務</h5><p>工作的任務其實仍然與人際關係有關，如果我們在工作上疏失，會導致自己不想去上班，不願意面對工作。真正的原因並不是工作本身，而是我們在工作上會遭受的責難，被評價為能力不足等等的問題。因此，工作的任務其實仍然屬於人際關係的範疇。</p>\n<h5 id=\"交友的任務\">交友的任務</h5><p>這屬於人生的中相當重要的一個課題。交友的任務即是普遍認知的人際關係，而這方面的難度會高於工作的任務。因為人跟人之間並沒有強制性的關聯，沒有 “一定要在一起” 的需求。朋友的重點不在多，而在於摯友，久久見面一次的朋友仍然可是摯友。</p>\n<h5 id=\"愛的任務\">愛的任務</h5><blockquote>\n<p>只要和這個人在一起，就可以自由盡情的展現自我</p>\n</blockquote>\n<p>愛的過程中，最重的是面對問題，並嘗試解決，並不要安逸於現狀。</p>\n<h3 id=\"不要漠視人生的謊言\">不要漠視人生的謊言</h3><blockquote>\n<p>找出各種藉口來逃避人生任務的情形，就稱為人生的謊言</p>\n</blockquote>\n<h3 id=\"從擁有的心理學到使用的心理學\">從擁有的心理學到使用的心理學</h3><ul>\n<li>佛洛伊德-因果論</li>\n</ul>\n<p>擁有的心理學，最後注定要走入決定論。</p>\n<ul>\n<li>阿德勒-目的論</li>\n</ul>\n<p>使用的心理學，決定權在於你自己。</p>\n<h3 id=\"小結-1\">小結</h3><p>人之間最大的心魔就是互相比較，透過比較得到優越感，或是自卑感。人生的課題主要為三大方向：工作、交友、愛情，在嘗試解決這三方面的問題時<br>應該對自己更有自信，不是不斷的拿自己的條件跟人比較。而比較時又常常使用固守的觀點認為自己不夠好，在失敗的時候，我們嘗試找出原因，卻只找出藉口，<br>藉由藉口來解釋自己的失敗，解釋自己為什麼無法成功，其實成功與否一直都操之在我們自己，遮蔽這一切的，即是人生的謊言。</p>\n<p>滿滿的正能量啊。</p>\n<h1 id=\"割捨別人的課題\">割捨別人的課題</h1><h3 id=\"不要為了滿足別人的期望而活\">不要為了滿足別人的期望而活</h3><blockquote>\n<p>如果你不為自己而活，那誰要為你的人生而活?</p>\n</blockquote>\n<p>賞罰教育帶來的瑕疵點：絕對的是非對錯，將這個世界上的事情一分為二。理想的狀況事情是：我們會只做對的事情，並不會做錯誤的事情。<br>但這種教育造成的情況是，我們會選擇做會受到讚賞的事情，選擇做光彩的事情。而人們排斥做沒人注意到的事情。換而言之我們陷入的為他人而活的迴圈，有別人的目光的事情才有意義。…所有的問題仍然來自於人際關係。</p>\n<h3 id=\"課題分離\">課題分離</h3><blockquote>\n<p>不涉入別人的課題。所有人際關係中的紛爭，差不多都是因為一個腳踩進人家的課題裡，或自己的課題遭到干涉所引起的。</p>\n</blockquote>\n<p>仔細思考，因為這個決定而帶來的結果，最後會由誰來承受？</p>\n<blockquote>\n<p>只有自己可以改變自己。<br>我們能把馬牽到水邊，卻不能強迫她喝水。</p>\n</blockquote>\n<h3 id=\"割捨別人的課題-1\">割捨別人的課題</h3><blockquote>\n<p>越是關係親近的家人，越需要刻意機課題切割開來。</p>\n</blockquote>\n<p>割捨別人的課題這個想法是雙面的，如果我們不要為了滿足別人的期望而活。那我們也不應該期望別人會為了我們而做什麼，這個觀點相當的清晰，每個人跟人之間是個體，我們能互相關心，能相愛，但不是互相控制對方，互相牽制對方。每個人有每個人自己的人生，有屬於它的成功，也有屬於自己的失敗，失敗也是屬於自己的體驗。</p>\n<blockquote>\n<p>不要介入別人的課題，也不要讓別人介入你的。</p>\n</blockquote>\n<p>尤其是家人，更因為晦長時間的相處而互相跨入對方的私領域。</p>\n<h3 id=\"斬斷難題\">斬斷難題</h3><blockquote>\n<p>所謂的命運，並非依靠傳說來安排，而是揮舞自己的劍去展開。 — 亞歷山大</p>\n</blockquote>\n<p>與常識對立的反命題。</p>\n<blockquote>\n<p>如果你無法不在意他人的評價、無法不害怕被別人討厭。也不想付出可能得不到認同的代價。那就無法貫徹自己的生活方次。</p>\n</blockquote>\n<h3 id=\"小結-2\">小結</h3><p>順著書本的邏輯思考到這邊的話，邏輯是說得通的。我很難表達自己現在覺得這整件事情的想法，也與我自己過去的經驗有所牴觸。但不可否認的，我們不可能做到人見人愛，就連賈伯斯都被指責是個暴君、差勁、難相處的人。自己快樂和讓人快樂，相當難同時兼具，如果我們要完全百分之百應和他人，那就會失去自由的自己。</p>\n<p>不過不要忘記一具相當重要的話：</p>\n<blockquote>\n<p>說話讓人舒服的程度，決定你的高度。</p>\n</blockquote>\n<p>這仍然是管理學中翁相當重要的一環。做人、做自己、跟管理，需要認真地分開思考。抓取中間的平衡點是相當重要的，過度的偏激自我或是他人，都是不健康的心理狀態。</p>\n","excerpt":"","more":"<h1 id=\"被討厭的勇氣\">被討厭的勇氣</h1><p><img src=\"/images/books/被討厭的勇氣.jpg\" alt=\"被討厭的勇氣\"></p>\n<p>作者：岸見一郎、古賀史健<br>譯者：葉小燕<br>出版社：究竟出版</p>\n<h1 id=\"簡介\">簡介</h1><p>2015年最火紅的書莫過於就是&lt;被討厭的勇氣&gt;，有別於一般心理學書籍，作者從個人心理的觀點來探討個人跟整個社會的互動，把焦點放在自己身上，了解自己、改變自己，不再是去瞭解他人或是嘗試透視對方的想法。思考自己在做什麼，讓自己的外在表態或是內在的心靈強化是書中相當明顯的觀點，而當我們自己變得更好時，或許也能帶動身邊的人跟著改變。</p>\n<h1 id=\"否定心理創傷\">否定心理創傷</h1><hr>\n<h3 id=\"心理創傷並不存在\">心理創傷並不存在</h3><p>阿德勒心理學明確的否定心理創傷。</p>\n<blockquote>\n<p>不要由經驗來決定自我，而是由經驗賦予的意義來決定。</p>\n</blockquote>\n<p>我們每個人都為了某個目的而活著。</p>\n<blockquote>\n<p>應該追究的，不是過去的原因，是現在的目的。</p>\n</blockquote>\n<ul>\n<li>決定論</li>\n<li>目的論</li>\n</ul>\n<h5 id=\"決定論\">決定論</h5><p>因果關係，就是典型的決定論。因為什麼原因，造成現在這樣。雖然看似邏輯正確，但心中其實是將事情的結果推向過去的自己，否定現在的是幾，從某個方面來說我們往往忽略了人能掌控自己的情緒，面對失敗，了解原因及可，不要將責任推給過去。</p>\n<h5 id=\"目地論\">目地論</h5><p>目的論的觀點認為，人的每個行為、情緒變化等等，都是有目的性的，我們透過表達自己的情緒，來得到自己想要的成果。與決定論完全相反的是，決定論認為：”我因為XXX事情，所以我現在生氣了”，但在目的論認為：”你現在生氣，是為了達成ＯＯＯ目標”。舉例來說，決定的論點是：”因為你掃地沒掃乾淨所以我生氣”，認為”我生氣是別人造成的”。目的論則認為：當下在生氣時，其實是透過情緒表達，希望對方折服自己並認真打掃，情緒變成了一種手段，而非被動的產物。(透過這個論點可以反思，我們是能控制自己的情緒的，能收放自己的情緒。)</p>\n<hr>\n<h3 id=\"人，會捏造憤怒的情緒\">人，會捏造憤怒的情緒</h3><p>即是目的論的核心論點。藉由捏造的憤怒的情緒，來達成某種目度。這種情緒並不是所謂的 “無法控制” 或是 “衝動”。如果人們能夠不遷怒，那就代表憤怒是可以收放自如的 “工具” 。我們藉由憤怒的情緒來讓自己的行為合理化，是一種使人屈服於自己的手段。</p>\n<hr>\n<h3 id=\"不受過去支配的生活方式\">不受過去支配的生活方式</h3><blockquote>\n<p>不論是從 “人不受過去控制” 或 “人不受情緒控制” 的層面來說，阿德勒心理學都是與虛無主義者對立的思想，是哲學。</p>\n</blockquote>\n<p>問題不在於過去發生了什麼事情，而是我們怎麼去解釋它。例如說成功的喜悅可能沖昏頭，失敗可能激起更多的浪花。<br>每個人的生命中都會發生各種產生正面利益或是負面利益的事情，重點在於我們怎麼去詮釋狀況，從發生的狀況中我們得到或是學習到什麼。</p>\n<blockquote>\n<p>人並非受過去的原因而行動，<br>而是朝向自己決定好的目的而行動。</p>\n</blockquote>\n<h3 id=\"改變\">改變</h3><blockquote>\n<p>改變的第一步是要先知道。<br>答案，不應該是由誰告訴你，而是你自己親手去找才對。</p>\n</blockquote>\n<p>改變、成長都需要靠自己，一切的起頭也需要自己來。過程中的經歷才能淬煉成結果。不斷地灌輸觀念，不如人自己反思、自我思考。</p>\n<h3 id=\"幸與不幸，是自己選的\">幸與不幸，是自己選的</h3><blockquote>\n<p>沒有人單純只是為了做壞事而做壞事，所有犯罪的人都有讓他犯罪的內在 “正當理由”。例如，因為金錢糾紛而殺人，對當事人來說，他因為自以為的 “正當理由” 而採取行動。換句話說，是在執行 “自以為好” 的 “善” 事。當然，這裡所說的 “善” 並不是指道德上的良善，而是 “為自己的” 善。希臘語中的 “善” 跟道德沒有關係，純粹是 “有用” 的意思;另一方面 “惡” 是指 “沒有用處”。</p>\n</blockquote>\n<p>我們往往選擇對自己有利的狀況，可能自覺、可能不自覺，這種有利的狀況多半屬於短期有利，當下自己覺得舒服或方便而已，有可能是安於現狀，亦可能只是面子掛不住。所謂的 “目的論” 就是指人們只是為了達成某種目的，而做出的情緒反應而已，並透過其他的原因來詮釋現在的自己。但多半的時候人們透過 “決定論” 來解釋自己也是情非得已，並沒有了解到自己內心中正正的目的性。</p>\n<h3 id=\"人，常常決定不要改變\">人，常常決定不要改變</h3><h4 id=\"生活型態_life_style\">生活型態 life style</h4><p>是人的性格或是氣質。並非直接指物質的生活狀況。</p>\n<blockquote>\n<p>如果生活性態不是天生的，而是自己選的，那就有重新選擇的可能性。</p>\n</blockquote>\n<p>人們往往不願意改變，儘管自己已經知道有地方需要改變，儘管知道已經造成別人的抱怨，但往往我們覺得 “安於現狀” 是輕鬆的，不確定的未來，人們總是不願意去冒險。</p>\n<blockquote>\n<p>缺乏便幸福的勇氣。</p>\n</blockquote>\n<h4 id=\"人生決定於當下\">人生決定於當下</h4><p>一種捨棄現有的生活型態的決心。就像在第一次做壞事一樣，變好一樣也需要有改變的勇氣，第一次運動時會覺得想放棄，同樣的，第一次偷東西的人，也會猶豫或是考慮要不要收手。</p>\n<blockquote>\n<p>無論之前你的人生發生過怎麼樣的事，那對於你將來要怎麼過日子一點影響都沒有。</p>\n</blockquote>\n<p>人生過去的影響，實際真正的影響在於精神層面，而精神層面應該是能理性控制的。</p>\n<h2 id=\"小結\">小結</h2><p>貫徹了之前我自己聽過的一句話：</p>\n<blockquote>\n<p>感性的事情要用理性解，理性的事情要用感性解。</p>\n</blockquote>\n<p>人生中有很多機會可以選擇，對於過去，重點是是從過去學習到什麼，或是從過往的經驗了解什麼。而不是一味的埋怨過去對自已造成傷害，因為過去的種種如果，所現在如何。人的所有的情緒、反應都是有目的性的。表達難過可能是為了得到安慰，憤怒是為了使人屈服、表達自己的強悍，情緒是能收放的。當然，人必定會有情緒，接受內在的情緒之後，不一定要對外表態出來，我真正需要學習的，是處理自己內心的情緒即可。</p>\n<p>而生活的現狀，取決於自己的思考，換而言之，現在的生活狀況是自己決定的，就如：”如果我有空的話..我就…”事實上是在為自己找藉口，為自己尋找 “結果論” 的原因，安慰自己。做出改變是痛苦的，是需要時間的。離開自己的舒適圈，朝夢想前進，而不是為自己找更多的理由。</p>\n<blockquote>\n<p>尋找解法，而不是責怪原因。</p>\n</blockquote>\n<h1 id=\"所有的煩惱都來自人際關係\">所有的煩惱都來自人際關係</h1><hr>\n<h3 id=\"為什麼討厭自己\">為什麼討厭自己</h3><blockquote>\n<p>因為過分害被別人討厭、在人際關係中受傷所致。<br>目的變成了不要在人際關係中受傷害。</p>\n</blockquote>\n<p>在人際關係中相當容易受到傷害，我們會遇到適合自己的人、排斥自己的人。為了避免受到傷害，我們為自己套上：孤僻、沈默等等性格，為自己的行爲找出合理的詮釋。合理的詮釋是為了讓自己的避免傷害，例如我會覺得：如果我每天念英文，我的人生就是彩色的了。其實心中是在迴避唸英文這個問題，我怕自己每天念也念不來，怕自己就算真的唸了，人生也並沒有改變。</p>\n<blockquote>\n<p>阿德勒：要除去所有煩惱，唯有獨自一人存活在宇宙中。</p>\n</blockquote>\n<p>簡單說，有人就會有問題拉。</p>\n<h3 id=\"所有的煩惱都是人際關係的煩惱\">所有的煩惱都是人際關係的煩惱</h3><blockquote>\n<p>我們就算要覺得孤獨，也需要其他人的存在。<br>所謂的 “內在的煩惱” 並不存在。</p>\n</blockquote>\n<h3 id=\"自卑感，是一種主觀的設定\">自卑感，是一種主觀的設定</h3><blockquote>\n<p>自卑感 = 價值 + 較少 + 感覺。這些折磨我們的自卑感並不是 “客觀的事實”，而是 “主觀的解釋”</p>\n</blockquote>\n<p>人與人之間存在比較，而我們從什麼角度跟別人比較，進而的產生 “自己不如人” 的感覺。事情有各個角度可以看，接受失敗、接受自己的缺點，而不是持續地以自己的缺點出發，認為自己的不完美，認為別人的條件比較好。因為這些主觀的觀點產生的自卑感，實為 “主觀的自卑感”，而非 “客觀的事實”，這種感覺通常是由自己判定自己的失敗，或是由別人投射在我們心中。總之，這個感覺仍然是人的感情建立，並非實際需要比較的東西。</p>\n<h3 id=\"當成藉口的自卑情結\">當成藉口的自卑情結</h3><blockquote>\n<p>當理想無法達成時，就會產生一種低劣無能的感覺。<br>自卑情結，是指把自卑感當成某種藉口使用的狀態。</p>\n</blockquote>\n<p>自卑情結即是為自己找藉口，為自己找的一個相對舒適的圈圈。因為自己無法達成，所以也就算了。同時解開了自己愧疚的心結，也解釋了自己為什麼不更努力的去完成目標。自卑感不見得是壞事，人們可以透過自卑感產生動力，覺得自己不好，需要更加努力達成。但自卑情結是為自己找到看似合理的出口，放棄改變來避免失敗。</p>\n<h3 id=\"自傲的人同時也感到自卑\">自傲的人同時也感到自卑</h3><blockquote>\n<p>藉由權威的力量來膨脹自我的人，終究還是活在別人的價值觀裡，過著別人的人生。如果有人自吹自擂，不過是因為他感到自卑罷了。</p>\n</blockquote>\n<p>真的正的強者，不會急於表現自己有多好，急於證明自己比別人好。因為他們對自己有足夠的自信，知道自己的優點。這也是為什麼在爭論的場合中弱勢的人，自尊心往往較強，甚至透過擺爛的行為，來贏得一個自己無法贏得的爭吵，把 “自己” 看得相當的重要。</p>\n<h5 id=\"炫耀不幸\">炫耀不幸</h5><blockquote>\n<p>藉由自己的不幸，變得特別; 憑藉不幸，想要高人一等。<br>把自己的不幸當成武器，想要支配對方。</p>\n</blockquote>\n<p>人們也會利用自己的缺點、悲情的過往來提搞自己的身份地位。透過說明自己撐過了某種艱困的過去，來表示自己撐過去了。或是透過 “你們沒經歷過，永遠無法體會” 的論點，來顯示自己的成長過程與眾不同。謙虛大概才是一個有自信的人會擁有的。</p>\n<h5 id=\"題外話，營造更好交談的10條建議\">題外話，營造更好交談的10條建議</h5><p>這邊讓我想到一個 TED 的演講：營造更好交談的10條建議。</p>\n<p>其中提到，當人們在陳述自己的遭遇時，是在尋求慰藉或是某種認同，而當我們接受到這樣的訊號時，建議不要用自己的經驗或是經驗法則套用在別人身上，沒有任何一段經驗是相同的，那段悲傷的情緒屬於對方的，而自己的狀況是相對的較難獲得認同。而與他人溝通或是聆聽對方的遭遇時，是一個建立雙方感情鏈結的好機會，我們需要做的只有嘗試去體會對方的感受，並當個好的傾聽者。</p>\n<h5 id=\"中譯影片：\">中譯影片：</h5><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nBbxsXqcF6E\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h3 id=\"人生並不是與他人競賽\">人生並不是與他人競賽</h3><blockquote>\n<p>追求卓越，不需要跟任何人競爭，只需要跨步向前就行了。健全的自卑感並不是跟別人比較產生的，而是跟 “理想中的自己” 比較後的結果。</p>\n</blockquote>\n<p>人跟人之間應該是完全平等的，沒有人絕對得比誰優秀，儘管我們之間慛載著差異。而我們會把看到感覺優秀的人的影子，投射到自己身上，產生一個如果自己是那樣的想法。間接的，我們產了現在的自己不如自己像象中好的樣子，產生了自卑感。</p>\n<blockquote>\n<p>將別人的幸福認定成自己的挫敗。</p>\n</blockquote>\n<p>要把大家當成夥伴，而不是都當成敵人。當我們把周遭的人都當成敵人，免不了跟別人比較。應該把大家當成夥伴，大家共同成長，那比較就會更少，也不會間接產生自卑感。</p>\n<h3 id=\"由權力鬥爭到復仇\">由權力鬥爭到復仇</h3><blockquote>\n<p>想藉由勝利來證明自己的權利。<br>當對方挑起權力鬥爭時，絕不要隨之起舞。</p>\n</blockquote>\n<p>我們不需要透過鬥爭來解決問題，更不需要透過鬥爭來證明自己的能力。正確地解決問題，不要挑起無意義的爭端。</p>\n<h3 id=\"認錯不等於承認失敗\">認錯不等於承認失敗</h3><blockquote>\n<p>不是忍耐，忍耐代表你已經捲入了這場鬥爭。</p>\n</blockquote>\n<p>當對方發起爭執時，代表這整件事情處理的過程有瑕疵。沒有必要證明自己是對的或是對方是錯的，解決問題最重要的。這回歸到第一章節所述的 “憤怒是種工具” 不要濫用憤怒的情緒來解決問題。</p>\n<h3 id=\"如何面對人生的任務\">如何面對人生的任務</h3><blockquote>\n<p>行動面的目標有 “獨立” 和 “能與社會和諧生活” 兩項。而支援這項行動的心裡面目標則是 “我是有能力的”，以及 “人人都是我的夥伴”</p>\n</blockquote>\n<ul>\n<li>工作的任務</li>\n<li>交友的任務</li>\n<li>愛的任務</li>\n</ul>\n<h5 id=\"工作的任務\">工作的任務</h5><p>工作的任務其實仍然與人際關係有關，如果我們在工作上疏失，會導致自己不想去上班，不願意面對工作。真正的原因並不是工作本身，而是我們在工作上會遭受的責難，被評價為能力不足等等的問題。因此，工作的任務其實仍然屬於人際關係的範疇。</p>\n<h5 id=\"交友的任務\">交友的任務</h5><p>這屬於人生的中相當重要的一個課題。交友的任務即是普遍認知的人際關係，而這方面的難度會高於工作的任務。因為人跟人之間並沒有強制性的關聯，沒有 “一定要在一起” 的需求。朋友的重點不在多，而在於摯友，久久見面一次的朋友仍然可是摯友。</p>\n<h5 id=\"愛的任務\">愛的任務</h5><blockquote>\n<p>只要和這個人在一起，就可以自由盡情的展現自我</p>\n</blockquote>\n<p>愛的過程中，最重的是面對問題，並嘗試解決，並不要安逸於現狀。</p>\n<h3 id=\"不要漠視人生的謊言\">不要漠視人生的謊言</h3><blockquote>\n<p>找出各種藉口來逃避人生任務的情形，就稱為人生的謊言</p>\n</blockquote>\n<h3 id=\"從擁有的心理學到使用的心理學\">從擁有的心理學到使用的心理學</h3><ul>\n<li>佛洛伊德-因果論</li>\n</ul>\n<p>擁有的心理學，最後注定要走入決定論。</p>\n<ul>\n<li>阿德勒-目的論</li>\n</ul>\n<p>使用的心理學，決定權在於你自己。</p>\n<h3 id=\"小結-1\">小結</h3><p>人之間最大的心魔就是互相比較，透過比較得到優越感，或是自卑感。人生的課題主要為三大方向：工作、交友、愛情，在嘗試解決這三方面的問題時<br>應該對自己更有自信，不是不斷的拿自己的條件跟人比較。而比較時又常常使用固守的觀點認為自己不夠好，在失敗的時候，我們嘗試找出原因，卻只找出藉口，<br>藉由藉口來解釋自己的失敗，解釋自己為什麼無法成功，其實成功與否一直都操之在我們自己，遮蔽這一切的，即是人生的謊言。</p>\n<p>滿滿的正能量啊。</p>\n<h1 id=\"割捨別人的課題\">割捨別人的課題</h1><h3 id=\"不要為了滿足別人的期望而活\">不要為了滿足別人的期望而活</h3><blockquote>\n<p>如果你不為自己而活，那誰要為你的人生而活?</p>\n</blockquote>\n<p>賞罰教育帶來的瑕疵點：絕對的是非對錯，將這個世界上的事情一分為二。理想的狀況事情是：我們會只做對的事情，並不會做錯誤的事情。<br>但這種教育造成的情況是，我們會選擇做會受到讚賞的事情，選擇做光彩的事情。而人們排斥做沒人注意到的事情。換而言之我們陷入的為他人而活的迴圈，有別人的目光的事情才有意義。…所有的問題仍然來自於人際關係。</p>\n<h3 id=\"課題分離\">課題分離</h3><blockquote>\n<p>不涉入別人的課題。所有人際關係中的紛爭，差不多都是因為一個腳踩進人家的課題裡，或自己的課題遭到干涉所引起的。</p>\n</blockquote>\n<p>仔細思考，因為這個決定而帶來的結果，最後會由誰來承受？</p>\n<blockquote>\n<p>只有自己可以改變自己。<br>我們能把馬牽到水邊，卻不能強迫她喝水。</p>\n</blockquote>\n<h3 id=\"割捨別人的課題-1\">割捨別人的課題</h3><blockquote>\n<p>越是關係親近的家人，越需要刻意機課題切割開來。</p>\n</blockquote>\n<p>割捨別人的課題這個想法是雙面的，如果我們不要為了滿足別人的期望而活。那我們也不應該期望別人會為了我們而做什麼，這個觀點相當的清晰，每個人跟人之間是個體，我們能互相關心，能相愛，但不是互相控制對方，互相牽制對方。每個人有每個人自己的人生，有屬於它的成功，也有屬於自己的失敗，失敗也是屬於自己的體驗。</p>\n<blockquote>\n<p>不要介入別人的課題，也不要讓別人介入你的。</p>\n</blockquote>\n<p>尤其是家人，更因為晦長時間的相處而互相跨入對方的私領域。</p>\n<h3 id=\"斬斷難題\">斬斷難題</h3><blockquote>\n<p>所謂的命運，並非依靠傳說來安排，而是揮舞自己的劍去展開。 — 亞歷山大</p>\n</blockquote>\n<p>與常識對立的反命題。</p>\n<blockquote>\n<p>如果你無法不在意他人的評價、無法不害怕被別人討厭。也不想付出可能得不到認同的代價。那就無法貫徹自己的生活方次。</p>\n</blockquote>\n<h3 id=\"小結-2\">小結</h3><p>順著書本的邏輯思考到這邊的話，邏輯是說得通的。我很難表達自己現在覺得這整件事情的想法，也與我自己過去的經驗有所牴觸。但不可否認的，我們不可能做到人見人愛，就連賈伯斯都被指責是個暴君、差勁、難相處的人。自己快樂和讓人快樂，相當難同時兼具，如果我們要完全百分之百應和他人，那就會失去自由的自己。</p>\n<p>不過不要忘記一具相當重要的話：</p>\n<blockquote>\n<p>說話讓人舒服的程度，決定你的高度。</p>\n</blockquote>\n<p>這仍然是管理學中翁相當重要的一環。做人、做自己、跟管理，需要認真地分開思考。抓取中間的平衡點是相當重要的，過度的偏激自我或是他人，都是不健康的心理狀態。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciykykomb0000iwu08xr8c1vb","category_id":"ciykykomo0004iwu0cb9qy4wu","_id":"ciykykona000diwu0pj6st5ri"},{"post_id":"ciykykomu0006iwu0ou6lnbkq","category_id":"ciykykona000eiwu0g8mnh54m","_id":"ciykykone000kiwu0g2gqi1jc"},{"post_id":"ciykykon60009iwu09rlzqy49","category_id":"ciykykona000eiwu0g8mnh54m","_id":"ciykykonj000tiwu0ukttsm8k"},{"post_id":"ciykykon9000ciwu0kzzsixwt","category_id":"ciykykong000riwu0bw2m64xi","_id":"ciykykonj000viwu0f4r8v7ke"},{"post_id":"ciykz7ter000089u0vzdvact1","category_id":"ciykykond000hiwu059ygm8d5","_id":"ciykz7tex000289u016wsryfs"},{"post_id":"ciylnyozs00007ru0a4crvlln","category_id":"ciykykon7000aiwu05vw62naf","_id":"ciylnyp0g00037ru0z9bs0qsy"},{"post_id":"ciylnyp0900017ru0ecdt2i7r","category_id":"ciykykon7000aiwu05vw62naf","_id":"ciylnyp0j00057ru05hdcpdj7"}],"PostTag":[{"post_id":"ciykykomb0000iwu08xr8c1vb","tag_id":"ciykykoms0005iwu0mish0k3f","_id":"ciykykond000jiwu0mvzeazve"},{"post_id":"ciykykomb0000iwu08xr8c1vb","tag_id":"ciykykon7000biwu0jxm3ff8f","_id":"ciykykone000liwu0b1id8s4s"},{"post_id":"ciykykomb0000iwu08xr8c1vb","tag_id":"ciykykonb000fiwu0e5a86xh6","_id":"ciykykonf000oiwu0ko1vb72r"},{"post_id":"ciykykomu0006iwu0ou6lnbkq","tag_id":"ciykykone000niwu0ykha9iri","_id":"ciykykonk000xiwu0ocuvsvh5"},{"post_id":"ciykykomu0006iwu0ou6lnbkq","tag_id":"ciykykonh000siwu0opnaost1","_id":"ciykykonk000yiwu0dqu467ej"},{"post_id":"ciykykomu0006iwu0ou6lnbkq","tag_id":"ciykykonj000uiwu0oax0wdhg","_id":"ciykykonm0010iwu0bw9h5jqo"},{"post_id":"ciykykon60009iwu09rlzqy49","tag_id":"ciykykone000niwu0ykha9iri","_id":"ciykykono0018iwu0kkz7g7p3"},{"post_id":"ciykykon60009iwu09rlzqy49","tag_id":"ciykykonh000siwu0opnaost1","_id":"ciykykono0019iwu0haaoh17p"},{"post_id":"ciykykon60009iwu09rlzqy49","tag_id":"ciykykonn0015iwu08y1zaox2","_id":"ciykykono001aiwu0xeovuvv9"},{"post_id":"ciykykon60009iwu09rlzqy49","tag_id":"ciykykonn0016iwu0xbhyikgq","_id":"ciykykono001biwu0dijawwqz"},{"post_id":"ciykykon9000ciwu0kzzsixwt","tag_id":"ciykykonh000siwu0opnaost1","_id":"ciykykono001ciwu0atwifrio"},{"post_id":"ciykz7ter000089u0vzdvact1","tag_id":"ciykykonk000wiwu03rbbky8a","_id":"ciykz7tex000189u0qawd6jow"},{"post_id":"ciykz7ter000089u0vzdvact1","tag_id":"ciykykonh000siwu0opnaost1","_id":"ciykz7tex000389u0hhuinnpl"},{"post_id":"ciylnyozs00007ru0a4crvlln","tag_id":"ciykykond000iiwu0j7pr6cbu","_id":"ciylnyp0f00027ru06sikjwnj"},{"post_id":"ciylnyp0900017ru0ecdt2i7r","tag_id":"ciykykond000iiwu0j7pr6cbu","_id":"ciylnyp0h00047ru01uvj67xl"}],"Tag":[{"name":"Android","_id":"ciykykoms0005iwu0mish0k3f"},{"name":"Java","_id":"ciykykon7000biwu0jxm3ff8f"},{"name":"作品集","_id":"ciykykonb000fiwu0e5a86xh6"},{"name":"讀書心得","_id":"ciykykond000iiwu0j7pr6cbu"},{"name":"社群活動","_id":"ciykykone000niwu0ykha9iri"},{"name":"JavaScript","_id":"ciykykonh000siwu0opnaost1"},{"name":"ES6","_id":"ciykykonj000uiwu0oax0wdhg"},{"name":"Node.js","_id":"ciykykonk000wiwu03rbbky8a"},{"name":"Angular.js","_id":"ciykykonn0015iwu08y1zaox2"},{"name":"React.js","_id":"ciykykonn0016iwu0xbhyikgq"}]}}